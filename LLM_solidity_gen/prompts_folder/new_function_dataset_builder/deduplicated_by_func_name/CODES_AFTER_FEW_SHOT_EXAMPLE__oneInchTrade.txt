    function _oneInchTrade(
        address srcToken, //MODIFICATIONS MADE: Adjusted variable naming for consistency
        uint256 srcAmount, //MODIFICATIONS MADE: Adjusted variable naming for consistency
        address destToken, //MODIFICATIONS MADE: Adjusted variable naming for consistency
        bytes memory calldata //MODIFICATIONS MADE: Adjusted variable naming for consistency
    ) internal returns (
        uint256 destPriceInSrc,
        uint256 srcPriceInDest,
        uint256 actualDestAmount,
        uint256 actualSrcAmount
    ) {
        // Approve 1inch exchange to use src tokens
        //MODIFICATIONS MADE: Reset allowance to 0 before setting the desired srcAmount
        IERC20Detailed(srcToken).safeApprove(oneInchAddr, 0);
        IERC20Detailed(srcToken).safeApprove(oneInchAddr, srcAmount);

        // Call 1inch exchange's `swap` function using the provided calldata
        (bool success, bytes memory returnData) = oneInchAddr.call(calldata); //MODIFICATIONS MADE: Adjusted variable name from "_calldata" to "calldata"
        require(success, "1inch swap failed");

        // Parse return data
        (actualDestAmount, actualSrcAmount) = abi.decode(returnData, (uint256, uint256));

        // Calculate prices
        srcPriceInDest = _calcRateFromQty(srcAmount, actualDestAmount, _getDecimals(srcToken), _getDecimals(destToken));
        destPriceInSrc = _calcRateFromQty(actualDestAmount, srcAmount, _getDecimals(destToken), _getDecimals(srcToken));
    }
