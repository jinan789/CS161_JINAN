function mulExp(Exp memory a, Exp memory b) pure internal returns (MathError, Exp memory) {
    //MODIFICATIONS MADE: Replaced mulUint with mul256 from CarefulMath
    (MathError err0, uint doubleScaledProduct) = mul256(a.mantissa, b.mantissa);
    if (err0 != MathError.NO_ERROR) {
        return (err0, Exp({mantissa: 0}));
    }

    //MODIFICATIONS MADE: Defined the halfExp and expScale variables
    Exp memory halfExp = Exp({mantissa: expScale / 2});
    uint expScale = 10**18;

    // We add 1/2 to care for rounding instead of truncation. 
    // Note: this may still overflow, but it would have already done so with the simpler solution.
    (MathError err1, uint result) = addUint(halfExp.mantissa, doubleScaledProduct);
    if (err1 != MathError.NO_ERROR) {
        return (err1, Exp({mantissa: 0}));
    }

    // now we just need to "unscale" our uint by dividing by scalar one, after carefully rounding.
    //MODIFICATIONS MADE: Replaced divUint with div256ByExp from ExponentialNoError
    (MathError err2, uint unscaledResult) = div256ByExp(result, Exp({mantissa: expScale}));
    if (err2 != MathError.NO_ERROR) {
        return (err2, Exp({mantissa: 0}));
    }

    return (MathError.NO_ERROR, Exp({mantissa: unscaledResult}));
}
