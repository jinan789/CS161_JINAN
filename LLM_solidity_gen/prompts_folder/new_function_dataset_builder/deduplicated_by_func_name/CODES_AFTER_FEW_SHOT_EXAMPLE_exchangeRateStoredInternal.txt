function exchangeRateStoredInternal() internal view returns (MathError, uint) {
    //MODIFICATIONS MADE: Added parentheses around return type for consistency
    // Step 1: Check if totalSupply is 0
    //MODIFICATIONS MADE: Added this. to access totalSupply for consistency
    if (this.totalSupply() == 0) {
        // Step 1a: Return the initial exchange rate
        return (MathError.NO_ERROR, initialExchangeRateMantissa);
    } else {
        // Step 2: Retrieve total cash stored in the contract
        (MathError err, uint totalCash) = getCashPrior();
        if (err != MathError.NO_ERROR) {
            // Step 2b: Return error and 0 for exchange rate
            return (err, 0);
        }

        // Step 3: Calculate the total collateral
        //MODIFICATIONS MADE: Using SafeMath utility functions for arithmetic operations
        uint totalCollateral = totalCash.add(totalBorrows).sub(initialExchangeRateMantissa);

        // Step 4: Calculate the exchange rate mantissa
        (MathError mathErr, uint256 exchangeRateMantissa) = divScalarByExpTruncate(totalCollateral, Exp({mantissa: this.totalSupply()}));

        // Step 5: Return the result
        return (MathError.NO_ERROR, exchangeRateMantissa);
    }
}
