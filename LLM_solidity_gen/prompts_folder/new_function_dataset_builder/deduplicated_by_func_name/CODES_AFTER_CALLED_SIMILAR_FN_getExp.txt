
function getExp(uint num, uint denom) pure internal returns (MathError, Exp memory) {
    // Check for zero denominator
    if (denom == 0) {
        return (MathError.DIVISION_BY_ZERO, Exp({mantissa: 0}));
    }

    //MODIFICATIONS MADE: Replaced 10**18 with expScale to be consistent with other functions in the contract.
    // Multiply the numerator by expScale
    (MathError multiplicationError, uint scaledNumerator) = mulUInt(num, expScale);
    
    //MODIFICATIONS MADE: Added check for overflow of num * expScale
    // Check for multiplication error
    if (multiplicationError != MathError.NO_ERROR) {
        return (multiplicationError, Exp({mantissa: 0}));
    }

    // Divide the scaled numerator by the denominator
    (MathError divisionError, uint divResult) = divUInt(scaledNumerator, denom);
    
    // Check for division error
    if (divisionError != MathError.NO_ERROR) {
        return (divisionError, Exp({mantissa: 0}));
    }

    // Return success and the resulting Exp struct
    return (MathError.NO_ERROR, Exp({mantissa: divResult}));
}

