TASK 1:
1. The delegatecall should only be executed if the data.length > 0 or forceCall is true, similar to the example function _upgradeToAndCall().
2. The success or failure of the delegate call should be checked before reverting the upgrade if necessary.

TASK 2:

<CODE_BEGINNING>
function _upgradeToAndCallSecure(
    address newImplementation,
    bytes memory data,
    bool forceCall
) internal {
    // Step 1: Store the current implementation before upgrading
    address currentImplementation = _getImplementation();

    // Step 2: Upgrade to the new implementation
    _upgradeTo(newImplementation);

    // Step 3: Perform a delegate call with the provided data only if data.length > 0 or forceCall is true
    //MODIFICATIONS MADE: Added condition to check data.length > 0 or forceCall before making the delegate call
    if (data.length > 0 || forceCall) {
        (bool success, bytes memory result) = newImplementation.delegatecall(data);

        // Step 4: Check the success or failure of the delegate call
        //MODIFICATIONS MADE: Moved condition checking inside delegatecall result
        if (!success) {
            // Step 4c: Revert the upgrade and restore the previous implementation if the call fails
            _upgradeTo(currentImplementation);

            // Revert the transaction and return the error message from the failed delegate call
            revert(string(abi.encodePacked("Upgrade failed: ", result)));
        }
    }
}
<CODE_ENDING>