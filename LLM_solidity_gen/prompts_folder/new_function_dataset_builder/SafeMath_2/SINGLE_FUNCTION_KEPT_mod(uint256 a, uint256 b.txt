
The function that I want you to summarize is mod(uint256 a, uint256 b, which is defined in the codes given below. Please note that I have hidden the definition of all other functions, but I still kept their signatureS, with the purpose of providing richer background information for you. The codes are: 
pragma solidity ^0.5.16;

// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/Math.sol
// Subject to the MIT license.


library SafeMath {

    function add(uint256 a, uint256 b) internal pure returns (uint256) {
    function add(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
    function mul(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {

    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }


    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
