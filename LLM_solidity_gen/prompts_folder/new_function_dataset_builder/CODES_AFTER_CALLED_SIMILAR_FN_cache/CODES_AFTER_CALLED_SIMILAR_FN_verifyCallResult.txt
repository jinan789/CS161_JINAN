TASK 1: Issues found in your written codes:
1. You declared the function as "internal" which means that this function can only be called from the contract in which it is declared or by derived contracts. Based on the provided information, the accessibility of this function seems fine, so it's not necessarily an issue.
2. In the provided code and called code, there is no implementation or definition of the "memcpy" function that you have used in your code. So, you should replace it with another function or add the implementation of "memcpy" to your contract.

TASK 2: Modified code based on the suggestions:

<CODE_BEGINNING>
function verifyCallResult(
    bool success,
    bytes memory returndata,
    string memory errorMessage
) internal pure returns (bytes memory) {
    
    // Step 1
    if (success) {
        // Step 2
        return returndata;
    } else {
        // Step 3
        if (returndata.length > 0) {
            // Step 4
            assembly {
                let result := mload(0x40) // Step 4a
                mstore(0x40, add(result, and(add(add(returndata, 32), mload(returndata)), 0xfffffffffffffff0)))

                //CHANGES BASED ON CALLED CODE MADE: Replaced memcpy with a loop to copy data
                mstore(result, mload(returndata))
                let dataSize := and(add(mload(returndata), 63), 0xfffffffffffffff0)
                
                // Updated code to copy data without memcpy
                for (let i := 0; lt(i, dataSize); i := add(i, 32)) {
                    mstore(add(result, add(32, i)), mload(add(returndata, add(32, i))))
                }

                // Step 4b
                revert(result, add(32, mload(returndata))) // Step 4c
            }
        } else {
            // Step 5
            revert(errorMessage);
        }
    }
}
<CODE_ENDING>

Added comment that explains modifications:
- Replaced memcpy with a loop to copy data since there is no memcpy function implementation available.