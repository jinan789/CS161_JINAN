TASK 1: 
After analyzing the provided code, I found the following gas-wasting pattern:

1. "Expensive operations in a loop."
   - In the provided code, there is a loop that copies data from `returndata` to `result` using `mstore` and `mload`. However, this loop can be replaced with a built-in Solidity function `abi.encodePacked()` which can reduce gas usage by combining memory operations.
   
   Suggested fix: Replace the loop with a single call to the `abi.encodePacked()` function.

TASK 2:
Here is the modified code with the optimizations made:

<CODE_BEGINNING>
```solidity
function verifyCallResult(
    bool success,
    bytes memory returndata,
    string memory errorMessage
) internal pure returns (bytes memory) {
    
    // Step 1
    if (success) {
        // Step 2
        return returndata;
    } else {
        // Step 3
        if (returndata.length > 0) {
            // Step 4
            assembly {
                let result := mload(0x40) // Step 4a
                mstore(0x40, add(result, and(add(add(returndata, 32), mload(returndata)), 0xfffffffffffffff0)))

                // GAS OPTIMIZATIONS MADE HERE: Replaced loop with abi.encodePacked()
                let dataSize := and(add(mload(returndata), 63), 0xfffffffffffffff0)
                mstore(result, abi.encodePacked(returndata))

                // Step 4b
                revert(result, add(32, mload(returndata))) // Step 4c
            }
        } else {
            // Step 5
            revert(errorMessage);
        }
    }
}
```
<CODE_ENDING>