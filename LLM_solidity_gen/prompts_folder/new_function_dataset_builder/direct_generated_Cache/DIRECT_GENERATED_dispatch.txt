<CODE_BEGINNING>
function dispatch(bytes1 commandType, bytes calldata inputs) 
    external 
    onlyWrapperOrThis
    returns (bool success, bytes memory output) 
{
    // Execute commands based on the given commandType
    if (commandType == Commands.Token.TransferERC20.selector[0]) {
        success = _transferERC20(inputs);
    } else if (commandType == Commands.Token.TransferERC721.selector[0]) {
        success = _transferERC721(inputs);
    } else if (commandType == Commands.Token.TransferERC1155.selector[0]) {
        success = _transferERC1155(inputs);
    } else if (commandType == Commands.Token.ApproveERC20.selector[0]) {
        success = _approveERC20(inputs);
    } else if (commandType == Commands.Token.ApproveERC721.selector[0]) {
        success = _approveERC721(inputs);
    } else if (commandType == Commands.Token.ApproveERC1155.selector[0]) {
        success = _approveERC1155(inputs);
    } else if (commandType == Commands.Swaps.SwapV2Proceeds.selector[0]) {
        (success, output) = _swapV2Proceeds(inputs);
    } else if (commandType == Commands.Swaps.SwapV3Proceeds.selector[0]) {
        (success, output) = _swapV3Proceeds(inputs);
    } else {
        revert InvalidCommandType(uint256(commandType));
    }

    // Check ownership and balance for specific command types
    if (success) {
        if (commandType == Commands.Token.TransferERC721.selector[0]) {
            address to;
            uint256 tokenId;
            (, to, tokenId) = abi.decode(inputs, (address, address, uint256));
            if (ERC721(msg.sender).ownerOf(tokenId) != to) {
                revert InvalidOwnerERC721();
            }
        } else if (commandType == Commands.Token.TransferERC1155.selector[0]) {
            address to;
            uint256 tokenId;
            uint256 value;
            (, to, tokenId, value) = abi.decode(inputs, (address, address, uint256, uint256));
            if (ERC1155(msg.sender).balanceOf(to, tokenId) < value) {
                revert BalanceTooLow();
            }
        }
    }

    return (success, output);
}
<CODE_ENDING>