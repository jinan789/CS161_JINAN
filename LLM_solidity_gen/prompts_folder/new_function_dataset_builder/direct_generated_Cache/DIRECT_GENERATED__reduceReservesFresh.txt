<CODE_BEGINNING>
    /**
     * @notice Reduces the total reserves by a given amount
     * @param reduceAmount The amount of reserves to reduce
     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)
     */
    function reduceReserves(uint reduceAmount) external nonReentrant returns (uint) {
        // Check caller is admin
        if (msg.sender != admin) {
            return fail(Error.UNAUTHORIZED, FailureInfo.REDUCE_RESERVES_CHECK_ADMIN);
        }

        // Check block number is equal to current block number
        if (accrualBlockNumber != getBlockNumber()) {
            return fail(Error.BLOCK_NUMBER_IS_NOT_CURRENT, FailureInfo.REDUCE_RESERVES_CHECK_BLOCK_NUMBER);
        }

        // Check there is sufficient underlying cash
        uint availableCash = getCash();
        if (reduceAmount > availableCash) {
            return fail(Error.INSUFFICIENT_CASH, FailureInfo.REDUCE_RESERVES_CHECK_CASH);
        }

        // Check reduceAmount is not greater than total reserves
        if (reduceAmount > totalReserves) {
            return fail(Error.INVALID_AMOUNT_REQUESTED, FailureInfo.REDUCE_RESERVES_CHECK_AMOUNT);
        }

        // Update total reserves
        totalReserves = totalReserves.sub(reduceAmount);

        // Transfer out the reduceAmount to the admin
        doTransferOut(admin, reduceAmount);

        // Emit ReservesReduced event
        emit ReservesReduced(admin, reduceAmount, totalReserves);

        // Return success code
        return uint(Error.NO_ERROR);
    }
<CODE_ENDING>