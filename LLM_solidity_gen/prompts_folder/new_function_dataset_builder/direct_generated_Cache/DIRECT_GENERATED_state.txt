<CODE_BEGINNING>
    /**
     * @notice Get the current state of a proposal
     * @param proposalId The identifier of the proposal
     * @return The current state of the proposal
     */
    function state(uint proposalId) public view returns (ProposalState) {
        require(proposalCount >= proposalId && proposalId > 0, "GovernorBravo::state: invalid proposal id");
        Proposal memory proposal = proposals[proposalId];
        if (proposal.canceled) {
            return ProposalState.Canceled;
        } else if (block.number <= proposal.startBlock) {
            return ProposalState.Pending;
        } else if (block.number <= proposal.endBlock) {
            return ProposalState.Active;
        } else if (proposal.forVotes <= proposal.againstVotes || proposal.forVotes < quorumVotes) {
            return ProposalState.Defeated;
        } else if(proposal.executed) {
            return ProposalState.Executed;
        } else if (timelock.getPending(bytes32(proposalId)) > 0){
            return ProposalState.Queued;
        } else if (timelock.getTimestamp(bytes32(proposalId)) > block.timestamp) {
            return ProposalState.Pending;
        } else if (timelock.getTimestamp(bytes32(proposalId)) > 0) {
            return ProposalState.Executed;
        } else if (timelock.getTimestamp(bytes32(proposalId)) == 0 &&
        (block.timestamp - proposal.endBlock) < 2 * timelock.GRACE_PERIOD()) {
            return ProposalState.Expired;
        } else {
            return ProposalState.Succeeded;
        }
    }
<CODE_ENDING>