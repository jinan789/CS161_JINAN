<CODE_BEGINNING>
    /**
     * @notice Creates an exponential from numerator and denominator values.
     * @param num The numerator.
     * @param denom The denominator.
     * @return (1) A MathError indicating success or error type, (2) An Exp struct representing the resulting decimal value.
     */
    function getExp(uint num, uint denom) pure internal returns (MathError, Exp memory) {
        // Check for zero denominator
        if (denom == 0) {
            return (MathError.DIVISION_BY_ZERO, Exp({mantissa: 0}));
        }

        // Multiply the numerator by 10^18
        (MathError multiplicationError, uint scaledNumerator) = mulUInt(num, 10**18);
        
        // Check for multiplication error
        if (multiplicationError != MathError.NO_ERROR) {
            return (multiplicationError, Exp({mantissa: 0}));
        }

        // Divide the scaled numerator by the denominator
        (MathError divisionError, uint divResult) = divUInt(scaledNumerator, denom);
        
        // Check for division error
        if (divisionError != MathError.NO_ERROR) {
            return (divisionError, Exp({mantissa: 0}));
        }

        // Return success and the resulting Exp struct
        return (MathError.NO_ERROR, Exp({mantissa: divResult}));
    }
<CODE_ENDING>