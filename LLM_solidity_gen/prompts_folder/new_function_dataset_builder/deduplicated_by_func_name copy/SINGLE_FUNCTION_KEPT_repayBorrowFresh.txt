
The function that I want you to summarize is repayBorrowFresh(address payer, address borrower, uint repayAmount, which is defined in the codes given below. Please note that I have hidden the definition of all other functions, but I still kept their signatureS, with the purpose of providing richer background information for you. The codes are: 
pragma solidity ^0.5.16;

import "./ComptrollerInterface.sol";
import "./CTokenInterfaces.sol";
import "./ErrorReporter.sol";
import "./Exponential.sol";
import "./EIP20Interface.sol";
import "./InterestRateModel.sol";


contract CToken is CTokenInterface, Exponential, TokenErrorReporter {

    struct SeizeInternalLocalVars {
        MathError mathErr;
        uint borrowerTokensNew;
        uint liquidatorTokensNew;
        uint liquidatorSeizeTokens;
        uint protocolSeizeTokens;
        uint protocolSeizeAmount;
        uint exchangeRateMantissa;
        uint totalReservesNew;
        uint totalSupplyNew;
    }


    struct BorrowLocalVars {
        MathError mathErr;
        uint accountBorrows;
        uint accountBorrowsNew;
        uint totalBorrowsNew;
    }

    struct MintLocalVars {
        Error err;
        MathError mathErr;
        uint exchangeRateMantissa;
        uint mintTokens;
        uint totalSupplyNew;
        uint accountTokensNew;
        uint actualMintAmount;
    }


    struct RedeemLocalVars {
        Error err;
        MathError mathErr;
        uint exchangeRateMantissa;
        uint redeemTokens;
        uint redeemAmount;
        uint totalSupplyNew;
        uint accountTokensNew;
    }



    struct RepayBorrowLocalVars {
        Error err;
        MathError mathErr;
        uint repayAmount;
        uint borrowerIndex;
        uint accountBorrows;
        uint accountBorrowsNew;
        uint totalBorrowsNew;
        uint actualRepayAmount;
    }


    function initialize(ComptrollerInterface comptroller_,
                        InterestRateModel interestRateModel_,
                        uint initialExchangeRateMantissa_,
                        string memory name_,
                        string memory symbol_,
                        uint8 decimals_) public {
    function transferTokens(address spender, address src, address dst, uint tokens) internal returns (uint) {
    function transfer(address dst, uint256 amount) external nonReentrant returns (bool) {
    function transferFrom(address src, address dst, uint256 amount) external nonReentrant returns (bool) {
    function approve(address spender, uint256 amount) external returns (bool) {
    function allowance(address owner, address spender) external view returns (uint256) {
    function balanceOf(address owner) external view returns (uint256) {
    function balanceOfUnderlying(address owner) external returns (uint) {
    function getAccountSnapshot(address account) external view returns (uint, uint, uint, uint) {
    function getBlockNumber() internal view returns (uint) {
    function borrowRatePerBlock() external view returns (uint) {
    function supplyRatePerBlock() external view returns (uint) {
    function totalBorrowsCurrent() external nonReentrant returns (uint) {
    function borrowBalanceCurrent(address account) external nonReentrant returns (uint) {
    function borrowBalanceStored(address account) public view returns (uint) {
    function borrowBalanceStoredInternal(address account) internal view returns (MathError, uint) {
    function exchangeRateCurrent() public nonReentrant returns (uint) {
    function exchangeRateStored() public view returns (uint) {
    function exchangeRateStoredInternal() internal view returns (MathError, uint) {
    function getCash() external view returns (uint) {
    function accrueInterest() public returns (uint) {
    function mintInternal(uint mintAmount) internal nonReentrant returns (uint, uint) {
    function mintFresh(address minter, uint mintAmount) internal returns (uint, uint) {
    function redeemInternal(uint redeemTokens) internal nonReentrant returns (uint) {
    function redeemUnderlyingInternal(uint redeemAmount) internal nonReentrant returns (uint) {
    function redeemFresh(address payable redeemer, uint redeemTokensIn, uint redeemAmountIn) internal returns (uint) {
    function borrowInternal(uint borrowAmount) internal nonReentrant returns (uint) {
    function borrowFresh(address payable borrower, uint borrowAmount) internal returns (uint) {
    function repayBorrowInternal(uint repayAmount) internal nonReentrant returns (uint, uint) {
    function repayBorrowBehalfInternal(address borrower, uint repayAmount) internal nonReentrant returns (uint, uint) {

    function repayBorrowFresh(address payer, address borrower, uint repayAmount) internal returns (uint, uint) {
        /* Fail if repayBorrow not allowed */
        uint allowed = comptroller.repayBorrowAllowed(address(this), payer, borrower, repayAmount);
        if (allowed != 0) {
            return (failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.REPAY_BORROW_COMPTROLLER_REJECTION, allowed), 0);
        }

        /* Verify market's block number equals current block number */
        if (accrualBlockNumber != getBlockNumber()) {
            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.REPAY_BORROW_FRESHNESS_CHECK), 0);
        }

        RepayBorrowLocalVars memory vars;

        /* We remember the original borrowerIndex for verification purposes */
        vars.borrowerIndex = accountBorrows[borrower].interestIndex;

        /* We fetch the amount the borrower owes, with accumulated interest */
        (vars.mathErr, vars.accountBorrows) = borrowBalanceStoredInternal(borrower);
        if (vars.mathErr != MathError.NO_ERROR) {
            return (failOpaque(Error.MATH_ERROR, FailureInfo.REPAY_BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED, uint(vars.mathErr)), 0);
        }

        /* If repayAmount == -1, repayAmount = accountBorrows */
        if (repayAmount == uint(-1)) {
            vars.repayAmount = vars.accountBorrows;
        } else {
            vars.repayAmount = repayAmount;
        }

        /////////////////////////
        // EFFECTS & INTERACTIONS
        // (No safe failures beyond this point)

        /*
         * We call doTransferIn for the payer and the repayAmount
         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.
         *  On success, the cToken holds an additional repayAmount of cash.
         *  doTransferIn reverts if anything goes wrong, since we can't be sure if side effects occurred.
         *   it returns the amount actually transferred, in case of a fee.
         */
        vars.actualRepayAmount = doTransferIn(payer, vars.repayAmount);

        /*
         * We calculate the new borrower and total borrow balances, failing on underflow:
         *  accountBorrowsNew = accountBorrows - actualRepayAmount
         *  totalBorrowsNew = totalBorrows - actualRepayAmount
         */
        (vars.mathErr, vars.accountBorrowsNew) = subUInt(vars.accountBorrows, vars.actualRepayAmount);
        require(vars.mathErr == MathError.NO_ERROR, "REPAY_BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED");

        (vars.mathErr, vars.totalBorrowsNew) = subUInt(totalBorrows, vars.actualRepayAmount);
        require(vars.mathErr == MathError.NO_ERROR, "REPAY_BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED");

        /* We write the previously calculated values into storage */
        accountBorrows[borrower].principal = vars.accountBorrowsNew;
        accountBorrows[borrower].interestIndex = borrowIndex;
        totalBorrows = vars.totalBorrowsNew;

        /* We emit a RepayBorrow event */
        emit RepayBorrow(payer, borrower, vars.actualRepayAmount, vars.accountBorrowsNew, vars.totalBorrowsNew);

        /* We call the defense hook */
        // unused function
        // comptroller.repayBorrowVerify(address(this), payer, borrower, vars.actualRepayAmount, vars.borrowerIndex);

        return (uint(Error.NO_ERROR), vars.actualRepayAmount);
    }


    function liquidateBorrowInternal(address borrower, uint repayAmount, CTokenInterface cTokenCollateral) internal nonReentrant returns (uint, uint) {
    function liquidateBorrowFresh(address liquidator, address borrower, uint repayAmount, CTokenInterface cTokenCollateral) internal returns (uint, uint) {
    function seize(address liquidator, address borrower, uint seizeTokens) external nonReentrant returns (uint) {
    function seizeInternal(address seizerToken, address liquidator, address borrower, uint seizeTokens) internal returns (uint) {
    function _setPendingAdmin(address payable newPendingAdmin) external returns (uint) {
    function _acceptAdmin() external returns (uint) {
    function _setComptroller(ComptrollerInterface newComptroller) public returns (uint) {
    function _setReserveFactor(uint newReserveFactorMantissa) external nonReentrant returns (uint) {
    function _setReserveFactorFresh(uint newReserveFactorMantissa) internal returns (uint) {
    function _addReservesInternal(uint addAmount) internal nonReentrant returns (uint) {
    function _addReservesFresh(uint addAmount) internal returns (uint, uint) {
    function _reduceReserves(uint reduceAmount) external nonReentrant returns (uint) {
    function _reduceReservesFresh(uint reduceAmount) internal returns (uint) {
    function _setInterestRateModel(InterestRateModel newInterestRateModel) public returns (uint) {
    function _setInterestRateModelFresh(InterestRateModel newInterestRateModel) internal returns (uint) {
