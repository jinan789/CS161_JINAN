
The function that I want you to summarize is truncate(Exp memory exp, which is defined in the codes given below. Please note that I have hidden the definition of all other functions, but I still kept their signatureS, with the purpose of providing richer background information for you. The codes are: 
pragma solidity ^0.5.16;

/**
 * @title Exponential module for storing fixed-precision decimals
 * @author Compound
 * @notice Exp is a struct which stores decimals with a fixed precision of 18 decimal places.
 *         Thus, if we wanted to store the 5.1, mantissa would store 5.1e18. That is:
 *         `Exp({mantissa: 5100000000000000000})`.
 */
contract ExponentialNoError {
    uint constant expScale = 1e18;
    uint constant doubleScale = 1e36;
    uint constant halfExpScale = expScale/2;
    uint constant mantissaOne = expScale;

    struct Exp {
        uint mantissa;
    }

    struct Double {
        uint mantissa;
    }



    function truncate(Exp memory exp) pure internal returns (uint) {
        // Note: We are not using careful math here as we're performing a division that cannot fail
        return exp.mantissa / expScale;
    }


    function mul_ScalarTruncate(Exp memory a, uint scalar) pure internal returns (uint) {
    function mul_ScalarTruncateAddUInt(Exp memory a, uint scalar, uint addend) pure internal returns (uint) {
    function lessThanExp(Exp memory left, Exp memory right) pure internal returns (bool) {
    function lessThanOrEqualExp(Exp memory left, Exp memory right) pure internal returns (bool) {
    function greaterThanExp(Exp memory left, Exp memory right) pure internal returns (bool) {
    function isZeroExp(Exp memory value) pure internal returns (bool) {
    function safe224(uint n, string memory errorMessage) pure internal returns (uint224) {
    function safe32(uint n, string memory errorMessage) pure internal returns (uint32) {
    function add_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {
    function add_(Double memory a, Double memory b) pure internal returns (Double memory) {
    function add_(uint a, uint b) pure internal returns (uint) {
    function add_(uint a, uint b, string memory errorMessage) pure internal returns (uint) {
    function sub_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {
    function sub_(Double memory a, Double memory b) pure internal returns (Double memory) {
    function sub_(uint a, uint b) pure internal returns (uint) {
    function sub_(uint a, uint b, string memory errorMessage) pure internal returns (uint) {
    function mul_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {
    function mul_(Exp memory a, uint b) pure internal returns (Exp memory) {
    function mul_(uint a, Exp memory b) pure internal returns (uint) {
    function mul_(Double memory a, Double memory b) pure internal returns (Double memory) {
    function mul_(Double memory a, uint b) pure internal returns (Double memory) {
    function mul_(uint a, Double memory b) pure internal returns (uint) {
    function mul_(uint a, uint b) pure internal returns (uint) {
    function mul_(uint a, uint b, string memory errorMessage) pure internal returns (uint) {
    function div_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {
    function div_(Exp memory a, uint b) pure internal returns (Exp memory) {
    function div_(uint a, Exp memory b) pure internal returns (uint) {
    function div_(Double memory a, Double memory b) pure internal returns (Double memory) {
    function div_(Double memory a, uint b) pure internal returns (Double memory) {
    function div_(uint a, Double memory b) pure internal returns (uint) {
    function div_(uint a, uint b) pure internal returns (uint) {
    function div_(uint a, uint b, string memory errorMessage) pure internal returns (uint) {
    function fraction(uint a, uint b) pure internal returns (Double memory) {
