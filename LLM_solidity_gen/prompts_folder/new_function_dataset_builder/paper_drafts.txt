
Related work:

1. LLM-based Code Generation

a. Models


b. Benchmarks

gas saving papers:
~\cite{chen2017underoptimized, chen2018towards, chen2021gaschecker, albert2022superoptimization, nguyen2022gassaver, nelaturu2021smartcontract, chen2022synthesispowered, albert2020gasol, albert2020synthesisof}


2. Gas techniques:
Overall, ever since the first paper \cite{chen2017underoptimized} that examined and proposed gas-saving patterns was published, this field has been seeing various additional contributions that attempt to enrich the toolkit of saving gas consumption for Solidity codes. These techniques can be divided into two categories:

1. Pattern-based finding.
Some of the early works including the proposal of 7 under-optimized gas-wasting patterns at the source code level \cite{chen2017underoptimized} and 24 gas-wasting patterns at the byte code level \cite{towards}. Recently, there has been additional papers on this topic that further found and verified more gas-saving patterns \cite{chen2021gaschecker, nguyen2022gassaver, nelaturu2021smartcontract, chen2022synthesispowered, albert2020gasol}


2. Super-optimization.
Recent works on the topic mainly proposed to convert the gas optimization problem into a MAX-SMT problem \cite{albert2022superoptimization, albert2020synthesisof}, while maintaining the semantic equivalent of the pre- and post-optimized codes.

3. Compiler-level optimization.
As a further step, the Solidity compiler has incorporated support for the optimization of gas by turning on the \textit{--optimize} option.
\todo{look up the instruction for this, should be --optimize}




Conclusion:
In this paper, we have proposed a framework for an automated continuous improvement of Solidity codes generated by Large Language Models such as GPT-4. This framework utilizes some of the important observations 

In addition, to evaluate the effectiveness of our proposed framework, we have also constructed a dataset that extended, refactored \todo{double check the written part for this} popular Solidity contracts 












\subsection{\textbf{The high level design idea}}

\noindent\textbf{1. Implementation:} a direct generation of the Solidity codes without modifications or corrections yet. This corresponds to the Direct Generation step (STEP 1) of our proposed framework.

\noindent\textbf{2. Planning, analysis, design:}  
For the generated codes, we want to make corrections that are strategic and well planned. To accomplish this, we propose different stages (i.e. Chain of Thought (CoT) Feedback, Few-Shot Example (FSE) Feedback, and Related Functions (RF) Feedback) to perform enhancements to the generated codes in a step-by-step manner, which continuously improves the codes logically.


\noindent\textbf{3. Testing and integration:}  
In order to perform testing and corrections based on the testing results, we employ instructions in the prompts sent to the agents by asking it to report what type of issues it finds and make corrections accordingly.














