
The function that I want you to summarize is liquidateBorrowFresh, which is defined in the codes given below. Please note that I have hidden the definition of all other functions, but I still kept their signature, with the purpose of providing richer background information for you. The codes are: 
pragma solidity ^0.5.16;

import "./ComptrollerInterface.sol";
import "./CTokenInterfaces.sol";
import "./ErrorReporter.sol";
import "./Exponential.sol";
import "./EIP20Interface.sol";
import "./InterestRateModel.sol";

/**
 * @title Compound's CToken Contract
 * @notice Abstract base for CTokens
 * @author Compound
 */
contract CToken is CTokenInterface, Exponential, TokenErrorReporter {
    /**
     * @notice Initialize the money market
     * @param comptroller_ The address of the Comptroller
     * @param interestRateModel_ The address of the interest rate model
     * @param initialExchangeRateMantissa_ The initial exchange rate, scaled by 1e18
     * @param name_ EIP-20 name of this token
     * @param symbol_ EIP-20 symbol of this token
     * @param decimals_ EIP-20 decimal precision of this token
     */
    function initialize(ComptrollerInterface comptroller_,
    function transferTokens(address spender, address src, address dst, uint tokens) internal returns (uint) {
    function transfer(address dst, uint256 amount) external nonReentrant returns (bool) {
    function transferFrom(address src, address dst, uint256 amount) external nonReentrant returns (bool) {
    function approve(address spender, uint256 amount) external returns (bool) {
    function allowance(address owner, address spender) external view returns (uint256) {
    function balanceOf(address owner) external view returns (uint256) {
    function balanceOfUnderlying(address owner) external returns (uint) {
    function getAccountSnapshot(address account) external view returns (uint, uint, uint, uint) {
    function getBlockNumber() internal view returns (uint) {
    function borrowRatePerBlock() external view returns (uint) {
    function supplyRatePerBlock() external view returns (uint) {
    function totalBorrowsCurrent() external nonReentrant returns (uint) {
    function borrowBalanceCurrent(address account) external nonReentrant returns (uint) {
    function borrowBalanceStored(address account) public view returns (uint) {
    function borrowBalanceStoredInternal(address account) internal view returns (MathError, uint) {
    function exchangeRateCurrent() public nonReentrant returns (uint) {
    function exchangeRateStored() public view returns (uint) {
    function exchangeRateStoredInternal() internal view returns (MathError, uint) {
    function getCash() external view returns (uint) {
    function accrueInterest() public returns (uint) {
    function mintInternal(uint mintAmount) internal nonReentrant returns (uint, uint) {
    function mintFresh(address minter, uint mintAmount) internal returns (uint, uint) {
    function redeemInternal(uint redeemTokens) internal nonReentrant returns (uint) {
    function redeemUnderlyingInternal(uint redeemAmount) internal nonReentrant returns (uint) {
    function redeemFresh(address payable redeemer, uint redeemTokensIn, uint redeemAmountIn) internal returns (uint) {
    function borrowInternal(uint borrowAmount) internal nonReentrant returns (uint) {
    function borrowFresh(address payable borrower, uint borrowAmount) internal returns (uint) {
    function repayBorrowInternal(uint repayAmount) internal nonReentrant returns (uint, uint) {
    function repayBorrowBehalfInternal(address borrower, uint repayAmount) internal nonReentrant returns (uint, uint) {
    function repayBorrowFresh(address payer, address borrower, uint repayAmount) internal returns (uint, uint) {
    function liquidateBorrowInternal(address borrower, uint repayAmount, CTokenInterface cTokenCollateral) internal nonReentrant returns (uint, uint) {
    function liquidateBorrowFresh(address liquidator, address borrower, uint repayAmount, CTokenInterface cTokenCollateral) internal returns (uint, uint) {
        /* Fail if liquidate not allowed */
        uint allowed = comptroller.liquidateBorrowAllowed(address(this), address(cTokenCollateral), liquidator, borrower, repayAmount);
        if (allowed != 0) {
            return (failOpaque(Error.COMPTROLLER_REJECTION, FailureInfo.LIQUIDATE_COMPTROLLER_REJECTION, allowed), 0);
        }

        /* Verify market's block number equals current block number */
        if (accrualBlockNumber != getBlockNumber()) {
            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.LIQUIDATE_FRESHNESS_CHECK), 0);
        }

        /* Verify cTokenCollateral market's block number equals current block number */
        if (cTokenCollateral.accrualBlockNumber() != getBlockNumber()) {
            return (fail(Error.MARKET_NOT_FRESH, FailureInfo.LIQUIDATE_COLLATERAL_FRESHNESS_CHECK), 0);
        }

        /* Fail if borrower = liquidator */
        if (borrower == liquidator) {
            return (fail(Error.INVALID_ACCOUNT_PAIR, FailureInfo.LIQUIDATE_LIQUIDATOR_IS_BORROWER), 0);
        }

        /* Fail if repayAmount = 0 */
        if (repayAmount == 0) {
            return (fail(Error.INVALID_CLOSE_AMOUNT_REQUESTED, FailureInfo.LIQUIDATE_CLOSE_AMOUNT_IS_ZERO), 0);
        }

        /* Fail if repayAmount = -1 */
        if (repayAmount == uint(-1)) {
            return (fail(Error.INVALID_CLOSE_AMOUNT_REQUESTED, FailureInfo.LIQUIDATE_CLOSE_AMOUNT_IS_UINT_MAX), 0);
        }


        /* Fail if repayBorrow fails */
        (uint repayBorrowError, uint actualRepayAmount) = repayBorrowFresh(liquidator, borrower, repayAmount);
        if (repayBorrowError != uint(Error.NO_ERROR)) {
            return (fail(Error(repayBorrowError), FailureInfo.LIQUIDATE_REPAY_BORROW_FRESH_FAILED), 0);
        }

        /////////////////////////
        // EFFECTS & INTERACTIONS
        // (No safe failures beyond this point)

        /* We calculate the number of collateral tokens that will be seized */
        (uint amountSeizeError, uint seizeTokens) = comptroller.liquidateCalculateSeizeTokens(address(this), address(cTokenCollateral), actualRepayAmount);
        require(amountSeizeError == uint(Error.NO_ERROR), "LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED");

        /* Revert if borrower collateral token balance < seizeTokens */
        require(cTokenCollateral.balanceOf(borrower) >= seizeTokens, "LIQUIDATE_SEIZE_TOO_MUCH");

        // If this is also the collateral, run seizeInternal to avoid re-entrancy, otherwise make an external call
        uint seizeError;
        if (address(cTokenCollateral) == address(this)) {
            seizeError = seizeInternal(address(this), liquidator, borrower, seizeTokens);
        } else {
            seizeError = cTokenCollateral.seize(liquidator, borrower, seizeTokens);
        }

        /* Revert if seize tokens fails (since we cannot be sure of side effects) */
        require(seizeError == uint(Error.NO_ERROR), "token seizure failed");

        /* We emit a LiquidateBorrow event */
        emit LiquidateBorrow(liquidator, borrower, actualRepayAmount, address(cTokenCollateral), seizeTokens);

        /* We call the defense hook */
        // unused function
        // comptroller.liquidateBorrowVerify(address(this), address(cTokenCollateral), liquidator, borrower, actualRepayAmount, seizeTokens);

        return (uint(Error.NO_ERROR), actualRepayAmount);
    }

    /**
     * @notice Transfers collateral tokens (this market) to the liquidator.
     * @dev Will fail unless called by another cToken during the process of liquidation.
     *  Its absolutely critical to use msg.sender as the borrowed cToken and not a parameter.
     * @param liquidator The account receiving seized collateral
     * @param borrower The account having collateral seized
     * @param seizeTokens The number of cTokens to seize
     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)
     */
    function seize(address liquidator, address borrower, uint seizeTokens) external nonReentrant returns (uint) {
    function seizeInternal(address seizerToken, address liquidator, address borrower, uint seizeTokens) internal returns (uint) {
    function _setPendingAdmin(address payable newPendingAdmin) external returns (uint) {
    function _acceptAdmin() external returns (uint) {
    function _setComptroller(ComptrollerInterface newComptroller) public returns (uint) {
    function _setReserveFactor(uint newReserveFactorMantissa) external nonReentrant returns (uint) {
    function _setReserveFactorFresh(uint newReserveFactorMantissa) internal returns (uint) {
    function _addReservesInternal(uint addAmount) internal nonReentrant returns (uint) {
    function _addReservesFresh(uint addAmount) internal returns (uint, uint) {
    function _reduceReserves(uint reduceAmount) external nonReentrant returns (uint) {
    function _reduceReservesFresh(uint reduceAmount) internal returns (uint) {
    function _setInterestRateModel(InterestRateModel newInterestRateModel) public returns (uint) {
    function _setInterestRateModelFresh(InterestRateModel newInterestRateModel) internal returns (uint) {
    function getCashPrior() internal view returns (uint);
    function doTransferIn(address from, uint amount) internal returns (uint);
    function doTransferOut(address payable to, uint amount) internal;
}
