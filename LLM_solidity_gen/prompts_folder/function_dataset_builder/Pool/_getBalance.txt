
The function that I want you to summarize is _getBalance, which is defined in the codes given below. Please note that I have hidden the definition of all other functions, but I still kept their signature, with the purpose of providing richer background information for you. The codes are: 
// SPDX-License-Identifier: Unlicensed
pragma solidity ^0.8.0;

import '@openzeppelin/contracts/utils/math/SafeMath.sol';
import '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';
import './access/roles/Admin.sol';
import './access/roles/Dao.sol';
import './interfaces/IERC20Detailed.sol';

/// @notice DETF pool smart contract
/// @author D-ETF.com
/// @dev The Pool contract keeps all underlaying tokens of DETF token.
/// Contract allowed to do swaps and change the ratio of the underlaying token, after governance contract approval.
contract Pool is AdminRole, DaoRole {
    using SafeMath for uint256;
    using SafeERC20 for IERC20Detailed;

    address public oneInchAddr;

    address internal constant _ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;
    uint256 internal constant _ETH_DECIMALS = 18;
    uint256 internal constant _MAX_QTY = (10**28); // 10B tokens
    uint256 internal constant _MAX_DECIMALS = 18;
    uint256 internal constant _PRECISION = (10**18);

    event Swapped(address srcToken, address destToken, uint256 actSrcAmount, uint256 actDestAmount);
    event Transferred(address asset, address receiver, uint256 amount);

    //  --------------------
    //  CONSTRUCTOR
    //  --------------------


    constructor (address oneInchAddr_) {
        require(oneInchAddr_ != address(0), "Pool: Invalid 1inch address!");
        oneInchAddr = oneInchAddr_;
    }


    //  --------------------
    //  PUBLIC
    //  --------------------


    function swap(
    function transfer(address token, address receiver, uint256 amount) public onlyAdmin {
    function updateOneInchAddress(address newOneInch) public onlyAdmin {
    function getPoolBalance(address asset) public view returns (uint256) {
    function _oneInchTrade(
    function _calcRateFromQty(
    function _getBalance(address token, address addr)
        internal
        view
        returns (uint256)
    {
        if (token == _ETH_ADDRESS) {
            return uint256(addr.balance);
        }

        return uint256(IERC20Detailed(token).balanceOf(addr));
    }

    /**
     * @notice Get the number of decimals of a token
     * @param token the token to be queried
     * @return number of decimals
     */
    function _getDecimals(address token) internal view returns (uint256) {
}
