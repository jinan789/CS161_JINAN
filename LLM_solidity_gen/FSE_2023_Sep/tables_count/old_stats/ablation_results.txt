




Excessive use of `require` statements   & length.7.1   & A5 &  N     &    \\
Redundant variable declaration   & length.7.1   &12  &  Y     &    \\
Repeated call to `keccak256` function   & length.7.1   & A3 &  N     &    \\

\hline 
\hline 


Repeated Balance Queries   & length.7.2   & A13 &  N     &    \\
Redundant Safe Approve Calls   & length.7.2   &A8  &  N     &    \\

\hline 
\hline 

Repeated External Contract Calls   & length.7.3   & 1 &  Y     &    \\
 Redundant Array Initialization for Known Constants   & length.7.3   & A3 &  N     &    \\

\hline 
\hline 

Redundant variable assignments   & length.7.4   & 10 &  Y     &    \\
Unnecessary function calls   & length.7.4   & A3 &  N     &    \\
Overuse of expensive storage variables   & length.7.4   &A8  &  N     &    \\

\hline 
\hline 


Redundant value assignment   & length.7.5   & A5 &  N     &    \\
Unnecessary condition check   & length.7.5   & A4 &  N     &    \\

\hline 
\hline 


Redundant Condition Checking   & length.7.6   &  &  N     &    \\
Repeated Access of Storage Variables   & length.7.6   &  &  N     &    \\

\hline 
\hline 


Redundant SLOAD operations   & length.7.7   &  &  N     &    \\
Redundant condition checks   & length.7.7   &  &  N     &    \\
Inefficient use of storage for booleans   & length.7.7   &  &  N     &    \\

\hline 
\hline 


Unchecked external call   & length.7.8   &  &  N     &    \\

\hline 
\hline 



Unnecessary checks in function calls   & length.7.9   &  &  N     &    \\
Repeated use of `keccak256` hash function   & length.7.9   &  &  N     &    \\

\hline 
\hline 



Overuse of storage for intermediate variables   & length.7.10   &  &  N     &    \\
Inefficient use of loops   & length.7.10   &  &  N     &    \\
Repeated calls to external functions   & length.7.10   &  &  N     &    \\
Unnecessary boolean checks   & length.7.10   &  &  N     &    \\

\hline 
\hline 





Redundant Data Retrieval   & length.8.1   &  &  N     &    \\
Excessive Use of Try-Catch Blocks   & length.8.1   &  &  N     &    \\

\hline 
\hline 



Repeated calls to external contract methods   & length.8.2   &  &  N     &    \\
Unnecessary contract interface casting   & length.8.2   &  &  N     &    \\

\hline 
\hline

Repeated use of the `unchecked` keyword   & length.8.3   &  &  N     &    \\
Repeated deployment of contracts   & length.8.3   &  &  N     &    \\

\hline 
\hline 

Repeated External Function Calls   & length.8.4   &  &  N     &    \\
Unoptimized Type Casting   & length.8.4   &  &  N     &    \\

\hline 
\hline 

Repeatedly calling the same function   & length.8.5   &  &  N     &    \\
Unnecessary calculations in condition checks   & length.8.5   &  &  N     &    \\
Unnecessary use of storage   & length.8.5   &  &  N     &    \\

\hline 
\hline 

Redundant external contract calls   & length.8.6   &  &  N     &    \\

\hline 
\hline  

Excessive query of balance and reserved tokens   & length.8.7   &  &  N     &    \\
Redundant computation of `total_eth`   & length.8.7   &  &  N     &    \\

\hline 
\hline 

   & length.8.8   &  &  N     &    \\
   & length.8.   &  &  N     &    \\
   & length.8.   &  &  N     &    \\

\hline 
\hline 

   & length.8.9   &  &  N     &    \\
   & length.8.   &  &  N     &    \\
   & length.8.   &  &  N     &    \\

\hline 
\hline


   & length.8.10   &  &  N     &    \\
   & length.8.   &  &  N     &    \\
   & length.8.   &  &  N     &    \\

\hline 
\hline 






Redundant External Calls        & original.1   & A5  & N       &5  &5  &5  &  &  &   \\
Repeated Zero Address Validation Checks        & original.1   &A8   & N       &4  &5  &4  &  &  &   \\
Use of Division Operation Inside a Loop        & original.1   &A4   & N       &5  &5  &5  &  &  &   \\


Unnecessary input variable duplication        & original.2   &  12 &   Y     &5  &5  &5 &  &  &input parameters of the function are immediately reassigned to new variables.   \\
Repeated check for zero address        & original.2   &  A3 &   N     &5  &3  &4  &P1,P2  &S1  & assumed "if some function precedes another"   \\
\hline 
\hline 


Unnecessary re-computation of the same value in different functions        & original.3   & A5  & N       &5  &4  &4  &  &  &   \\
Repeated map lookups        & original.3   &1   & Y       &5  &5  &5  &  &  &   \\
Usage of `require` for input validation        & original.3   &A3   & N       &5  &4  &4  &  &  &   \\



Repeatedly calling external contract interfaces        & original.4   & 1  &Y        &5  &5  &5  &  &  &   \\
The use of storage variables for temporary data        & original.4   &A11   & N        &4  &4  &4  &  &  &   \\
Redundant checks for the exclusion status of `address(this)` and `treasuryWallet`        & original.4  &1   & Y       &5  &5  &5  &P5  &S6  &  accesses to potentially storage variables like \_isExcluded[sender] are done multiple times.  \\
\hline 
\hline 














Redundant Calls to External Contracts    & fse.1   &A5  &  N      &    \\
Frequent Use of `block.timestamp    & fse.1   &1  &  Y      &    \\
Multiple Reads of the Same State Variable    & fse.1   & A4 &  N      &    \\

\hline 
\hline 


Unnecessary Storage of Variables    & fse.2   &12  &  Y      &    \\
Redundant condition check    & fse.2   &A4  &  N      &  No twice found  \\
Redundant keccak256 computation    & fse.2   &A3  &  N      &    \\

\hline 
\hline 

Frequent calls to `_etherPrice()`    & fse.3   &A4  &  N      &    \\
Repetitive arithmetic operations    & fse.3   &A8  &  N      &    \\
Unnecessary `require` checks    & fse.3   &A15  &  N      &    \\
Multiple `transfer()` calls within a single function    & fse.3   &A15  &  N      &    \\

\hline 
\hline 

Redundant approval calls    & fse.4   & A3 &  N      &    \\
Unnecessary `if` conditions    & fse.4   &1  &  Y      &    \\
Unnecessary Storage Read    & fse.4  & A5 &  N      &    \\

\hline 
\hline 



Excessive Function Calls    & codes.1   & A13 &  N      & codes in the middle could change some states   \\
Unoptimized Array Handling    & codes.1   &A8  &  N      & Using memory as intermediates means we have to copy every item from storage over here, and then store back to storage.  Removal is the same, since we have to pop at some point anyways \\
Not Using Libraries for Complex Operations    & codes.1   &A17  &  N      &    \\
Unnecessary State Variable    & codes.1   & A17  &  N      &    \\
\hline 
\hline 


Inefficient use of data types    & codes.2   & 3 &  Y      & " Use the smallest data type that can accommodate your data"   \\
Unoptimized array operation    & codes.2   &9  &  Y      & "Numerous operations on arrays can be gas-intensive. For instance, searching an unsorted array for a particular value requires a linear search which is O(n). This pattern was found by considering the computational complexity of array operations. Linear searches are inefficient, and doing this multiple times can waste gas. Use a mapping for constant-time lookups if possible. If you need to use an array, consider keeping it sorted so you can use binary search for faster lookups."    \\
Unnecessary function visibility    & codes.2   &25  &  Y      &    \\
Not utilizing short-circuiting in boolean operations.    & codes.2   &20  &  Y      &    \\
\hline 
\hline 

Unoptimized Data Types and Structures    & codes.3   &3  &  Y      &    \\
Unused Code and Dead Code    & codes.3   &26  &  Y      &    \\
Overuse of External Calls    & codes.3   &A17  &  N      &    \\
Inefficient Error Handling    & codes.3   &27  & Y      &    \\
Unoptimized Function Visibility    & codes.3   &25  &  Y      &    \\
\hline 
\hline 

Non-optimal data types    & codes.4   &3  &  Y      &    \\
Unnecessary array length declarations    & codes.4   & A17 &  N      &    \\
Using `address.call()` instead of `address.transfer()` or `address.send()`    & codes.4   &A10  &  N      &    \\
\hline 
\hline 






Repeated external calls to the same contract    & cot.1   &1  &  Y      &    \\
Unnecessary checks of the zero address    & cot.1   &A3  &  N      &    \\
Repeated storage reads of the same variable    & cot.1   &A4  &  N      &  Not reading from storage, overlaps with pattern 1  \\

\hline 
\hline 



Unnecessary string conversion    & cot.2   &A4  &  N      &Not a conversion    \\
Redundant variable declaration    & cot.2   &12  &  Y      &    \\
Repeated contract interaction    & cot.2   &A13  &  N      &    \\
Unnecessary use of assembly    & cot.2   & A8 &  N      &    \\
Unnecessary balance check    & cot.2   & A3 &  N      &    \\

\hline 
\hline

Repeatedly calling the same function inside a contract    & cot.3   &A5  &  N      &    \\
Excessive `require` statements    & cot.3   & A15 &  N      &    \\
Repeated calculation of similar expression    & cot.3   &A5  &  N      &    \\

\hline 
\hline

Redundant Approval Calls    & cot.4   &A3  &  N      & "But, if this condition is true once, it will likely be true again in future calls. It means that you are making redundant approval calls, wasting gas."   \\
Redundant Condition Checks    & cot.4   & 1 &  Y      &    \\
Frequent Storage Access    & cot.4   &A5  &  N      &    \\
Redundant Contract Creations    & cot.4   & A3 &  N      & The new map would be trading storage for gas at one spot   \\

\hline 
\hline




