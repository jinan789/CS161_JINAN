
Repeated Condition Check    & 1.1   & 16  &  Y    &NA  &NA  &NA      & repeated "onlyUnpauser" modifier causes repeated require checks   \\


\hline 
\hline 

Constant Function Hash Calculation    & 1.2  & 1  &  Y     &NA  &NA  &NA   &   \\
Redundant Success Check    &1.2   & A4  &  N     &NA  &NA  &NA   &   \\

\hline 
\hline 


Redundant Address Check    & 1.3  &A4   & N    &NA  &NA  &NA     & The address to be checked against 0 is an input, which requires validation   \\
Repeated Calls to External Contracts    & 1.3  &A5   &  N      &NA  &NA  &NA  &   \\
Redundant Memory Array Initialization    & 1.3  & 17  & Y     &NA  &NA  &NA   &  Take this as an example for pattern 17. more at the pattern specification. \\
\hline 
\hline 



Repeated Check for Zero Addresses    & 1.4  &A5   &  N    &NA  &NA  &NA    &   \\
Expensive Storage Operations    & 1.4  & A3  &  N     &NA  &NA  &NA   &   \\
Usage of ‘require‘ for Input Validation    & 1.4  & 18  &  Y    &NA  &NA  &NA    & NOTE: this is not a found pattern from the codes, but rather an imaginarily inferred one. Need to find examples  \\
    
\hline 
\hline 




Repeated computation of ‘\_msgSender()‘    & 1.5  &A5   &  N     &NA  &NA  &NA   &   \\
Repeated computation of ‘\_allowances[owner][spender]‘    & 1.5  &A5   &  N      &NA  &NA  &NA  &   \\
    
\hline 
\hline 



Redundant Condition Check    & 1.6  & 9  &  Y    &NA  &NA  &NA   & NOTE: use a mapping to substitute complicated branched for (e.g. iterated to find a matching index) or if (iterated checking some conditions that could be changed to a map) HOWEVER, this case needs to be verified by codes. Not guaranteed to reduce gas \\
Multiple Calls to the Same Function    & 1.6  &A5   &  N     &NA  &NA  &NA   &   \\
    
\hline 
\hline 


Repeating Expensive Operations    & 1.7  & A5  &  N      &NA  &NA  &NA  &   \\
Redundant Conditional Statement    & 1.7  &A3   &  N      &NA  &NA  &NA  &   \\
Unnecessary State Updates    & 1.7  & 19  &  Y     &NA  &NA  &NA   &   \\
    
\hline 
\hline 


Redundant Condition Checks in transfer Function    & 1.8  &A4   &  N    &NA  &NA  &NA    &   \\
Redundant Computation in openTrading Function    & 1.8  & 1  &  Y    &NA  &NA  &NA  &   \\
\hline 
\hline 


Inefficient Storage Reading    & 1.9  & A5  &  N     &NA  &NA  &NA   &   \\
Redundant Ownership Check    & 1.9  &A4   &  N      &NA  &NA  &NA  &   \\
    
\hline 
\hline 

Use of SafeMath library for arithmetic operations    & 1.10  & 22  &  Y      &NA  &NA  &NA  & This example is "pragma solidity 0.8.20;", which is higher than 0.8.0, so safe math is not needed anymore.  \\
Use of public variable setters    & 1.10  & 23  &  Y     &NA  &NA  &NA   & This is one of those patterns that are made up, but make sense, and could potentially be applied elsewhere  \\
    & 1.10  &   &  N      &   \\
    
\hline 
\hline 


























\todo{RSM scores are available from round 2}


Extensive use of storage    & 2.1  &A3   &  N    &4  &5  &3    &   \\
Redundant condition checks    & 2.1  & 20  &  Y     &5  &5  &4  &relies on some not-so-likely conditions, but we could later say that we have some categories that rely on specific conditions. From 0x2f8fD77D037C0778E98fF160168995CD14634eaE  \\
Frequent emission of events    & 2.1  & 21  &  Y     &4  &5  &4   &  From 0x2f8fD77D037C0778E98fF160168995CD14634eaE  \\
Unnecessary type conversions     & 2.1  & A4  &  N      &5  &5  &5  &   \\
   
\hline 
\hline 


Repeated Balance Checks    & 2.2  &A4   &  N    &4  &5  &4    &   \\
Excessive use of require statements    & 2.2  & A4  &  N   &5  &3  &5     &  A4 because the require checks are necessary \\
Inefficient Storage Access    & 2.2  & A4  &  N     &4  &5  &4   &   \\
    
\hline 
\hline 


Redundant balance checking    & 2.3  &A4   &  N    &5  &5  &5    &   \\
Avoiding multiple storage reads    & 2.3  &A4   &  N     &4  &5  &4   &   \\
Multiple conditional checks    & 2.3  & A4  &  N     &3  &5  &4   &   \\
    
\hline 
\hline 

Redundant `require` checks    & 2.4  &A3   &  N     &4  &5  &5   &   \\
Multiple contract interactions in a loop    & 2.4  & A3  &  N    &3  &3  &3    & conditioned on swap being refactorable and redundant   \\
Potential for redundant allowance checks    & 2.4  & A3  &  N     &4  &5  &4   &   \\
    
\hline 
\hline 



Redundant Approval Checks    & 2.5  &A3   &  N    &4.5  &5  &4.5    &   \\
Unnecessary Balance Check    & 2.5  &A4   &  N    &5  &4  &5    &   \\

\hline 
\hline 





Redundant Gas Calculation    & 2.6  & A4  &  N    &5  &5  &5    &   \\
Use of Conditional Statement Where Not Necessary    & 2.6  &A3   &  N     &5  &5  &5   & That way, in the case that the fees are already 0, huge gas cost will be incurred  \\
Multiple Checks for the Same Condition      & 2.6  & A4  &  N     &5  &5  &4.5   &   \\
\hline 
\hline 




Redundant Checks    & 2.7  &A4   &  N      &5  &4  &5  &   \\
Unnecessary Memory Allocation    & 2.7  &A10   &  N     &4  &5  &4   &   \\
Redundant Subtraction    & 2.7  & A3  &  N     &4  &5  &4   &   \\
\hline 
\hline 




Repeated Calls to External Contract Functions    & 2.8  &A5   &  N    &5  &5  &4    &   \\
Use of 'now' alias for 'block.timestamp'    & 2.8  &A4   &  N      &5  &5  &5  &   \\
Frequent use of multiplication and division by 1e18    & 2.8  &A10   &  N     &3  &5  &4   &   \\
\hline 
\hline 




Unnecessary conditional checks    & 2.9  &A3   &  N     &4.5  &5  &4.5   &   \\
Redundant Balance Calculations    & 2.9  &A4   &  N    &4.5  &5  &4.5    & those repeated accesses to the map variable is distributed across different if-else branches, which means they cannot be executed within one function call at the same time.  \\
\hline 
\hline 




Use of `require` statements    & 2.10  & A3  &  N    &4  &3  &5    & Trading requires for gas cost is a terrible idea  \\
Access of storage variables    & 2.10  & A4  &  N     &5  &5  &4   &   \\
Redundant contract interactions    & 2.10  & A4  &  N      &4  &5  &4  &   \\
\hline 
\hline 









Accessing Length Property Multiple Times    & 3.1  & A5  &  N     &5  &5  &4   &   \\

\hline 
\hline 


Redundant Balance Check    & 3.2  &24   &  Y     &4  &5  &4   & it saves gas if there are multiple transfer_froms from the same address, which saves repeated accesses to the "from" balance. Some issues: in the example The new if check does not quite make sense.  It also deleted the unchecked keyword for no legitimate reason.   \\
\hline 
\hline 


Repeated Use of Storage Variables    & 3.3  &A4   &  N    &4  &5  &4    &  The specified storage reads and writes are necessary \\
Multiple Storage Writes    & 3.3  &A8   &  N     &4  &5  &4   &   \\
\hline 
\hline 

  &5  &5  &5
Multiple Calls to the Same Function    & 3.4  & A4   &  N     &5  &5  &5   & No twice found  \\
Multiple Comparisons with Zero    & 3.4  &A15   &  N     &4  &5  &5   & How do we combine these two logical statements...  \\
\hline 
\hline 


Redundant ABI Encodings    & 3.5  &A3   &  N    &5  &5  &4    & It requires us to send a totally incompatible set of params to another function call, and asks us to change the called function's signature just to match its incompatible params  \\
Hardcoded Gas Limit    & 3.5  &A15   &  N      &5  &4  &5  &  It asks for a better approximation of gas, that's too much to ask and the hardcoded gas limit is already part of the design of the original codes, and is not suitable to be changed. \\
Repeated Access of `params_` Struct Members    & 3.5  &A4   &  N      &5  &5  &4  &  \\
\hline 
\hline 


Repeated External Function Calls    & 3.6  & 1  &  Y     &5  &4.5  &5   &   \\
Multiple Calls to `IERC20Detailed` and `IStableDebtToken`    & 3.6  &1   &  Y    &4  &4.5  &4    &   \\
\hline 
\hline 

Multiple Storage Reads    & 3.7  &1   &  Y    &5  &5  &4    &   \\
Unused Computation    & 3.7  & A3  &  N     &5  &5  &5   &"but if `applications[_tick].expireAt == 0`, the loop continues without using `_votes`"   \\
Over-allocation of Memory    & 3.7  &A3   &  N    &4  &5  &4    &   \\
\hline 
\hline 

Excessive use of inline Assembly    & 3.8  &A3   &  N    &2  &3  &2    &   \\
Repeatedly calling \texttt{sload} function.   & 3.8  & A3  &  N     &4  &5  &4   & "which could potentially be executed multiple times"  \\
Unnecessary forced revert    & 3.8  & A4  &  N      &5  &4  &5  &seems like it's a design feature   \\
\hline 
\hline 

Repeated Keccak256 computation    & 3.9  &A4   &  N    &5  &5  &5    &" This operation could be repeated elsewhere in the contract, which would be wasteful. "   \\
Redundant computation in require statements    & 3.9  & A3  &  N     &4  &3  &4   &  moving computation off chain is a bad idea \\
High gas usage in the linearPolynomialEvaluation function    & 3.9  & A3  &  N     &3  &5  &3   & "It is not shown in the code, but the `linearPolynomialEvaluation` function is likely computationally heavy. It probably iterates"  \\
\hline 
\hline 

Use of `require` to check conditions multiple times    & 3.10  & A4  &  N   &5  &5  &4     & each require has its own error message  \\
Repeated computation of hash and unnecessary storage access    & 3.10  & A4  &  N     &5  &5  &4   & Not much we can do with reading and assignment  \\
\hline 
\hline 


















Usage of array iteration for rewardInfo        & 4.1   &  A2 &   N    &4  &5  &4   & the target codes did involve a lot of memory operations, and we might consider adding a category called "expensive contracts" to indicate such, and propose potential methods for improvement (in this case, how to save away that many operations on memory arrays)  \\
Repeated computation of `timeElapsed` and `tokenReward`         & 4.1    & 1  & Y    &4  &5  &4 &        \\
Usage of division operation         & 4.1   &  A1  &   N     &3  &5  &4  &   \\

\hline 
\hline 

Redundant calculations         & 4.2   &  A4  &   N     &5  &5  &5 &  \\  
Unnecessary casting         & 4.2   &  A3  &   N   &4  &5  &4    &   \\
\hline 
\hline 

Repeated loading of contract state variables         & 4.3   &  A5  &   N     &5  &5  &5 &  \\  
Repetition of code logic         & 4.3   &  2  &   Y     &4  &5  &5  &   \\
Unnecessary assembly usage         & 4.3   &  A6  &   N      &5  &5  &5 &   \\
\hline 
\hline 

Repeated calls to external contracts         & 4.4   &  1  &   Y     &5  &5  &5 &  repeated calls to pair.token0() and pair.token1() \\  
Unnecessary condition checks         & 4.4   &  A7  &   N      &5  &5  &5 &   \\
Inefficient use of data types        & 4.4   &  3  &   Y     &5  &3  &4  &  e.g. use uint32 instead of uint256 in "for (uint32 i = 0; i < myArray.length; i++)" \\
\hline 
\hline 


Repeated conditional checks in different functions         & 4.5   &  A2  &   N    &5  &4  &4  &   \\  
Repeated computation of rEthToken.balanceOf(address(this))         & 4.5   & A9   &   N     &5  &4  &4  &  \\
\hline 
\hline 


Redundant Assignment in the \_initializePool Function         & 4.6   &  4  &   Y    &5  &5  &4  &  \_token0 and \_token1 are overwritten in the else case of the \_initializePool function \\  
Unnecessary Constant Checking         & 4.6   &  5  &   Y   &5  &5  &5    &  Constants, like UNISWAP\_FEE, TICK\_SPACING, etc., are used in require statements \\
Redundant Zero-Value Check         & 4.6   &  6  &   Y    &5  &5  &5   &  There's a check in the addLiquidity function for `slippage >= 0`. Since slippage is a uint16, it can't be less than zero. This redundant check wastes gas. \\
\hline 
\hline 

Multiple existence checks         & 4.7   &  2  &   Y    &5  &5  &5  &  \\  
Repeated storage reads         & 4.7   &  1  &   Y     &4  &5  &5  &   \\
Repetitive revert statements   & 4.7   &  A6  &   N     &5  &5  &5  &   \\
\hline 
\hline 

Repeated Calls to External Contract Functions         & 4.8   &  1  &   Y     &5  &5  &4 &  \\  
Duplicate Code in Loop         & 4.8   &  2  &   Y     &5  &5  &5  &   \\
\hline 
\hline 



Redundant Function Calls         & 4.9   &  1  &   Y    &5  &5  &5  &  \\  
Unnecessary Storage Reads         & 4.9   &  A4  &   N    &5  &5  &5   &   \\
Condition-based Optimization  & 4.9   &  A4  &   N    &4  &3  &3   &  however, looking at this, we do find that there are repeated accesses to variables like pot.rho() and pot.chi(). \\
\hline 
\hline 

Repeated Calls to \_msgSender        & 4.10   &  1  &   Y    &5  &5  &5  &  \\  
Repeated Storage Lookup         & 4.10   &  A2  &   N    &5  &5  &5   &   \\

\hline 
\hline 




Redundant storage reads        & 5.1   &  A5 &   N  & 5  &  5 & 5    &   \\
Repeated conditional checks         & 5.1    & 1  & Y  &  4 & 5  &4   & repeated conditional expressions      \\
Repeated function calls         & 5.1   &  1  &   Y   & 4  &5   & 4    & repeated calls to the same function  \\
Overuse of storage         & 5.1   &  A3  &   N     &  5 &  3 & 4  &  \\
\hline 
\hline 


Repeated Access of Storage Variables        & 5.2   &  1 &   Y     &4.5  &5  &4   &    \\
Repeated Computation of `block.timestamp.sub(ledger[msg.sender][i].from)`         & 5.2   & A5  & N     &4  &5  &4  &   \\
\hline 
\hline 


Multiple Calls to the Same Function        & 5.3   &  A5 &   N     &5  &5  &5   &    \\
Unnecessary Typecasting         & 5.3   & A4  & N     &5  &5  &5  &   \\
\hline 
\hline 




Unnecessary Hash Computations        & 5.4   &  A5 &   N    &5  &5  &5   &    \\
Redundant Length Fetching         & 5.4   & A4  & N     &5  &5  &5  &   \\
\hline 
\hline 


Repeated common computations        & 5.5   &  2 &   Y     &5  &5  &5  &    \\
Repeated storage reads         & 5.5   & A2  & N     &4  &5  &4  &   \\
Unnecessary boolean operations & 5.5   & 7  & Y     &5  &5  &5  &  \textit{bool isOwner = false; if(msg.sender == presale\_owner) { isOwner = true;}         require(isOwner == true, "Requires owner");} could be  simplified to \textit{require(msg.sender == presale\_owner, "Requires owner")}, i.e. 3 conditional checks to just 1  \\
\hline 
\hline 



Multiple `getConfiguration` calls for the same asset in a function        & 5.6   &  A5 &   N     &5  &5  &5  &    \\
\hline 
\hline 


Repeated Contract Interactions       & 5.7   &  A4 &   N    &5  &5  &4   &    \\
Looping over Arrays of Unknown Length   & 5.7   &  A8 &   N     &3  &5  &2  &  But it does raise concerns about accepting arrays inputs of arbitrary sizes and looping over them, as this has a high level of undercainty as to the amount of gas that will be consumed  \\
Inefficient Calculation       & 5.7   &  A4 &   N     &5  &5  &4 &    \\
\hline 
\hline 



Redundant Balance and Allowance Checks       & 5.8   & A3   &  N    &5  &5  &5    &    \\
Repeated Calls to `block.timestamp      & 5.8   & 1   &  Y     &5  &5  &5   &    \\
Inefficient Storage Usage      & 5.8   & 1   &  Y    &4  &5  &4    &    \\
\hline 
\hline 


Repeated Calls to Functions Returning Constant Values       & 5.9   & 1   &  Y      &5  &5  &5 &    \\
Unnecessary Storage of Boolean Variables in Memory      & 5.9   & 7   &  Y     &4  &5  &4   & E.g. \textit{result = false; return result;}  could be simplified to just \textit{return false}  \\
Repeated Zero Balance Checks      & 5.9   & 7   &  Y     &5  &5  &5   &  first it checked \textit{if (tokensForSwapping > 0  balanceOf(address(this)) >= tokensForSwapping)}  and then checked \textit{uint256 tokenBalance = balanceOf(address(this)); if (tokenBalance == 0 || totalTokensToSwap == 0)} , which is an extra unnecessary operation that could be simplified and stored to an intermediate variable\\
\hline 
\hline 



Redundant Approvals       & 5.10   & A4   &  N       &4  &5  &4 &    \\
Unnecessary Balance Checks      & 5.10   & A4   &  N      &5  &5  &5  &    \\
Inefficient Token Comparison      & 5.10   & A9   &  N      &4  &5  &4  &    \\
\hline 
\hline 








Repeated computation of the same expression        & 6.1   &  1 &   Y       &NA  &NA  &NA  &   \\
Redundant operations with same effects        & 6.1   &  A3 &   N       &NA  &NA  &NA &   \\
Pre-computable operations on constants        & 6.1   &  A3 &   N       &NA  &NA  &NA &   \\
\hline 
\hline 


Overuse of storage variables in the `_transfer` function        & 6.2   &  A2 &   N      &NA  &NA  &NA  &   \\
Redundant checks in the `setStructure` function      & 6.2   &  A2 &   N      &NA  &NA  &NA  &   \\
Repeated multiplication in `swapAndLiquify` function      & 6.2   &  1 &   Y      &NA  &NA  &NA  &  \textit{unitBalance.mul(2)} is repeated \\
Inefficient conditions in `setBuyMultiplier` function      & 6.2   &  1 &   Y     &NA  &NA  &NA  &  \textit{sender == pair} is repeated \\

\hline 
\hline 



Redundant Storage Reads        & 6.3   &  1 &   Y   &5  &5  &5   &  \textit{excludedFromFees[sender]} and \textit{excludedFromFees[recipient]} are read multiple times \\
Repeated Computation of `address(this).balance`        & 6.3   &  A9 &   N    &5  &5  &5 & \textit{address(this).balance}  \\
Overuse of `sendValue`        & 6.3   &  A10 &   N    &5  &4  &5  &   \\

\hline 
\hline 



Redundant Condition Check        & 6.4   &  A8 &   N    &5  &5  &4  &   \\
Repeated Fetching of hWETH token        & 6.4   &  A8 &   N    &5  &5  &4  &   \\
Overuse of Storage Variables       & 6.4   &  A8 &   N    &4  &5  &5  &   \\

\hline 
\hline 



Redundant Ownership Checks        & 6.5   &  2 &   Y    &4  &5  &4  &  by introducing a modifier, a highly repeated code chunk could be removed \\
Loop for Search        & 6.5   &  9 &   Y    &3  &5  &4  &  The functions `gen1IndividualUnstake` and `gen2IndividualUnstake` use a loop to search for a token's index in the `gen1StakedArray[msg.sender]` and `gen2StakedArray[msg.sender]` arrays, respectively. This operation has a time complexity of O(n) and can consume significant gas in the worst-case scenario when the token is not present in the array. \\
Array Resizing        & 6.5   &  10 &   Y    &4  &5  &4  &   \textit{Add a condition to check whether the element being removed is the last one. If it is, skip the swap operation.} this helps avoid some unnecessary swaps \\
Unnecessary State Variable   & 6.5   &  A11 &   N    &4  &5  &5  &   \textit{Add a condition to check whether the element being removed is the last one. If it is, skip the swap operation.} this helps avoid some unnecessary swaps \\

\hline 
\hline 



Repetitive Conditional Checks       & 6.6   &  A5 &   N   &4.5  &5  &4.5   &   \\
Persistent Storage Access       & 6.6   &  A2 &   N    &4  &5  &4  &   \\
Wasteful Assembly Code       & 6.6   &  A6 &   N     &5  &5  &5 &  the pattern regards the readibility of codes \\
Unnecessary use of `try-catch`    & 6.6   &  A6 &   N     &5  &5  &5 &   \\
\hline 
\hline 




Redundant Conditional Checks in Transfer Functions       & 6.7   &  11 &   Y    &5  &5  &5  & In the `\_transferFrom` function, there are redundant checks for whether `sender` and `recipient` are not the zero address. This same check is performed in the `transferFrom` function, which calls `\_transferFrom`. Thus, if the transfer originates from `transferFrom`, the same condition is checked twice, wasting gas.   \\
Repeated Computation in tokenSwap Function       & 6.7   &  1 &   Y    &5  &5  &5  &  In the `tokenSwap` function, the expression `\_devBuyTax + \_devSellTax` is calculated multiple times. Similarly, the expression `\_liquidityBuyTax + \_liquiditySellTax` and `\_marketingBuyTax + \_marketingSellTax` are calculated more than once \\
Overuse of Storage Variables in takeFee Function       & 6.7   &  A3 &   N    &4  &4  &4  &   \\
Pre-computable Operations in setTaxes Function   & 6.7   &  A3 &   N     &3  &5  &3 &   \\
\hline 
\hline 


Repeated Calls to totalSupply       & 6.8   &  A5 &   N    &5  &5  &5  &   \\
Expensive storage writes      & 6.8   &  1 &   Y    &4  &5  &5  &   \\
\hline 
\hline 



Redundant conditional checks       & 6.9   &  A3 &   N     &5  &5  &5 &   \\
Repeated computation of the same expression       & 6.9   &  A2 &   N    &4  &5  &4  &   \\
Extractable code chunks       & 6.9   &  A8 &   N    &5  &5  &5  &   \\
\hline 
\hline 

Unnecessary Keccak256 Hash Computations       & 6.10   &  A12 &   N    &5  &5  &5  &   \\
Redundant Check in `\_creditTo` function       & 6.10   &  7 &   Y     &5  &5  &5 &   \\
\hline 
\hline 









Unnecessary input variable duplication        & 7.1   &  12 &   Y     &5  &5  &5 &  &  &input parameters of the function are immediately reassigned to new variables.   \\
Repeated check for zero address        & 7.1   &  A3 &   N     &5  &3  &4  &P1,P2  &S1  & assumed "if some function precedes another"   \\
\hline 
\hline 



Repeatedly retrieving token balances        & 7.2   &  A13 &   N     &5  &5  &5 &  &  &  repeated operations of reading the balance occurs with a modification to balance in between, and this does not constitute a repeated operation \\
Repeated computation of `keccak256(abi.encodePacked(\_name))        & 7.2   &  A4 &   N     &5  &5  &5  &  &  &   \\
Repeated access to `params.nftPositionManager`        & 7.2   &  13 &   Y     &4  &5  &4  &  &  & test\_dot\_u and \_o: Du = 94 steps, 240962 gas, Ru = 1004 steps, 21007 gas. Do = 94 steps, 240931 gas, Ru = 961 steps, Ro = 20452 gas  \\
Repeated computation of `position.tickLower != -maxTick position.tickUpper != maxTick`        & 7.2   &  A4 &   N     &5  &5  &5  &P3  &S1,S2  &   \\
\hline 
\hline 



Repeatedly Accessing the Same Contract        & 7.3   &  1 &   Y     &5  &5  &4  &  &  &   \\
Unnecessary Conditional Checks in Loop    & 7.3   &  A14 &   N     &4  &5  &4  &  &  &   \\
Repeated Calls to the Same Function with the Same Parameters    & 7.3    &  A5 &   N     &5  &5  &4  &P4,P5  &S3,S4  &   \\
\hline 
\hline 




Excessive use of `require` for input validation         & 7.4   & A3  & N       &5  &3  &5  &  &  &   \\
Repetitive calls to external contracts        & 7.4   & 1  &   Y     &5  &4  &5  &  &  &   \\
Repeated assignment of storage variables                & 7.4   & 10  & Y       &5  &5  &5  &P5  &S5  &   \\
\hline 
\hline 



Repeatedly calling external contract interfaces        & 7.5   & 1  &Y        &5  &5  &5  &  &  &   \\
The use of storage variables for temporary data        & 7.5   &A11   & N        &4  &4  &4  &  &  &   \\
Redundant checks for the exclusion status of `address(this)` and `treasuryWallet`        & 7.5   &1   & Y       &5  &5  &5  &P5  &S6  &  accesses to potentially storage variables like \_isExcluded[sender] are done multiple times.  \\
\hline 
\hline 


%\todo{TO CONTINUE: below are templates}

Redundant storage reads for `game` in different functions        & 7.6   & 1  & Y       &5  &5  &5  &  &  & The game variable could be copied over to a local variable (only one storage read). This is something as direct copying of a single struct variable could still constitue the type 1 pattern  \\
Repeated computation of `\_gameStatus(game)`        & 7.6   &A5   & N       &5  &5  &5  &  &  & if the same expression (e.g. function call) is defined across multiple functions, then this does not mean that's repetitive, since functions could be called separately  \\
Unnecessary storage writes in `createGame` function        & 7.6   &A3   &N        &5  &5  &5  &P5  &S3  &   \\
\hline 
\hline 


Unnecessary Function Calls        & 7.7   & A5  & N       &5  &5  &5  &  &  &   \\
Repeated State Variable Accesses        & 7.7   &1   & Y       &5  &5  &5  &  &  &   \\
Unoptimized Loop        & 7.7   & A15  &  N      &3  &4  &3  &P5  &S3  &   \\
\hline 
\hline 



Repeated Invocation of External Contracts      & 7.8   &A4   &  N      &5  &4  &5  & P3 &S1,S7  &   \\
\hline 
\hline 



Redundant Condition Check     & 7.9   & A4  & N       &5  &5  &5  &P6  &S1,S8  &   \\
\hline 
\hline 


Unnecessary conditional checks for `revert` operations        & 7.10   & A3  &N        &5  &4  &5  &  &  &   \\
Repeated use of contract's state variables        & 7.10   & A4  & N       &5  &5  &5  &  &  &   \\
High complexity algorithms        & 7.10   &9   & Y       &4  &5  &4  &P7  & S9  &   In the `openLottery()` function, there's a nested loop for checking duplicate winning ticket IDs (`winTicketIdsTmp`), which is of high complexity (O(n^2)). For the duplicate check, a more gas-efficient way is to use a mapping to check whether a winning ticket ID has been picked before. This reduces the complexity from O(n^2) to O(n). \\
\hline 
\hline 




Excessive use of the `try-catch` syntax        & 8.1   &14   & Y       &4  &3  &2  &  &  &   many try-catches with "catch {}". This could of course be combined, but need to check if gas is actually saved.\\
Multiple calls to same function with same parameters        & 8.1   &A4   & N       &5  &5  &5  &P5  &S6  &   \\
\hline 
\hline 



Redundant External Calls        & 8.2   & A5  & N       &5  &5  &5  &  &  &   \\
Repeated Zero Address Validation Checks        & 8.2   &A8   & N       &4  &5  &4  &  &  &   \\
Use of Division Operation Inside a Loop        & 8.2   &A4   & N       &5  &5  &5  &  &  &   \\

Your prompt was clear and well-structured. However, it would be helpful if you include the complete contract code or at least provide all the dependencies. This could help in understanding the context better and identifying more potential gas-wasting patterns.

Regarding the reasoning process, I started by looking for the patterns mentioned in the list and then moved onto other common gas-wasting practices like redundant external calls, unnecessary calculations inside loops, and frequent storage operations.

Next time, I could improve by familiarizing myself more with the contract dependencies and the overall architecture of the contract system. This would help in identifying more complex and context-specific gas-wasting patterns.




Unnecessary use of the `unchecked` keyword        & 8.3   &15   &Y        &5  &5  &5  &  &  & The report says otherwise, but we could attribute that to a lack of up-to-date information. unchecked saves gas and this remains to be investigated  \\
Repeated computation of a constant expression        & 8.3   & 1  &Y        &5  &5  &5  &  &  & both  farms[fId].ranges[rangeId] and  farms[fId] are repeated  \\
Excessive computation in condition checks        & 8.3   & A5  &  N      &5  &5  &5  &  &  &   \\

Your prompt was clear and detailed, which was helpful for understanding your requirements. As for improvements in the reasoning process, a deeper understanding of the Solidity language and Ethereum gas mechanics would certainly help. And practice is also key; the more Solidity code you analyze, the better you'll become at identifying potential optimizations.

In terms of improvements to the output, it's important to clearly explain the reasoning behind each identified pattern and fix, as well as the potential impact on readability, security, and maintainability. This helps the reader understand why each change is beneficial and what trade-offs it may involve.


Repeated external function calls        & 8.4   &A3   & N       &5  &5  &4  &  &  &   \\

Your prompt was clear and comprehensive. The example list of gas-wasting patterns was useful in guiding the analysis. However, it would be helpful to know the context in which the contract operates, as some patterns might be more or less relevant depending on the specific use case.

In terms of my reasoning process, I started by going through the code line by line, keeping in mind the provided list of gas-wasting patterns. I found this approach to be effective, although it is important to note that some patterns might not be immediately visible at the function or contract level, and might require a deeper understanding of the overall system architecture and the interactions between different contracts.



Unnecessary re-computation of the same value in different functions        & 8.5   & A5  & N       &5  &4  &4  &  &  &   \\
Repeated map lookups        & 8.5   &1   & Y       &5  &5  &5  &  &  &   \\
Usage of `require` for input validation        & 8.5   &A3   & N       &5  &4  &4  &  &  &   \\

1. Your prompt was clear and informative. However, it would be helpful to understand the context in which this contract is used. For example, how frequently is `_etherPrice()` expected to change? How often are `liquidation` and `superLiquidation` called? This context could help identify more gas-wasting patterns.

2. My reasoning process involved scanning the code for repeated patterns and reflecting on the gas cost of various Solidity operations. To improve, I could use a more systematic approach, such as creating a checklist of common gas-wasting patterns to look for. I could also use automated tools to analyze the code for gas usage.




Repeated Calls to the Same Function (getConfiguration)        & 8.6   &A5   &  N      &5  &5  &5  &  &  &   \\
Unnecessary State Variables        & 8.6   &A6   & N       &5  &5  &5  &  &  &   \\

Regarding your second question about improving the prompt, it was well-structured and clear. However, it would be helpful if you could provide more context about the overall functionality of the contract and the purpose of each function. This additional information would allow for a more in-depth analysis of potential gas-wasting patterns.

In terms of my reasoning process, I used my knowledge of Solidity and the Ethereum virtual machine (EVM) to identify areas of the provided code that could potentially lead to higher gas costs. While I feel confident in the patterns I identified, it's possible that I missed some less obvious patterns due to the complexity of the contract. In the future, I could improve by delving deeper into the specific functionality of each function to better understand potential areas of inefficiency.



Use of Arrays Where Mapping Would Be More Efficient        & 8.7   &9   &  Y       &3  &5  &4  &  &  &   \\
Using `msg.sender` Repeatedly        & 8.7   &A4   &  N        &5  &5  &5  &  &  &   \\




Unnecessary function calls        & 8.8   &A4   &  N        &5  &5  &5  &  &  &   \\
Repeatedly accessing mapping values        & 8.8   &1   &  Y        &5  &5  &4  &  &  &   \\
Repeatedly checking the same condition        & 8.8   &A4   &  N       &5  &5  &5  &  &  &   \\
Checking conditions that will always be true        & 8.8   &A4   &  N        &5  &5  &5  &  &  &  "defined as `uint256` and can never be larger than `currentTotalStages`, which is also a `uint256`." \\


Repeated calls to external functions or contracts        & 8.9  &A4   &  N        &5  &5  &4  &  &  &   \\
Inefficient use of storage        & 8.9  &A17   &  N        &4  &3  &3  &  &  &   \\
Use of magic numbers        & 8.9  & A10  &  N      &5  &5  &5  &  &  &   \\


Multiple Storage Reads of Structs        & 8.10  &1   &  Y      &5  &5  &5  &  &  &   \\

























