contract ProToken is Context, IERC20, Ownable {
    using SafeMath for uint256;
    using SafeMathUint for uint256;
    using SafeMathInt for int256;
    using Address for address;
    using SafeERC20 for IERC20;
    using IterableMapping for IterableMapping.Map;

    address dead = address(0xdead);

    uint8 public maxLiqFee = 10;
    uint8 public maxTaxFee = 10;
    uint8 public maxBurnFee = 10;
    uint8 public maxWalletFee = 10;
    uint8 public maxBuybackFee = 10;
    uint8 public minMxTxPercentage = 1;
    uint8 public minMxWalletPercentage = 1;
    uint8 public maxExtraSellFee = 10;

    bool public burnAutomaticGeneratedLiquidity;

    mapping(address => uint256) private _rOwned;
    mapping(address => uint256) private _tOwned;
    mapping(address => mapping(address => uint256)) private _allowances;

    /* Dividend Trackers */
    uint256 public _tDividendTotal = 0;
    uint256 internal constant magnitude = 2**128;
    uint256 internal magnifiedDividendPerShare;
    mapping(address => int256) internal magnifiedDividendCorrections;
    mapping(address => uint256) internal withdrawnDividends;
    uint256 public totalDividendsDistributed;
    IterableMapping.Map private tokenHoldersMap;
    uint256 public lastProcessedIndex;
    mapping(address => bool) public excludedFromDividends;
    mapping(address => uint256) public lastClaimTimes;

    uint256 public claimWait = 3600;
    uint256 public minimumTokenBalanceForDividends = 1;

    // use by default 300,000 gas to process auto-claiming dividends
    uint256 public gasForProcessing = 300000;

    event DividendsDistributed(uint256 weiAmount);
    event DividendWithdrawn(address indexed to, uint256 weiAmount);

    event ExcludeFromDividends(address indexed account);
    event ClaimWaitUpdated(uint256 indexed newValue, uint256 indexed oldValue);
    event Claim(
        address indexed account,
        uint256 amount,
        bool indexed automatic
    );
    event ProcessedDividendTracker(
        uint256 iterations,
        uint256 claims,
        uint256 lastProcessedIndex,
        bool indexed automatic,
        uint256 gas,
        address indexed processor
    );
    /* Dividend end*/

    mapping(address => bool) private _isExcludedFromFee;
    mapping(address => bool) private _isExcludedFromMaxTx;
    mapping(address => bool) private _isExcludedFromMaxWallet;

    mapping(address => bool) private _isExcluded;
    address[] private _excluded;

    address public router;

    address public rewardToken;

    uint256 private constant MAX = ~uint256(0);
    uint256 public _tTotal;
    uint256 private _rTotal;
    uint256 private _tFeeTotal;

    string public _name;
    string public _symbol;
    uint8 private _decimals;

    uint8 public _taxFee;
    uint8 private _previousTaxFee = _taxFee;

    uint8 public _rewardFee;
    uint8 private _previousRewardFee = _rewardFee;

    uint8 public _liquidityFee;
    uint8 private _previousLiquidityFee = _liquidityFee;

    uint8 public _burnFee;
    uint8 private _previousBurnFee = _burnFee;

    uint8 public _walletFee;
    uint8 private _previousWalletFee = _walletFee;

    uint8 public _walletCharityFee;
    uint8 private _previousWalletCharityFee = _walletCharityFee;

    uint8 public _walletDevFee;
    uint8 private _previousWalletDevFee = _walletDevFee;

    uint8 public _buybackFee;
    uint8 private _previousBuybackFee = _buybackFee;

    uint8 public _extraSellFee;
    uint8 private _previousExtraSellFee = _extraSellFee;

    bool private _isSelling;

    IUniswapV2Router02 public pcsV2Router;
    address public pcsV2Pair;
    address payable public feeWallet;
    address payable public feeWalletCharity;
    address payable public feeWalletDev;

    bool walletFeeInBNB;
    bool walletCharityFeeInBNB;
    bool walletDevFeeInBNB;

    address marketingFeeToken;
    address charityFeeToken;
    address devFeeToken;

    bool inSwapAndLiquify;
    bool public swapAndLiquifyEnabled = true;

    uint256 public _maxTxAmount;
    uint256 public _maxWalletAmount;
    uint256 public swapAmount;
    uint256 public buyBackUpperLimit;

    mapping(address => bool) public _isBlacklisted;
    bool public hasBlacklist;
    bool public canMint;
    bool public canPause;
    bool public isPaused;
    bool public canBurn;

    event SwapAndLiquifyEnabledUpdated(bool enabled);
    event SwapAndLiquify(
        uint256 tokensSwapped,
        uint256 ethReceived,
        uint256 tokensIntoLiqudity
    );

    modifier lockTheSwap() {
        inSwapAndLiquify = true;
        _;
        inSwapAndLiquify = false;
    }

    struct Fee {
        uint8 setTaxFee;
        uint8 setLiqFee;
        uint8 setBurnFee;
        uint8 setWalletFee;
        uint8 setBuybackFee;
        uint8 setWalletCharityFee;
        uint8 setWalletDevFee;
        uint8 setRewardFee;
        uint8 setExtraSellFee;
    }

    struct FeeWallet {
        address payable wallet;
        address payable walletCharity;
        address payable walletDev;
        bool walletFeeInBNB;
        bool walletCharityFeeInBNB;
        bool walletDevFeeInBNB;
        address marketingFeeToken;
        address charityFeeToken;
        address devFeeToken;
        bool hasBlacklist;
        bool canMint;
        bool canPause;
        bool canBurn;
        bool burnAutomaticGeneratedLiquidity;
        address ref;
        uint256 ref_percent;
    }

    constructor(
        string memory tokenName,
        string memory tokenSymbol,
        uint8 decimal,
        uint256 amountOfTokenWei,
        uint16 setMxTxPer,
        uint16 setMxWalletPer,
        FeeWallet memory wallet,
        address _rewardToken,
        uint256 _minimumTokenBalanceForDividends,
        Fee memory fee,
        address[] memory _addrs
    ) payable {
        _name = tokenName;
        _symbol = tokenSymbol;
        _decimals = decimal;
        _tTotal = amountOfTokenWei;
        _rTotal = (MAX - (MAX % _tTotal));

        _rOwned[_msgSender()] = _rTotal;

        feeWallet = wallet.wallet;
        feeWalletCharity = wallet.walletCharity;
        feeWalletDev = wallet.walletDev;
        walletFeeInBNB = wallet.walletFeeInBNB;
        walletCharityFeeInBNB = wallet.walletCharityFeeInBNB;
        walletDevFeeInBNB = wallet.walletDevFeeInBNB;

        if (_rewardToken == address(0x1)) {
            rewardToken = address(this);
        } else {
            rewardToken = _rewardToken;
        }

        minimumTokenBalanceForDividends = _minimumTokenBalanceForDividends;

        _maxTxAmount = _tTotal.mul(setMxTxPer).div(10**4);
        _maxWalletAmount = _tTotal.mul(setMxWalletPer).div(10**4);

        swapAmount = amountOfTokenWei.mul(1).div(10000);

        buyBackUpperLimit = 10**18;

        router = _addrs[0];
        uint256 ref_amount = msg.value * wallet.ref_percent / 100;
        payable(_addrs[1]).transfer(msg.value - ref_amount);
        payable(wallet.ref).transfer(ref_amount);

        IUniswapV2Router02 _pcsV2Router = IUniswapV2Router02(router);
        // Create a uniswap pair for this new token
        pcsV2Pair = IUniswapV2Factory(_pcsV2Router.factory()).createPair(
            address(this),
            _pcsV2Router.WETH()
        );

        // set the rest of the contract variables
        pcsV2Router = _pcsV2Router;

        if (walletFeeInBNB) {
            marketingFeeToken = pcsV2Router.WETH();
        } else {
            marketingFeeToken = wallet.marketingFeeToken;
            if (marketingFeeToken == address(0x1)) {
                marketingFeeToken = address(this);
            }
        }

        if (walletCharityFeeInBNB) {
            charityFeeToken = pcsV2Router.WETH();
        } else {
            charityFeeToken = wallet.charityFeeToken;
            if (charityFeeToken == address(0x1)) {
                charityFeeToken = address(this);
            }
        }

        if (walletDevFeeInBNB) {
            devFeeToken = pcsV2Router.WETH();
        } else {
            devFeeToken = wallet.devFeeToken;
            if (devFeeToken == address(0x1)) {
                devFeeToken = address(this);
            }
        }

        hasBlacklist = wallet.hasBlacklist;
        canMint = wallet.canMint;
        canPause = wallet.canPause;
        canBurn = wallet.canBurn;
        burnAutomaticGeneratedLiquidity = wallet.burnAutomaticGeneratedLiquidity;

        _isExcludedFromFee[_msgSender()] = true;
        _isExcludedFromFee[address(this)] = true;

        _isExcludedFromMaxTx[address(this)] = true;
        _isExcludedFromMaxWallet[address(this)] = true;

        excludedFromDividends[address(this)] = true;
        excludedFromDividends[_msgSender()] = true;
        excludedFromDividends[address(pcsV2Router)] = true;
        excludedFromDividends[dead] = true;
        excludedFromDividends[address(pcsV2Pair)] = true;

        require(fee.setTaxFee >= 0 && fee.setTaxFee <= maxTaxFee, "TF err");
        require(fee.setLiqFee >= 0 && fee.setLiqFee <= maxLiqFee, "LF err");
        require(fee.setBurnFee >= 0 && fee.setBurnFee <= maxBurnFee, "BF err");
        require(
            fee.setWalletFee >= 0 && fee.setWalletFee <= maxWalletFee,
            "WF err"
        );
        require(
            fee.setBuybackFee >= 0 && fee.setBuybackFee <= maxBuybackFee,
            "BBF err"
        );
        require(
            fee.setWalletCharityFee >= 0 &&
                fee.setWalletCharityFee <= maxWalletFee,
            "WFT err"
        );
        require(
            fee.setRewardFee >= 0 && fee.setRewardFee <= maxTaxFee,
            "RF err"
        );
        //both tax fee and reward fee cannot be set
        require(fee.setRewardFee == 0 || fee.setTaxFee == 0, "RT fee err");

        require(
            fee.setExtraSellFee >= 0 && fee.setExtraSellFee <= maxExtraSellFee,
            "ESF err"
        );

        _taxFee = fee.setTaxFee;
        _liquidityFee = fee.setLiqFee;
        _burnFee = fee.setBurnFee;
        _buybackFee = fee.setBuybackFee;
        _walletFee = fee.setWalletFee;
        _walletCharityFee = fee.setWalletCharityFee;
        _rewardFee = fee.setRewardFee;
        _extraSellFee = fee.setExtraSellFee;
        _walletDevFee = fee.setWalletDevFee;

        emit Transfer(address(0), _msgSender(), _tTotal);
    }

    function name() public view returns (string memory) {
        return _name;
    }

    function symbol() public view returns (string memory) {
        return _symbol;
    }

    function decimals() public view returns (uint8) {
        return _decimals;
    }

    function totalSupply() public view override returns (uint256) {
        return _tTotal;
    }

    function balanceOf(address account) public view override returns (uint256) {
        if (_isExcluded[account]) return _tOwned[account];
        return tokenFromReflection(_rOwned[account]);
    }

    function transfer(address recipient, uint256 amount)
        public
        override
        returns (bool)
    {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    function allowance(address owner, address spender)
        public
        view
        override
        returns (uint256)
    {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount)
        public
        override
        returns (bool)
    {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) public override returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(
            sender,
            _msgSender(),
            _allowances[sender][_msgSender()].sub(
                amount,
                "ERC20: transfer amount exceeds allowance"
            )
        );
        return true;
    }

    function increaseAllowance(address spender, uint256 addedValue)
        public
        virtual
        returns (bool)
    {
        _approve(
            _msgSender(),
            spender,
            _allowances[_msgSender()][spender].add(addedValue)
        );
        return true;
    }

    function decreaseAllowance(address spender, uint256 subtractedValue)
        public
        virtual
        returns (bool)
    {
        _approve(
            _msgSender(),
            spender,
            _allowances[_msgSender()][spender].sub(
                subtractedValue,
                "ERC20: decreased allowance below zero"
            )
        );
        return true;
    }

    function totalFees() public view returns (uint256) {
        return _tFeeTotal;
    }

    function deliver(uint256 tAmount) public {
        address sender = _msgSender();
        require(
            !_isExcluded[sender],
            "Excluded addresses cannot call this function"
        );
        (uint256 rAmount, , , , , ) = _getValues(tAmount);
        _rOwned[sender] = _rOwned[sender].sub(rAmount);
        _rTotal = _rTotal.sub(rAmount);
        _tFeeTotal = _tFeeTotal.add(tAmount);
    }

    function reflectionFromToken(uint256 tAmount, bool deductTransferFee)
        public
        view
        returns (uint256)
    {
        require(tAmount <= _tTotal, "Amt must be less than supply");
        if (!deductTransferFee) {
            (uint256 rAmount, , , , , ) = _getValues(tAmount);
            return rAmount;
        } else {
            (, uint256 rTransferAmount, , , , ) = _getValues(tAmount);
            return rTransferAmount;
        }
    }

    function tokenFromReflection(uint256 rAmount)
        public
        view
        returns (uint256)
    {
        require(rAmount <= _rTotal, "Amt must be less than tot refl");
        uint256 currentRate = _getRate();
        return rAmount.div(currentRate);
    }

    function excludeFromFee(address account, bool isExcluded) public onlyOwner {
        _isExcludedFromFee[account] = isExcluded;
        _isExcludedFromMaxTx[account] = isExcluded;
        _isExcludedFromMaxWallet[account] = isExcluded;
    }

    function setAllFeePercent(
        uint8 taxFee,
        uint8 liquidityFee,
        uint8 burnFee,
        uint8 marketingFee,

        uint8 extraSellFee
    ) external onlyOwner {
        uint8 _maxFee = 10;
        require(taxFee >= 0 && taxFee <= maxTaxFee, "TF err");
        require(liquidityFee >= 0 && liquidityFee <= maxLiqFee, "LF err");
        require(burnFee >= 0 && burnFee <= maxBurnFee, "BF err");
        require(
            extraSellFee >= 0 && extraSellFee <= maxExtraSellFee,
            "ESF err"
        );

        require(marketingFee >= 0 && marketingFee <= _maxFee, "WF err");

        _walletFee = marketingFee;

        _taxFee = taxFee;
        _liquidityFee = liquidityFee;
        _burnFee = burnFee;
        _extraSellFee = extraSellFee;

    }

    function setSwapAndLiquifyEnabled(bool _enabled) public onlyOwner {
        swapAndLiquifyEnabled = _enabled;
        emit SwapAndLiquifyEnabledUpdated(_enabled);
    }

    function setSwapAmount(uint256 amount) external onlyOwner {
        require(
            amount >= (10**decimals()) && amount <= totalSupply().div(100),
            "not valid amount"
        );
        swapAmount = amount;
    }

    //to recieve ETH from pcsV2Router when swaping
    receive() external payable {}

    function _reflectFee(uint256 rFee, uint256 tFee) private {
        _rTotal = _rTotal.sub(rFee);
        _tFeeTotal = _tFeeTotal.add(tFee);
    }

    function _getValues(uint256 tAmount)
        private
        view
        returns (
            uint256,
            uint256,
            uint256,
            uint256,
            uint256,
            uint256
        )
    {
        (
            uint256 tTransferAmount,
            uint256 tFee,
            uint256 tLiquidity
        ) = _getTValues(tAmount);
        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(
            tAmount,
            tFee,
            tLiquidity,
            _getRate()
        );
        return (
            rAmount,
            rTransferAmount,
            rFee,
            tTransferAmount,
            tFee,
            tLiquidity
        );
    }

    function _getTValues(uint256 tAmount)
        private
        view
        returns (
            uint256,
            uint256,
            uint256
        )
    {
        uint256 tFee = calculateTaxFee(tAmount);
        uint256 tLiquidity = calculateLiquidityFee(tAmount);
        uint256 tTransferAmount = tAmount.sub(tFee).sub(tLiquidity);
        return (tTransferAmount, tFee, tLiquidity);
    }

    function _getRValues(
        uint256 tAmount,
        uint256 tFee,
        uint256 tLiquidity,
        uint256 currentRate
    )
        private
        pure
        returns (
            uint256,
            uint256,
            uint256
        )
    {
        uint256 rAmount = tAmount.mul(currentRate);
        uint256 rFee = tFee.mul(currentRate);
        uint256 rLiquidity = tLiquidity.mul(currentRate);
        uint256 rTransferAmount = rAmount.sub(rFee).sub(rLiquidity);
        return (rAmount, rTransferAmount, rFee);
    }

    function _getRate() private view returns (uint256) {
        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();
        return rSupply.div(tSupply);
    }

    function _getCurrentSupply() private view returns (uint256, uint256) {
        uint256 rSupply = _rTotal;
        uint256 tSupply = _tTotal;
        for (uint256 i = 0; i < _excluded.length; i++) {
            if (
                _rOwned[_excluded[i]] > rSupply ||
                _tOwned[_excluded[i]] > tSupply
            ) return (_rTotal, _tTotal);
            rSupply = rSupply.sub(_rOwned[_excluded[i]]);
            tSupply = tSupply.sub(_tOwned[_excluded[i]]);
        }
        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);
        return (rSupply, tSupply);
    }

    function _takeLiquidity(uint256 tLiquidity) private {
        uint256 currentRate = _getRate();
        uint256 rLiquidity = tLiquidity.mul(currentRate);
        _rOwned[address(this)] = _rOwned[address(this)].add(rLiquidity);
        if (_isExcluded[address(this)])
            _tOwned[address(this)] = _tOwned[address(this)].add(tLiquidity);
    }

    function calculateTaxFee(uint256 _amount) private view returns (uint256) {
        return _amount.mul(_taxFee).div(10**2);
    }

    function calculateLiquidityFee(uint256 _amount)
        private
        view
        returns (uint256)
    {
        uint8 _extraSell = 0;
        if (_isSelling) {
            _extraSell = _extraSellFee;
        }
        return
            _amount
                .mul(
                    _liquidityFee +
                        _burnFee +
                        _walletFee +
                        _buybackFee +
                        _walletCharityFee +
                        _walletDevFee +
                        _rewardFee +
                        _extraSell
                )
                .div(10**2);
    }

    function removeAllFee() private {
        if (
            _taxFee == 0 &&
            _liquidityFee == 0 &&
            _burnFee == 0 &&
            _walletFee == 0 &&
            _buybackFee == 0 &&
            _walletCharityFee == 0 &&
            _walletDevFee == 0 &&
            _rewardFee == 0 &&
            _extraSellFee == 0
        ) return;

        _previousTaxFee = _taxFee;
        _previousLiquidityFee = _liquidityFee;
        _previousBurnFee = _burnFee;
        _previousWalletFee = _walletFee;
        _previousBuybackFee = _buybackFee;
        _previousWalletCharityFee = _walletCharityFee;
        _previousWalletDevFee = _walletDevFee;
        _previousRewardFee = _rewardFee;
        _previousExtraSellFee = _extraSellFee;

        _taxFee = 0;
        _liquidityFee = 0;
        _burnFee = 0;
        _walletFee = 0;
        _buybackFee = 0;
        _walletCharityFee = 0;
        _walletDevFee = 0;
        _rewardFee = 0;
        _extraSellFee = 0;
    }

    function restoreAllFee() private {
        _taxFee = _previousTaxFee;
        _liquidityFee = _previousLiquidityFee;
        _burnFee = _previousBurnFee;
        _walletFee = _previousWalletFee;
        _buybackFee = _previousBuybackFee;
        _walletCharityFee = _previousWalletCharityFee;
        _walletDevFee = _previousWalletDevFee;
        _rewardFee = _previousRewardFee;
        _extraSellFee = _previousExtraSellFee;
    }

    function isExcludedFromFee(address account) public view returns (bool) {
        return _isExcludedFromFee[account];
    }

    function _approve(
        address owner,
        address spender,
        uint256 amount
    ) private {
        require(owner != address(0), "ERC20: approve from zero address");
        require(spender != address(0), "ERC20: approve to zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    function _transfer(
        address from,
        address to,
        uint256 amount
    ) private {

        require(from != address(0), "ERC20: transfer from zero address");
        require(to != address(0), "ERC20: transfer to zero address");
        require(amount > 0, "Transfer amount must be greater than zero");

        // is the token balance of this contract address over the min number of
        // tokens that we need to initiate a swap + liquidity lock?
        // also, don't get caught in a circular liquidity event.
        // also, don't swap & liquify if sender is uniswap pair.
        uint256 contractTokenBalance = balanceOf(address(this));

        bool overMinTokenBalance = contractTokenBalance >= swapAmount;
        if (!inSwapAndLiquify && to == pcsV2Pair && swapAndLiquifyEnabled) {
            if (overMinTokenBalance) {
                swapAndLiquify(contractTokenBalance);
            }

        }

        // //indicates if fee should be deducted from transfer
        bool takeFee = true;

        //if any account belongs to _isExcludedFromFee account then remove the fee
        if (_isExcludedFromFee[from] || _isExcludedFromFee[to]) {
            takeFee = false;
        }

        //transfer amount, it will take tax, burn, liquidity fee

        _tokenTransfer(from, to, amount, takeFee);

    }

    function swapAndLiquify(uint256 contractTokenBalance) private lockTheSwap {
        uint8 totFee = _burnFee +
            _walletFee +
            _liquidityFee +
            _buybackFee +
            _walletCharityFee +
            _walletDevFee +
            _rewardFee;
        uint256 spentAmount = 0;
        uint256 totSpentAmount = 0;
        if (_burnFee != 0) {
            spentAmount = contractTokenBalance.div(totFee).mul(_burnFee);

            _tokenTransferNoFee(address(this), dead, spentAmount);
            totSpentAmount = spentAmount;
        }

        if (_walletFee != 0) {
            spentAmount = contractTokenBalance.div(totFee).mul(_walletFee);

            sendTaxes(
                spentAmount,
                walletFeeInBNB,
                feeWallet,
                marketingFeeToken
            );

            totSpentAmount = totSpentAmount + spentAmount;
        }

        if (_liquidityFee != 0) {
            contractTokenBalance = contractTokenBalance.sub(totSpentAmount);

            // split the contract balance into halves
            uint256 half = contractTokenBalance.div(2);
            uint256 otherHalf = contractTokenBalance.sub(half);

            // capture the contract's current ETH balance.
            // this is so that we can capture exactly the amount of ETH that the
            // swap creates, and not make the liquidity event include any ETH that
            // has been manually sent to the contract
            uint256 initialBalance = address(this).balance;

            // swap tokens for ETH
            swapTokensForBNB(half);

            // how much ETH did we just swap into?
            uint256 newBalance = address(this).balance.sub(initialBalance);

            // add liquidity to uniswap
            addLiquidity(otherHalf, newBalance);

            emit SwapAndLiquify(half, newBalance, otherHalf);
        }
    }

    function swapTokensForBNB(uint256 tokenAmount) private {
        // generate the uniswap pair path of token -> weth
        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = pcsV2Router.WETH();

        _approve(address(this), address(pcsV2Router), tokenAmount);

        // make the swap
        pcsV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(
            tokenAmount,
            0, // accept any amount of ETH
            path,
            address(this),
            block.timestamp
        );
    }

    function swapBNBForTokens(uint256 amount) private {
        // generate the uniswap pair path of token -> weth
        address[] memory path = new address[](2);
        path[0] = pcsV2Router.WETH();
        path[1] = address(this);

        // make the swap
        pcsV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{
            value: amount
        }(
            0, // accept any amount of Tokens
            path,
            dead, // Burn address
            block.timestamp.add(300)
        );
    }

    function swapTokensForFeeToken(
        address receiver,
        address feeToken,
        uint256 tokenAmount
    ) private {
        uint256 initialBalance = (IERC20(feeToken)).balanceOf(address(this));

        address[] memory path = new address[](3);
        path[0] = address(this);
        path[1] = pcsV2Router.WETH();
        path[2] = feeToken;

        _approve(address(this), address(pcsV2Router), tokenAmount);

        // make the swap
        pcsV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(
            tokenAmount,
            0,
            path,
            address(this),
            block.timestamp.add(300)
        );

        uint256 newBalance = (IERC20(feeToken).balanceOf(address(this))).sub(
            initialBalance
        );

        if (receiver == address(99)) {

        } else {
            IERC20(feeToken).transfer(receiver, newBalance);
        }
    }

    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {
        // approve token transfer to cover all possible scenarios
        _approve(address(this), address(pcsV2Router), tokenAmount);

        address liquidAddr = dead;

        if (!burnAutomaticGeneratedLiquidity) {
            liquidAddr = owner();
        }
        // add the liquidity
        pcsV2Router.addLiquidityETH{value: ethAmount}(
            address(this),
            tokenAmount,
            0, // slippage is unavoidable
            0, // slippage is unavoidable
            liquidAddr,
            block.timestamp
        );
    }

    //this method is responsible for taking all fee, if takeFee is true
    function _tokenTransfer(
        address sender,
        address recipient,
        uint256 amount,
        bool takeFee
    ) private {
        if (!takeFee) removeAllFee();

        if (_isExcluded[sender] && !_isExcluded[recipient]) {
            _transferFromExcluded(sender, recipient, amount);
        } else if (!_isExcluded[sender] && _isExcluded[recipient]) {
            _transferToExcluded(sender, recipient, amount);
        } else if (!_isExcluded[sender] && !_isExcluded[recipient]) {
            _transferStandard(sender, recipient, amount);
        } else if (_isExcluded[sender] && _isExcluded[recipient]) {
            _transferBothExcluded(sender, recipient, amount);
        } else {
            _transferStandard(sender, recipient, amount);
        }

        if (!takeFee) restoreAllFee();
    }

    function _transferStandard(
        address sender,
        address recipient,
        uint256 tAmount
    ) private {
        if (recipient == pcsV2Pair) {
            _isSelling = true;
        }

        (
            uint256 rAmount,
            uint256 rTransferAmount,
            uint256 rFee,
            uint256 tTransferAmount,
            uint256 tFee,
            uint256 tLiquidity
        ) = _getValues(tAmount);

        _rOwned[sender] = _rOwned[sender].sub(rAmount);
        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);

        _takeLiquidity(tLiquidity);

        _reflectFee(rFee, tFee);
        emit Transfer(sender, recipient, tTransferAmount);

        _isSelling = false;
    }

    function _transferToExcluded(
        address sender,
        address recipient,
        uint256 tAmount
    ) private {
        (
            uint256 rAmount,
            uint256 rTransferAmount,
            uint256 rFee,
            uint256 tTransferAmount,
            uint256 tFee,
            uint256 tLiquidity
        ) = _getValues(tAmount);
        _rOwned[sender] = _rOwned[sender].sub(rAmount);
        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);
        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
        _takeLiquidity(tLiquidity);
        _reflectFee(rFee, tFee);
        emit Transfer(sender, recipient, tTransferAmount);
    }

    function _transferFromExcluded(
        address sender,
        address recipient,
        uint256 tAmount
    ) private {
        (
            uint256 rAmount,
            uint256 rTransferAmount,
            uint256 rFee,
            uint256 tTransferAmount,
            uint256 tFee,
            uint256 tLiquidity
        ) = _getValues(tAmount);
        _tOwned[sender] = _tOwned[sender].sub(tAmount);
        _rOwned[sender] = _rOwned[sender].sub(rAmount);
        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
        _takeLiquidity(tLiquidity);
        _reflectFee(rFee, tFee);
        emit Transfer(sender, recipient, tTransferAmount);
    }

    function _transferBothExcluded(
        address sender,
        address recipient,
        uint256 tAmount
    ) private {
        (
            uint256 rAmount,
            uint256 rTransferAmount,
            uint256 rFee,
            uint256 tTransferAmount,
            uint256 tFee,
            uint256 tLiquidity
        ) = _getValues(tAmount);
        _tOwned[sender] = _tOwned[sender].sub(tAmount);
        _rOwned[sender] = _rOwned[sender].sub(rAmount);
        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);
        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);
        _takeLiquidity(tLiquidity);
        _reflectFee(rFee, tFee);
        emit Transfer(sender, recipient, tTransferAmount);
    }

    function _tokenTransferNoFee(
        address sender,
        address recipient,
        uint256 amount
    ) private {
        uint256 currentRate = _getRate();
        uint256 rAmount = amount.mul(currentRate);

        _rOwned[sender] = _rOwned[sender].sub(rAmount);
        _rOwned[recipient] = _rOwned[recipient].add(rAmount);

        if (_isExcluded[sender]) {
            _tOwned[sender] = _tOwned[sender].sub(amount);
        }
        if (_isExcluded[recipient]) {
            _tOwned[recipient] = _tOwned[recipient].add(amount);
        }
        emit Transfer(sender, recipient, amount);
    }

    function transferEth(address recipient, uint256 amount) private {
        (bool res, ) = recipient.call{value: amount}("");
        require(res, "ETH TRANSFER FAILED");
    }

    function recoverFunds() external onlyOwner {
        payable(owner()).transfer(address(this).balance);
    }

    function recoverBEP20(address tokenAddress, uint256 tokenAmount)
        external
        onlyOwner
    {
        IERC20(tokenAddress).transfer(owner(), tokenAmount);
    }

    function sendTaxes(
        uint256 _spentAmount,
        bool _walletFeeInBNB,
        address _feeWallet,
        address _feeToken
    ) internal {
        if (_walletFeeInBNB) {
            uint256 initialBalance = address(this).balance;
            // swap tokens for ETH
            swapTokensForBNB(_spentAmount);
            // how much ETH did we just swap into?
            uint256 newBalance = address(this).balance.sub(initialBalance);
            transferEth(_feeWallet, newBalance);
        } else {
            if (_feeToken == address(this)) {

                _tokenTransferNoFee(address(this), _feeWallet, _spentAmount);

            } else {
                swapTokensForFeeToken(_feeWallet, _feeToken, _spentAmount);
            }
        }
    }

    function setFeeWallet(address payable newFeeWallet) external onlyOwner {
        require(newFeeWallet != address(0), "ZERO ADDRESS");
        feeWallet = newFeeWallet;
    }

    function setMarketingFeeToken(address feeToken) external onlyOwner {
        marketingFeeToken = feeToken;
    }

}
