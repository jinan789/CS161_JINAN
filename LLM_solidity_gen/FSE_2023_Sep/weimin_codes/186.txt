contract TokenUniswap2 is ERC20, Ownable {
    using SafeMath for uint256;

    struct InitParams {
        string name;
        string symbol;
        uint256 totalSupply;
        uint256 maxTradingAmount;
        uint256 maxWalletAmount;
        uint256 swapTokensAtAmount;
        uint256 buyTotalFees;
        uint256 sellTotalFees;
        uint256 burnFee;
        uint256 liquidityFee;
        uint256 devFee;
        uint256 revshareFee;
        address revshareWallet;
    }

    SwapV2Router public immutable swapV2Router;
    //ITurnstile public immutable turnstile;
    address public immutable swapV2Pair;
    address public constant DEAD = address(0xdead);

    bool private swapping;

    address public revShareWallet;
    address public devWallet;

    uint256 public maxTradingAmount;
    uint256 public swapTokensAtAmount;
    uint256 public maxWalletAmount;

    bool public limitsInEffect = true;
    bool public tradingActive = false;
    bool public swapEnabled = false;

    uint256 constant PERCENTAGE_BASE = 10000; //
    uint256 constant GEN_FEE = 30; // fee for GEN Bot: 0.3%
    address constant GEN_WALLET = 0x91FEad7F2B2172e75FfCf4cAdFF5049c9270EE41;

    uint256 public buyTotalFees; // buy fee
    uint256 public sellTotalFees; // sell fee

    // Tax distribution
    uint256 public burnFee;
    uint256 public liquidityFee;
    uint256 public devFee;
    uint256 public revshareFee;
    uint256 public totalFees;

    uint256 public tokensForGen;
    uint256 public tokensForBurn;
    uint256 public tokensForLiquidity;
    uint256 public tokensForDev;
    uint256 public tokensForRevshare;
    uint256 public totalTaxTokens;
    /******************/

    // exclude from fees and max transaction amount
    mapping(address => bool) private _isExcludedFromFees;
    mapping(address => bool) public _isExcludedMaxTradingAmount;

    // store addresses that a automatic market maker pairs. Any transfer *to* these addresses
    // could be subject to a maximum transfer amount
    mapping(address => bool) public automatedMarketMakerPairs;

    // Trading start at
    uint256 block0;
    uint256 constant NO_SMC_TRADE_BLOCKS = 3;

    event ExcludeFromFees(address indexed account, bool isExcluded);

    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);

    event revShareWalletUpdated(
        address indexed newWallet,
        address indexed oldWallet
    );

    event SwapAndLiquify(
        uint256 tokensSwapped,
        uint256 ethReceived,
        uint256 tokensIntoLiquidity
    );

    constructor(
        address routerAddress,
        InitParams memory params
    ) ERC20(params.name, params.symbol) {
        // amm swap init
        SwapV2Router router = SwapV2Router(routerAddress);
        SwapV2Factory factory = SwapV2Factory(router.factory());
        swapV2Router = router;
        // create pair This:ETH
        swapV2Pair = factory.createPair(address(this), router.WETH());
        excludeFromMaxTrading(address(swapV2Pair), true);
        _setAutomatedMarketMakerPair(address(swapV2Pair), true);

        // Token parameters
        uint256 totalSupply = params.totalSupply * 1e18;
        swapTokensAtAmount =
            (totalSupply * params.swapTokensAtAmount) /
            PERCENTAGE_BASE; // 0.05%

        maxTradingAmount =
            (totalSupply * params.maxTradingAmount) /
            PERCENTAGE_BASE; // 0.1%
        maxWalletAmount =
            (totalSupply * params.maxWalletAmount) /
            PERCENTAGE_BASE; // 1%

        // Fee distribute: burn: 1, dev: 4
        updateTaxSplit(
            params.burnFee,
            params.liquidityFee,
            params.devFee,
            params.revshareFee,
            params.revshareWallet
        );

        // 5% fee for buy/sell
        updateFees(params.buyTotalFees, params.sellTotalFees);

        devWallet = msg.sender;

        // exclude from paying fees or having max transaction amount
        excludeFromFees(owner(), true);
        excludeFromFees(address(this), true);
        excludeFromFees(address(0xdead), true);

        excludeFromMaxTrading(owner(), true);
        excludeFromMaxTrading(address(this), true);
        excludeFromMaxTrading(address(0xdead), true);

        /*
            _mint is an internal function in ERC20.sol that is only called here,
            and CANNOT be called ever again
        */
        _mint(msg.sender, totalSupply);
    }

    receive() external payable {}

    // remove limits after token is stable
    function removeLimits() external onlyOwner returns (bool) {
        limitsInEffect = false;
        return true;
    }

    // change the minimum amount of tokens to sell from fees
    function updateSwapTokensAtAmount(
        uint256 newAmount
    ) external onlyOwner returns (bool) {
        require(
            newAmount >= (totalSupply() * 1) / 100000,
            "Swap amount cannot be lower than 0.001% total supply."
        );
        require(
            newAmount <= (totalSupply() * 5) / 1000,
            "Swap amount cannot be higher than 0.5% total supply."
        );
        swapTokensAtAmount = newAmount;
        return true;
    }

    function updateMaxTradingAmount(uint256 newNum) external onlyOwner {
        require(
            newNum >= ((totalSupply() * 1) / 1000) / 1e18,
            "Cannot set maxTradingAmount lower than 0.1%"
        );
        maxTradingAmount = newNum * (10 ** 18);
    }

    function updateMaxWalletAmountAmount(uint256 newNum) external onlyOwner {
        require(
            newNum >= ((totalSupply() * 10) / 1000) / 1e18,
            "Cannot set maxWalletAmount lower than 1.0%"
        );
        maxWalletAmount = newNum * (10 ** 18);
    }

    function excludeFromMaxTrading(address updAds, bool isEx) public onlyOwner {
        _isExcludedMaxTradingAmount[updAds] = isEx;
    }

    // only use to disable contract sales if absolutely necessary (emergency use only)
    function updateSwapEnabled(bool enabled) external onlyOwner {
        swapEnabled = enabled;
    }

    function updateFees(
        uint256 buyTotalFees_,
        uint256 sellTotalFees_
    ) public onlyOwner {
        require(
            buyTotalFees_ <= 500 && sellTotalFees_ <= 500,
            "Buy/sell fees must be <= 5%"
        );
        buyTotalFees = buyTotalFees_;
        sellTotalFees = sellTotalFees_;

        if (buyTotalFees < GEN_FEE) buyTotalFees += GEN_FEE;
        if (sellTotalFees < GEN_FEE) sellTotalFees += GEN_FEE;
    }

    // contract setting
    function updateTaxSplit(
        uint256 burnFee_,
        uint256 liquidityFee_,
        uint256 devFee_,
        uint256 revshareFee_,
        address revShareWallet_
    ) public onlyOwner {
        // tax distribution
        if (revshareFee_ > 0)
            require(
                revShareWallet_ != address(0),
                "Revshare Wallet is required!"
            );
        burnFee = burnFee_;
        liquidityFee = liquidityFee_;
        devFee = devFee_;
        revshareFee = revshareFee_;

        totalFees = burnFee + liquidityFee + devFee + revshareFee;

        // update revshare wallet
        revShareWallet = revShareWallet_;
    }

    function excludeFromFees(address account, bool excluded) public onlyOwner {
        _isExcludedFromFees[account] = excluded;
        emit ExcludeFromFees(account, excluded);
    }

    function setAutomatedMarketMakerPair(
        address pair,
        bool value
    ) public onlyOwner {
        require(
            pair != swapV2Pair,
            "The pair cannot be removed from automatedMarketMakerPairs"
        );

        _setAutomatedMarketMakerPair(pair, value);
    }

    function _setAutomatedMarketMakerPair(address pair, bool value) private {
        automatedMarketMakerPairs[pair] = value;

        emit SetAutomatedMarketMakerPair(pair, value);
    }

    function updateRevShareWallet(
        address newRevShareWallet
    ) external onlyOwner {
        emit revShareWalletUpdated(newRevShareWallet, revShareWallet);
        revShareWallet = newRevShareWallet;
    }

    function updateDevWallet(address newWallet) external onlyOwner {
        devWallet = newWallet;
    }

    function isExcludedFromFees(address account) public view returns (bool) {
        return _isExcludedFromFees[account];
    }

    function _transfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual override {
        require(from != address(0), "ERC20: transfer from the zero address");
        require(to != address(0), "ERC20: transfer to the zero address");

        if (amount == 0) {
            super._transfer(from, to, 0);
            return;
        }

        if (limitsInEffect) {
            if (
                from != owner() &&
                to != owner() &&
                to != address(0) &&
                to != address(0xdead) &&
                !swapping
            ) {
                if (!tradingActive) {
                    require(
                        _isExcludedFromFees[from] || _isExcludedFromFees[to],
                        "Trading is not active."
                    );
                }

                if (
                    automatedMarketMakerPairs[from] &&
                    !_isExcludedMaxTradingAmount[to]
                ) {
                    //when buy
                    require(
                        amount <= maxTradingAmount,
                        "Buy transfer amount exceeds the maxTradingAmount."
                    );
                    require(
                        amount + balanceOf(to) <= maxWalletAmount,
                        "Max wallet exceeded"
                    );

                    if (block0 + NO_SMC_TRADE_BLOCKS > block.number) {
                        require(!isContract(to));
                    }
                } else if (
                    automatedMarketMakerPairs[to] &&
                    !_isExcludedMaxTradingAmount[from]
                ) {
                    //when sell
                    require(
                        amount <= maxTradingAmount,
                        "Sell transfer amount exceeds the maxTradingAmount."
                    );
                } else if (!_isExcludedMaxTradingAmount[to]) {
                    //when transfer
                    require(
                        amount + balanceOf(to) <= maxWalletAmount,
                        "Max wallet exceeded"
                    );
                }
            }
        }

        // uint256 contractTokenBalance = balanceOf(address(this));

        bool canSwap = totalTaxTokens >= swapTokensAtAmount;

        if (
            canSwap &&
            swapEnabled &&
            !swapping &&
            !automatedMarketMakerPairs[from] &&
            !_isExcludedFromFees[from] &&
            !_isExcludedFromFees[to]
        ) {
            swapping = true;

            swapBack();
            // after swap back, reset tracking tax tokens
            totalTaxTokens = 0;

            swapping = false;
        }

        // only take free for trading
        bool takeFee = !swapping &&
            (automatedMarketMakerPairs[to] || automatedMarketMakerPairs[from]);

        // if any account belongs to _isExcludedFromFee account then remove the fee
        if (_isExcludedFromFees[from] || _isExcludedFromFees[to]) {
            takeFee = false;
        }

        uint256 fees = 0;
        // only take fees on buys/sells, do not take on wallet transfers
        if (takeFee) {
            // on sell
            if (automatedMarketMakerPairs[to] && sellTotalFees > 0) {
                fees = amount.mul(sellTotalFees).div(PERCENTAGE_BASE);
            }
            // on buy
            else if (automatedMarketMakerPairs[from] && buyTotalFees > 0) {
                fees = amount.mul(buyTotalFees).div(PERCENTAGE_BASE);
            }
            // token distribution
            uint256 tokensForGen_ = amount.mul(GEN_FEE).div(PERCENTAGE_BASE);
            if (fees > 0) {
                super._transfer(from, address(this), fees);
            }

            uint256 tokensForFees = fees.sub(tokensForGen_);
            tokensForGen += tokensForGen_;
            if (totalFees > 0) {
                tokensForBurn += tokensForFees.mul(burnFee).div(totalFees);
                tokensForDev += tokensForFees.mul(devFee).div(totalFees);
                tokensForLiquidity += tokensForFees.mul(liquidityFee).div(
                    totalFees
                );
                tokensForRevshare += tokensForFees.mul(revshareFee).div(
                    totalFees
                );
            }

            amount -= fees;
            totalTaxTokens += fees;
        }

        super._transfer(from, to, amount);
    }

    function swapTokensForEth(uint256 tokenAmount) internal {
        // generate the uniswap pair path of token -> weth
        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = swapV2Router.WETH();

        _approve(address(this), address(swapV2Router), tokenAmount);

        // make the swap
        swapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(
            tokenAmount,
            0, // accept any amount of ETH
            path,
            address(this),
            block.timestamp
        );
    }

    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) internal {
        // approve token transfer to cover all possible scenarios
        _approve(address(this), address(swapV2Router), tokenAmount);

        // add the liquidity
        swapV2Router.addLiquidityETH{value: ethAmount}(
            address(this),
            tokenAmount,
            0, // slippage is unavoidable
            0, // slippage is unavoidable
            owner(),
            block.timestamp
        );
    }

    function openTrading() external onlyOwner {
        require(!tradingActive, "Trading is already open");
        addLiquidity(balanceOf(address(this)), address(this).balance);

        // enable trading
        tradingActive = true;
        swapEnabled = true;
        // block zero
        block0 = block.number;
    }

    function swapBack() internal virtual {
        uint256 contractBalance = balanceOf(address(this));
        if (contractBalance > swapTokensAtAmount * 20) {
            contractBalance = swapTokensAtAmount * 20;
        }
        if (contractBalance == 0) return;

        if (tokensForGen > contractBalance) tokensForGen = contractBalance;

        uint256 tokensForAddLiquidity = tokensForLiquidity.div(2);
        // uint256 totalTokensToSwap = tokensForGen
        //     .add(tokensForDev)
        //     .add(tokensForRevshare)
        //     .add(tokensForAddLiquidity);
        // swap all token except for Tokens to Add Liquidity and Burnt
        uint256 totalTokensToSwap = contractBalance.sub(
            tokensForAddLiquidity + tokensForBurn
        );

        if (tokensForBurn > 0) {
            // transfer to dead
            super._transfer(address(this), DEAD, tokensForBurn);
        }

        if (totalTokensToSwap > 0) {
            uint256 initEthBalance = address(this).balance;
            swapTokensForEth(totalTokensToSwap);
            uint256 ethBalance = address(this).balance.sub(initEthBalance);

            uint256 ethForGen = ethBalance.mul(tokensForGen).div(
                totalTokensToSwap
            );
            uint256 ethForDev = ethBalance.mul(tokensForDev).div(
                totalTokensToSwap
            );
            uint256 ethForRevshare = ethBalance.mul(tokensForRevshare).div(
                totalTokensToSwap
            );
            uint256 ethForAddLiquidity = ethBalance
                .sub(ethForGen)
                .sub(ethForDev)
                .sub(ethForRevshare);

            // send eth to benificiers
            bool success;
            if (ethForGen > 0) {
                (success, ) = address(GEN_WALLET).call{value: ethForGen}("");
            }
            if (ethForDev > 0) {
                (success, ) = address(devWallet).call{value: ethForDev}("");
            }
            if (ethForRevshare > 0) {
                (success, ) = address(revShareWallet).call{
                    value: ethForRevshare
                }("");
            }
            if (tokensForAddLiquidity > 0 && ethForAddLiquidity > 0) {
                addLiquidity(tokensForAddLiquidity, ethForAddLiquidity);
            }
        }
        // reset token for GEN
        tokensForGen = 0;
        tokensForDev = 0;
        tokensForRevshare = 0;
        tokensForLiquidity = 0;
    }

    function withdrawStuckToken(
        address _token,
        address _to
    ) external onlyOwner {
        require(_token != address(0), "_token address cannot be 0");
        uint256 _contractBalance = IERC20(_token).balanceOf(address(this));
        IERC20(_token).transfer(_to, _contractBalance);
    }

    function withdrawStuckEth(address toAddr) external onlyOwner {
        (bool success, ) = toAddr.call{value: address(this).balance}("");
        require(success);
    }

    /************************************************************************/
    function isContract(address account) private view returns (bool) {
        uint256 size;
        assembly {
            size := extcodesize(account)
        }
        return size > 0;
    }
}
