contract OpenStudioNFTV1 is
    Context,
	AccessControl,
	ERC721Enumerable,
	ERC721Pausable
{
    using Address for address;
    using Strings for uint256;
    using Counters for Counters.Counter;

	event Mint(address to, uint256 tokenId, uint256 sessionId);
    event Burn(address from, uint256 tokenId, uint256 sessionId);

	bytes32 public constant MINTER_ROLE = keccak256("MINTER_ROLE");

    Counters.Counter private _idTracker;

    string private _name;

    string private _symbol;

    string private __baseURI;

    // Mapping owner address to token count
    mapping(address => uint256) private _balances;

    // Mapping from token ID to approved address
    mapping(uint256 => address) private _tokenApprovals;

    // mappings for arweave tx hashes
    mapping(uint256 => string) _arweaveTxHashes;
    mapping(string => uint256) _tokenIds;

	// mapping for sessions
	mapping(uint256 => uint256) _tokenSessions;

    // Mapping from owner to operator approvals
    mapping(address => mapping(address => bool)) private _operatorApprovals;

    /// @custom:oz-upgrades-unsafe-allow constructor
    constructor(
        string memory name_,
        string memory symbol_,
        string memory baseURI_
    ) ERC721(name_, symbol_)  {
        _name = name_;
        _symbol = symbol_;
        __baseURI = baseURI_;

		_setupRole(DEFAULT_ADMIN_ROLE, _msgSender());
        _setupRole(DEFAULT_ADMIN_ROLE, tx.origin);

        _setupRole(MINTER_ROLE, _msgSender());
        _setupRole(MINTER_ROLE, tx.origin);

        // zero id for tokens is wierd
        _idTracker.increment();

        pause();
    }

    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(bytes4 interfaceId)
        public
        view
        virtual
        override(AccessControl, ERC721, ERC721Enumerable)
        returns (bool)
    {
        return
            interfaceId == type(ERC165).interfaceId ||
            interfaceId == type(IERC721Metadata).interfaceId ||
            super.supportsInterface(interfaceId);
    }


    /**
     * @dev Creates a new token for `to`. Its token ID will be automatically
     * assigned (and available on the emitted {IERC721-Transfer} event), and the token
     * URI autogenerated based on the base URI passed at construction.
     *
     * See {ERC721-_mint}.
     *
     * Requirements:
     *
     * - the caller must have the `MINTER_ROLE`.
     */
    function mint(address) public virtual whenNotPaused {
        revert("cannot mint without arweave transaction hash");
    }

    /**
     * @dev Creates a new token for `to` assigning it's arweave transaction hash.
     * Its token ID will be automatically assigned (and available on the emitted {IERC721-Transfer} event),
     * the token URI autogenerated based on the base URI passed at construction,
     * and the arweave transaction hash passed to this function.
     *
     * See {ERC721-_mint}.
     *
     * Requirements:
     *
     * - the caller must have the `MINTER_ROLE`.
     */
    function mintWithArweaveTxHash(address to, string memory arweaveTxHash_, uint256 session)
        public
        virtual
		whenNotPaused
    {
        require(hasRole(MINTER_ROLE, _msgSender()), "not minter");
        require(_tokenIds[arweaveTxHash_] == 0, "arweaveTxHash in use");

        // We cannot just use balanceOf to create the new tokenId because tokens
        // can be burned (destroyed), so we need a separate counter.
        uint256 tokenId = _idTracker.current();
        
		_mint(to, tokenId);
		
		_arweaveTxHashes[tokenId] = arweaveTxHash_;
        _tokenIds[arweaveTxHash_] = tokenId;
		_tokenSessions[tokenId] = session;
        _idTracker.increment();

		emit Mint(address(to), tokenId, session);
    }

    /**
     * @dev Destroys an existing token for `to`.
     *
     * See {ERC721-burn}.
     *
     * Requirements:
     *
     * - the caller must have the `MINTER_ROLE`.
     */
    function burn(uint256 tokenId) public virtual whenNotPaused {
        require(
            hasRole(MINTER_ROLE, _msgSender()) || ownerOf(tokenId) == tx.origin,
            "not minter or owner"
        );
        require(_exists(tokenId), "no token with id");

		address from = _ownerOf(tokenId);
        _burn(tokenId);
        string memory txHash = _arweaveTxHashes[tokenId];
		uint256 session = _tokenSessions[tokenId];
        delete _arweaveTxHashes[tokenId];
        delete _tokenIds[txHash];
		delete _tokenSessions[tokenId];

		emit Burn(from, tokenId, session);
    }


    /**
     * @dev See {IERC721-ownerOf}.
     */
    function ownerOf(uint256 tokenId)
        public
        view
        virtual
        override(ERC721, IERC721)
        returns (address)
    {
        return _ownerOf(tokenId);
    }

    /**
     * @dev We don't use  {IERC721Metadata-name}.
     */
    function name() public view virtual override returns (string memory) {
        return _name;
    }

    /**
     * @dev We don't use {IERC721Metadata-symbol}.
     */
    function symbol() public view virtual override returns (string memory) {
        return _symbol;
    }

    /**
     * @dev We don't use  {IERC721Metadata-tokenURI}.
     */
    function tokenURI(uint256 tokenId)
        public
        view
        virtual
		override
        returns (string memory)
    {
        _requireMinted(tokenId);
		string memory txId = _arweaveTxHashes[tokenId];

        return
            bytes(__baseURI).length > 0
                ? string(abi.encodePacked(__baseURI, txId))
                : "";
    }

    /**
     * @dev See {IERC721-approve}.
     */
    function approve(address to, uint256 tokenId) public virtual override(ERC721, IERC721) {
        address owner = ownerOf(tokenId);
        require(to != owner, "approval to current owner");

        require(
            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),
            "approve caller is not token owner or approved for all"
        );

        _approve(to, tokenId);
    }


    /**
     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients
     * are aware of the ERC721 protocol to prevent tokens from being forever locked.
     *
     * `data` is additional data, it has no specified format and it is sent in call to `to`.
     *
     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.
     * implement alternative mechanisms to perform token transfer, such as signature-based.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `tokenId` token must exist and be owned by `from`.
     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.
     *
     * Emits a {Transfer} event.
     */
    function _safeTransfer(
        address from,
        address to,
        uint256 tokenId,
        bytes memory data
    ) internal virtual override {
        _transfer(from, to, tokenId);
        require(
            __checkOnERC721Received(from, to, tokenId, data),
            "_checkOnERC721Received1Receiver implementer"
        );
    }

    /**
     * @dev Returns whether `spender` is allowed to manage `tokenId`.
     *
     * Requirements:
     *
     * - `tokenId` must exist.
     */
    function _isApprovedOrOwner(address spender, uint256 tokenId)
        internal
        view
        virtual
		override
        returns (bool)
    {
        address owner = _ownerOf(tokenId);
        return (spender == owner ||
            isApprovedForAll(owner, spender) ||
            getApproved(tokenId) == spender);
    }

    /**
     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.
     * The call is not executed if the target address is not a contract.
     *
     * @param from address representing the previous owner of the given token ID
     * @param to target address that will receive the tokens
     * @param tokenId uint256 ID of the token to be transferred
     * @param data bytes optional data to send along with the call
     * @return bool whether the call correctly returned the expected magic value
     */
    function __checkOnERC721Received(
        address from,
        address to,
        uint256 tokenId,
        bytes memory data
    ) private returns (bool) {
        if (to.isContract()) {
            try
                IERC721Receiver(to).onERC721Received(
                    _msgSender(),
                    from,
                    tokenId,
                    data
                )
            returns (bytes4 retval) {
                return
                    retval ==
                    IERC721Receiver.onERC721Received.selector;
            } catch (bytes memory reason) {
                if (reason.length == 0) {
                    revert("transfer to non ERC721Receiver implementer");
                } else {
                    /// @solidity memory-safe-assembly
                    assembly {
                        revert(add(32, reason), mload(reason))
                    }
                }
            }
        } else {
            return true;
        }
    }

    /**
     * @dev Hook that is called after "consecutive token transfers" as defined in ERC2309 and implemented in
     * {ERC721Consecutive}.
     * Calling conditions are similar to {_afterTokenTransfer}.
     */
    function _afterConsecutiveTokenTransfer(
        address, /*from*/
        address, /*to*/
        uint256, /*first*/
        uint96 /*size*/
    ) internal virtual {}

    function pause() public {
		require(hasRole(DEFAULT_ADMIN_ROLE, _msgSender()), "not admin");

        _pause();
    }

    function unpause() public {
		require(hasRole(DEFAULT_ADMIN_ROLE, _msgSender()), "not admin");

        _unpause();
    }

    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 firstTokenId,
        uint256 batchSize
    ) internal virtual override(ERC721Enumerable, ERC721Pausable) {
        super._beforeTokenTransfer(from, to, firstTokenId, batchSize);
    }

	function ids(uint256 session) public view returns (uint256[] memory) {
        uint256 ct = 0;
        uint256 maxId = _idTracker.current() - 1;

        for (uint256 i = 1; i <= maxId; i++) {
            if (_ownerOf(i) == address(0)) {
				continue;
			}

			if (_tokenSessions[i] != session) {
				continue;
			}
			ct++;
        }

        uint256[] memory _ids = new uint256[](ct);
        uint256 idx = 0;
        for (uint256 i = 1; i <= maxId; i++) { // loop again and assign
            
            if (_ownerOf(i) == address(0)) {
				continue;
			}

			if (_tokenSessions[i] != session) {
				continue;
			}
			_ids[idx++] = i;
		}

        return _ids;
    }

    function owners(uint256 session) public view returns (address[] memory) {
        uint256 ct = 0;
        uint256 maxId = _idTracker.current() - 1;

        for (uint256 i = 1; i <= maxId; i++) {
            if (_ownerOf(i) == address(0)) {
				continue;
			}

			if (_tokenSessions[i] != session) {
				continue;
			}
			ct++;
        }

        address[] memory addresses = new address[](ct);
        uint256 idx = 0;
        for (uint256 i = 1; i <= maxId; i++) { // loop again and assign
            
			address owner = _ownerOf(i);
            if (_ownerOf(i) == address(0)) {
				continue;
			}

			if (_tokenSessions[i] != session) {
				continue;
			}
			addresses[idx++] = owner;
		}

        return addresses;
    }

    function baseURI() public view virtual returns (string memory) {
        return __baseURI;
    }
}
