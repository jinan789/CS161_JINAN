contract IncassoProtocolV2 {


    using SafeERC20 for IERC20;

    IERC20 private nfo;
    IERC20 private usdt;
    
    address private owner;
    address private SERVICE_ADDRESS;

    uint256 private oneYear = 1;            //30556926; 
    uint256 private threeMonth = 1;        //7789229;
    uint256 private minInvestAmount = 1;  //10000 * (10 ** 6); == 10000000000


    struct Obligation {
        address investor;
        uint256 sumNFO;
        bool isReturn;
        bool isWithdraw;
        uint256 startTime;
        uint256 endTime;
        mapping(uint256 => Payment) payments;
    }

    struct Payment {
        uint256 sumNFO;
        bool isReturn;
        uint256 withdrawDate;
    }

    mapping(address => mapping(uint256 => Obligation)) public userObligations; // user obligations
    mapping(address => uint256) public userObligationsSum; // obligated sum in nfo
    mapping(address => uint256) public investmentsCountPerUser; // count of user investments

    modifier canReturnPayment(uint256 obligationNum, uint256 paymentNum) {
        require(block.timestamp >= userObligations[msg.sender][obligationNum].payments[paymentNum].withdrawDate
        && userObligations[msg.sender][obligationNum].payments[paymentNum].sumNFO != 0
        && userObligations[msg.sender][obligationNum].payments[paymentNum].isReturn == false,
            "Payment date later or payment already returned"
        );
        _;
    }

    modifier canReturnObligation(uint256 obligationNum) {
        require(block.timestamp >= userObligations[msg.sender][obligationNum].endTime
        && userObligations[msg.sender][obligationNum].investor == msg.sender
        && userObligations[msg.sender][obligationNum].isReturn == false,
            "The obligation is not expired or is not active or you have been withdrawn your obligation"
        );
        _;
    }

    modifier onlyOwner() {
        require(msg.sender == owner, "You are not onwer");
        _;
    }

    constructor(IERC20 _usdt, IERC20 _nfo) {
        nfo =_nfo;
        usdt = _usdt;
        owner = msg.sender;
        SERVICE_ADDRESS = address(this);
    }

    function makeInvest(uint256 amount) external {
        require(amount >= minInvestAmount, "Minimum trading amount is 10.000 USDT");
        usdt.safeTransferFrom(msg.sender, SERVICE_ADDRESS, amount);
        investmentsCountPerUser[msg.sender]++;

        uint _withdrawDate = block.timestamp;
        for (uint i; i < 4; i++) {
            _withdrawDate+= threeMonth;
            userObligations[msg.sender][investmentsCountPerUser[msg.sender]].payments[i] = Payment({
                sumNFO: ((amount * 10 ** 14) * 15) / 4,
                isReturn: false,
                withdrawDate: _withdrawDate
            });
        }
        userObligations[msg.sender][investmentsCountPerUser[msg.sender]].investor = msg.sender;
        userObligations[msg.sender][investmentsCountPerUser[msg.sender]].sumNFO = amount * (10 ** 14);
        userObligations[msg.sender][investmentsCountPerUser[msg.sender]].isReturn = false;
        userObligations[msg.sender][investmentsCountPerUser[msg.sender]].isWithdraw = false;
        userObligations[msg.sender][investmentsCountPerUser[msg.sender]].startTime = block.timestamp;
        userObligations[msg.sender][investmentsCountPerUser[msg.sender]].endTime = oneYear + block.timestamp;

        userObligationsSum[msg.sender] += amount * (10 ** 14);
    }

    function withdrawObligatedTokens(uint256 obligationNum) external {
        require(
            userObligations[msg.sender][obligationNum].investor == msg.sender
            && userObligations[msg.sender][obligationNum].isWithdraw == false
            && userObligations[msg.sender][obligationNum].isReturn == false,
            "The obligation already withdrawn"
        );
        userObligations[msg.sender][obligationNum].isWithdraw = true;
        uint256 withdrawAmount = userObligations[msg.sender][obligationNum].sumNFO;
        userObligationsSum[msg.sender] -= withdrawAmount;

        if (withdrawAmount > getSpecialAssestsBalance(nfo)) {
            uint256 difference = withdrawAmount - getSpecialAssestsBalance(nfo);
            mintNFO(difference);
            nfo.safeTransfer(msg.sender, withdrawAmount);
            return;
        }
        nfo.safeTransfer(msg.sender, withdrawAmount);
    }

    function returnPayment(uint obligationNum, uint paymentNum) external canReturnPayment(obligationNum, paymentNum) {
        Payment storage payment = userObligations[msg.sender][obligationNum].payments[paymentNum];
        payment.isReturn = true;
        uint sumUSDT = payment.sumNFO / 10 ** 16;
        usdt.safeTransfer(msg.sender, sumUSDT);
    }

    function returnObligation(uint obligationNum) external canReturnObligation(obligationNum) {
        Obligation storage obligation = userObligations[msg.sender][obligationNum];
        uint sumUSDT = obligation.sumNFO / 10 ** 14;
        if (obligation.isWithdraw) {
            obligation.isReturn = true;
            nfo.safeTransferFrom(msg.sender, address(this), obligation.sumNFO);
            usdt.safeTransfer(msg.sender, sumUSDT);
            return;
        }
        obligation.isReturn = true;
        userObligationsSum[msg.sender] -= obligation.sumNFO;
        usdt.safeTransfer(msg.sender, sumUSDT);
    }

    function getPayments(uint obligationNum, uint index) external view returns(Payment memory) {
        return userObligations[msg.sender][obligationNum].payments[index];
    }

    function getSpecialAssestsBalance(IERC20 token) public view returns(uint256) {
        return token.balanceOf(address(this));
    }

    function transferAssests(address tokenAddress, uint256 amount, address receiver) external onlyOwner {
        IERC20(tokenAddress).safeTransfer(receiver, amount);
    }

    function mintNFO(uint256 difference) private {
        nfo.mint(address(this), difference);
    }

    function changeMode(uint256 secInYear, uint256 secInThreeMonth, uint256 _minInvestAmount) external onlyOwner {
        oneYear = secInYear;
        threeMonth = secInThreeMonth;
        minInvestAmount = _minInvestAmount;
    }

    function changeServiceAddress(address service_address) external onlyOwner {
        SERVICE_ADDRESS = service_address;
    }
    
    function changeContracts(IERC20 _usdt, IERC20 _nfo) external onlyOwner {
        nfo =_nfo;
        usdt = _usdt;
    }

    function restorePayments(address user, uint obligationNum) private {
        Obligation storage obligation = userObligations[user][obligationNum];
        uint _withdrawDate = block.timestamp;
        for (uint i=4; i<8; i++) {
            _withdrawDate += threeMonth;
            obligation.payments[i].sumNFO = (obligation.sumNFO * 15) / 4;
            obligation.payments[i].withdrawDate = _withdrawDate;
        }
    }

    function prolongObligation(uint obligationNum) external canReturnObligation(obligationNum) {
        Obligation storage obligation = userObligations[msg.sender][obligationNum];
        obligation.endTime += oneYear;
        restorePayments(msg.sender, obligationNum);
    }
}
