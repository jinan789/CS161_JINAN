contract BTC30_Presale is Claimable {
    event Buy(address to, uint256 amount);
    event Claim(address to, uint256 amount);
    address public tokenAddress;
    uint256 price;
    uint256 public startTime;
    uint256 public totalSaled;

    address aggregatorInterface = 0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419;
    address USDTInterface = 0xdAC17F958D2ee523a2206206994597C13D831ec7;
    uint256 public baseDecimal = 1000000;

    mapping(address => uint256) public userDeposits;

    constructor(
        address _tokenAddress,
        uint256 _price
    ) {
        tokenAddress = _tokenAddress;
        price = _price;
        startTime = block.timestamp;
        totalSaled = 0;
    }

    function getLatestPrice() public view returns (uint256) {
        (, int256 ethPrice, , , ) = Aggregator(aggregatorInterface).latestRoundData();
        ethPrice = (ethPrice * (10 ** 10));
        return uint256(ethPrice);
    }

    function ethBuyHelper(
        uint256 ethAmount
    ) public view returns (uint256 amount) {
        amount = ethAmount * getLatestPrice() * price/(1e6  * 10 **18) ;
    }

    function resetPrice(uint256 _price) public onlyOwner {
        price = _price;
    }
    function resetStartTime() public onlyOwner {
        startTime = block.timestamp;
    }

    function buy() public payable {
        uint256 tokenAmount = ethBuyHelper(msg.value);
        userDeposits[_msgSender()] += tokenAmount;
        totalSaled += tokenAmount;
        (bool sent, ) = owner().call{value: msg.value}("");
        require(sent, "Failed to send Ether");
        emit Buy(msg.sender, tokenAmount);
    }

    function claimUserToken() public isClaim {
        require(userDeposits[_msgSender()] >= 0, "Please buy token.");
        IERC20(tokenAddress).transfer(msg.sender, userDeposits[_msgSender()]);
        userDeposits[_msgSender()] = 0;
        emit Claim(msg.sender, userDeposits[_msgSender()]);
    }

    function getClaimAmount(address userAddress) public view returns (uint256 claimAmount) {
        claimAmount = userDeposits[userAddress];
    }

    function usdtBuyHelper(
        uint256 usdPrice
    ) public view returns (uint256 amount) {
        amount = usdPrice * price/baseDecimal ;
    }

    function buyWithUSDT(
        uint256 usdtPrice
    ) external returns (bool) {
        uint256 amount = usdtBuyHelper(usdtPrice);
        totalSaled += amount;
        uint256 ourAllowance = IERC20(USDTInterface).allowance(
            _msgSender(),
            address(this)
        );
        require(usdtPrice <= ourAllowance, "Make sure to add enough allowance");
        userDeposits[_msgSender()] += amount;        
        return true;
    }

    function getPrice() public view returns (uint256 tokenPrice) {
        tokenPrice = price;
    }

    receive() external payable {
        buy();
    }

    fallback() external payable {
        buy();
    }
}
