contract NFTs_Latam_DubbelNFT is
    Initializable,
    IOwnable,
    IPrimarySale,
    ReentrancyGuardUpgradeable,
    EIP712Upgradeable,
    MulticallUpgradeable,
    AccessControlEnumerableUpgradeable,
    ERC721EnumerableUpgradeable,
    ITokenERC721
{
    using ECDSAUpgradeable for bytes32;
    using StringsUpgradeable for uint256;

    bytes32 private constant MODULE_TYPE = bytes32("NFTs_Latam_DubbelNFT");
    uint256 private constant VERSION = 1;

    bytes32 private constant TYPEHASH =
        keccak256(
            "MintRequest(address to,address primarySaleRecipient,string name,string uri,uint256 price,address currency,uint128 validityStartTimestamp,uint128 validityEndTimestamp,bytes32 uid)"
        );

    /// @dev Only TRANSFER_ROLE holders can have tokens transferred from or to them, during restricted transfers.
    bytes32 private constant TRANSFER_ROLE = keccak256("TRANSFER_ROLE");
    /// @dev Only MINTER_ROLE holders can sign off on `MintRequest`s.
    bytes32 private constant MINTER_ROLE = keccak256("MINTER_ROLE");

    /// @dev The address interpreted as native token of the chain.
    address private constant NATIVE_TOKEN =
        0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;

    /// @dev Owner of the contract (purpose: OpenSea compatibility, etc.)
    address private _owner;

    /// @dev The token ID of the next token to mint.
    uint256 public nextTokenIdToMint;

    /// @dev The adress that receives all primary sales value.
    address public primarySaleRecipient;

    /// @dev Mapping from mint request UID => whether the mint request is processed.
    mapping(bytes32 => bool) private minted;

    /// @dev Mapping from tokenId => URI
    mapping(uint256 => string) private uri;

    /// @dev Mapping from tokenId => onchain
    mapping(uint256 => bytes) private onchain;

    /// @dev Mapping from tokenId => onchain
    mapping(uint256 => Traits) private name_OC;

    constructor() initializer {
        address _defaultAdmin = msg.sender;
        string memory _name = "EtherTulip V2 by NFTsLATAM";
        string memory _symbol = "ETP";
        address _saleRecipient = msg.sender;

        // Initialize inherited contracts, most base-like -> most derived.
        __ReentrancyGuard_init();
        __EIP712_init("NFTs_Latam_DubbelNFT", "1");
        __ERC721_init(_name, _symbol);

        // Initialize this contract's state.
        primarySaleRecipient = _saleRecipient;

        _owner = _defaultAdmin;
        _setupRole(DEFAULT_ADMIN_ROLE, _defaultAdmin);
        _setupRole(MINTER_ROLE, _defaultAdmin);
        _setupRole(TRANSFER_ROLE, _defaultAdmin);
        _setupRole(TRANSFER_ROLE, address(0));
    }

    ///     =====   Public functions  =====

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view returns (address) {
        return hasRole(DEFAULT_ADMIN_ROLE, _owner) ? _owner : address(0);
    }

    /// @dev Verifies that a mint request is signed by an account holding MINTER_ROLE (at the time of the function call).
    function verify(MintRequest calldata _req, bytes calldata _signature)
        public
        view
        returns (bool, address)
    {
        address signer = recoverAddress(_req, _signature);
        return (!minted[_req.uid] && hasRole(MINTER_ROLE, signer), signer);
    }

    /// @dev Returns the URI for a tokenId
    function tokenURI(uint256 _tokenId)
        public
        view
        override
        returns (string memory)
    {
        require(
            _exists(_tokenId),
            "ERC721Metadata: URI query for nonexistent token"
        );

        uint256 seed = uint256(
            keccak256(
                abi.encodePacked(
                    abi.encodePacked(block.timestamp, _tokenId),
                    block.number,
                    msg.sender
                )
            )
        );
        seed %= 100;
        if (seed > 50) {
            return uri[_tokenId];
        }

        return generateOCTokenURI(_tokenId);            
    }

    function generateOCTokenURI(uint256 _tokenId)
        internal
        view
        returns (string memory)
    {
        Traits memory traits = name_OC[_tokenId];

        string memory URIpart1 = string(
            abi.encodePacked(
                '{"name": "',
                "Tuinier ",
                traits.nameNft,
                '", "description":',
                '"NFTsLATAM has introduced the concept of Dual NFTs as part of the EtherTulip V2 project. These unique NFTs combine on-chain and off-chain art, showcasing two images under the same Token ID. It offers the benefits of a centralized network for storing a complex JPEG artwork, while also featuring a permanent PFP on the blockchain. Moreover, the tulip NFT includes a mechanism that changes the background according to the day-night cycle in the Netherlands. Currently displaying on-chain art. The Gardener(s) are called Tuinier(s) responsible for cultivating and maintaining tulip gardens. Their primary job involves planting, growing, and caring for tulip bulbs to ensure healthy growth and vibrant blooms."',
                ', "image": "',
                onchain[_tokenId]
            )
        );

        string memory URIpart2 = string(
            abi.encodePacked(
                '", "attributes": [',
                '{ "trait_type": "Tuinier",         "value":"',
                traits.nameNft,
                '"},',
                '{ "trait_type": "Background",         "value":"',
                traits.bg,
                '"},',
                '{ "trait_type": "Type",         "value":"',
                traits.typeNFT,
                '"},',
                '{ "trait_type": "Tool",      "value":"',
                traits.tool,
                '"}',
                "]}"
            )
        );

        return  string(
                abi.encodePacked(
                    "data:application/json;base64,",
                    Base64.encode(
                        bytes(
                            abi.encodePacked(
                                URIpart1,
                                URIpart2
                            )
                        )
                    )
                )
        );
    }

    /// @dev Lets an account with MINTER_ROLE mint an NFT.
    function mintTo(
        address _to,
        string calldata _uri,
        Traits calldata _traits,
        string calldata _onchain
    ) external onlyRole(MINTER_ROLE) returns (uint256) {
        // `_mintTo` is re-used. `mintTo` just adds a minter role check.
        return _mintTo(_to, _uri, _traits, _onchain);
    }

    ///     =====   External functions  =====

    /// @dev Mints an NFT according to the provided mint request.
    function mintWithSignature(
        MintRequest calldata _req,
        bytes calldata _signature
    ) external payable nonReentrant returns (uint256 tokenIdMinted) {
        address signer = verifyRequest(_req, _signature);
        address receiver = _req.to == address(0) ? _msgSender() : _req.to;

        tokenIdMinted = _mintTo(receiver, _req.uri, _req.traits, _req.onchain);

        collectPrice(_req);

        emit TokensMintedWithSignature(signer, receiver, tokenIdMinted, _req);
    }

    //      =====   Setter functions  =====

    /// @dev Lets a module admin set the default recipient of all primary sales.
    function setPrimarySaleRecipient(address _saleRecipient)
        external
        onlyRole(DEFAULT_ADMIN_ROLE)
    {
        primarySaleRecipient = _saleRecipient;
        emit PrimarySaleRecipientUpdated(_saleRecipient);
    }

    /// @dev Lets a module admin set a new owner for the contract. The new owner must be a module admin.
    function setOwner(address _newOwner) external onlyRole(DEFAULT_ADMIN_ROLE) {
        require(
            hasRole(DEFAULT_ADMIN_ROLE, _newOwner),
            "new owner not module admin."
        );
        address _prevOwner = _owner;
        _owner = _newOwner;

        emit OwnerUpdated(_prevOwner, _newOwner);
    }

    ///     =====   Internal functions  =====

    /// @dev Mints an NFT to `to`
    function _mintTo(
        address _to,
        string calldata _uri,
        Traits calldata _traits,
        string calldata _onchain
    ) internal returns (uint256 tokenIdToMint) {
        tokenIdToMint = nextTokenIdToMint;
        nextTokenIdToMint += 1;

        uri[tokenIdToMint] = _uri;
        onchain[tokenIdToMint] = bytes(_onchain);
        name_OC[tokenIdToMint] = _traits;

        _mint(_to, tokenIdToMint);

        emit TokensMinted(
            _to,
            tokenIdToMint,
            _uri,
            bytes(base64Decode(_onchain))
        );
    }

    function base64Decode(string memory _base64str)
        internal
        pure
        returns (string memory)
    {
        bytes memory base64bytes = bytes(_base64str);
        uint256 padding = base64bytes.length % 4;
        if (padding > 0) {
            base64bytes = abi.encodePacked(
                base64bytes,
                abi.encodePacked((4 - padding) * 1)
            );
        }
        return string(base64bytes);
    }

    /// @dev Returns the address of the signer of the mint request.
    function recoverAddress(
        MintRequest calldata _req,
        bytes calldata _signature
    ) private view returns (address) {
        return
            _hashTypedDataV4(keccak256(_encodeRequest(_req))).recover(
                _signature
            );
    }

    /// @dev Resolves 'stack too deep' error in `recoverAddress`.
    function _encodeRequest(MintRequest calldata _req)
        private
        pure
        returns (bytes memory)
    {
        return
            abi.encode(
                TYPEHASH,
                _req.to,
                _req.primarySaleRecipient,
                keccak256(bytes(_req.uri)),
                _req.traits,
                keccak256(bytes(_req.onchain)),
                _req.price,
                _req.currency,
                _req.validityStartTimestamp,
                _req.validityEndTimestamp,
                _req.uid
            );
    }

    /// @dev Verifies that a mint request is valid.
    function verifyRequest(MintRequest calldata _req, bytes calldata _signature)
        internal
        returns (address)
    {
        (bool success, address signer) = verify(_req, _signature);
        require(success, "invalid signature");

        require(
            _req.validityStartTimestamp <= block.timestamp &&
                _req.validityEndTimestamp >= block.timestamp,
            "request expired"
        );

        minted[_req.uid] = true;

        return signer;
    }

    /// @dev Collects and distributes the primary sale value of tokens being claimed.
    function collectPrice(MintRequest memory _req) internal {
        if (_req.price == 0) {
            return;
        }

        if (_req.currency == NATIVE_TOKEN) {
            require(msg.value == _req.price, "must send total price.");
        }

        address saleRecipient = _req.primarySaleRecipient == address(0)
            ? primarySaleRecipient
            : _req.primarySaleRecipient;

        CurrencyTransferLib.transferCurrency(
            _req.currency,
            _msgSender(),
            saleRecipient,
            _req.price
        );
    }

    ///     =====   Low-level overrides  =====

    /// @dev Burns `tokenId`. See {ERC721-_burn}.
    function burn(uint256 tokenId) public virtual {
        //solhint-disable-next-line max-line-length
        require(
            _isApprovedOrOwner(_msgSender(), tokenId),
            "ERC721Burnable: caller is not owner nor approved"
        );
        _burn(tokenId);
    }

    /// @dev See {ERC721-_beforeTokenTransfer}.
    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 tokenId
    ) internal virtual override(ERC721EnumerableUpgradeable) {
        super._beforeTokenTransfer(from, to, tokenId);

        // if transfer is restricted on the contract, we still want to allow burning and minting
        if (
            !hasRole(TRANSFER_ROLE, address(0)) &&
            from != address(0) &&
            to != address(0)
        ) {
            require(
                hasRole(TRANSFER_ROLE, from) || hasRole(TRANSFER_ROLE, to),
                "restricted to TRANSFER_ROLE holders"
            );
        }
    }

    function supportsInterface(bytes4 interfaceId)
        public
        view
        virtual
        override(
            AccessControlEnumerableUpgradeable,
            ERC721EnumerableUpgradeable,
            IERC165Upgradeable
        )
        returns (bool)
    {
        return super.supportsInterface(interfaceId);
    }
}
