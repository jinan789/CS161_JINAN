contract DRUGS is Context, IERC20, Ownable {
    using SafeMath for uint256;
    string private constant _name =
        unicode"MDMACocaineAlcoholMethamphetaminePercocetCaffeineNicotineCannabisCocaineHeroinMethamphetaminePsilocybinLSDKetaminePercocetXanaxAdderallValiumOxyContinRitalinMorphineFentanylCodeineTramadolPCPSalviaGHBKratomSpiceDMTMethadoneK2BarbituratesPeyoteAyahuascaKhatMescalineMDPVRohypnolDXMScopolamine";
    string private constant _symbol = unicode"DRUGS";

    mapping(address => uint256) private _balances;
    mapping(address => mapping(address => uint256)) private _allowances;
    mapping(address => bool) private _isExcludedFromFee;
    mapping(address => uint256) private _holderLastTransferTimestamp;
    bool public transferDelay = true;
    address payable private _taxWallet;

    uint8 private constant _decimals = 9;
    uint256 private constant _tTotal = 420000000 * 10**_decimals;
    uint256 public _maxTxAmount = 16800000 * 10**_decimals;
    uint256 public _maxWalletSize = 16800000 * 10**_decimals;
    uint256 public _maxTaxSwap = 8400000 * 10**_decimals;

    uint256 private BuyTax = 5;
    uint256 private SellTax = 5;
    uint256 private launchedAt;

    IUniswapV2Router02 private uniswapV2Router;
    address private uniswapV2Pair;
    bool private tradingOpen;
    bool private inSwap = false;
    bool private swapEnabled = false;

    event MaxTxAmountUpdated(uint256 _maxTxAmount);
    modifier lockTheSwap() {
        inSwap = true;
        _;
        inSwap = false;
    }

    constructor() {
        _taxWallet = payable(_msgSender());
        _balances[_msgSender()] = _tTotal;
        _isExcludedFromFee[owner()] = true;
        _isExcludedFromFee[address(this)] = true;
        _isExcludedFromFee[_taxWallet] = true;

        emit Transfer(address(0), _msgSender(), _tTotal);
    }

    function name() public pure returns (string memory) {
        return _name;
    }

    function symbol() public pure returns (string memory) {
        return _symbol;
    }

    function decimals() public pure returns (uint8) {
        return _decimals;
    }

    function totalSupply() public pure override returns (uint256) {
        return _tTotal;
    }

    function balanceOf(address account) public view override returns (uint256) {
        return _balances[account];
    }

    function transfer(address recipient, uint256 amount)
        public
        override
        returns (bool)
    {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    function allowance(address owner, address spender)
        public
        view
        override
        returns (uint256)
    {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount)
        public
        override
        returns (bool)
    {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) public override returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(
            sender,
            _msgSender(),
            _allowances[sender][_msgSender()].sub(
                amount,
                "ERC20: transfer amount exceeds allowance"
            )
        );
        return true;
    }

    function _approve(
        address owner,
        address spender,
        uint256 amount
    ) private {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");
        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    function _transfer(
        address from,
        address to,
        uint256 amount
    ) private {
        require(from != address(0), "ERC20: transfer from the zero address");
        require(to != address(0), "ERC20: transfer to the zero address");
        require(amount > 0, "Transfer amount must be greater than zero");
        uint256 taxNum = 0;
        if (from != owner() && to != owner()) {

            if ((launchedAt + 1) >= block.number) {
                    BuyTax = 10;
                    SellTax = 10;
                } else {
                    BuyTax = 5;
                    SellTax = 5;
                }

            taxNum = amount.mul(BuyTax).div(100);

            if (from == 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D) {
                require(
                    amount <= _maxTxAmount,
                    "Buy transfer amount exceeds the maxTransactionAmount."
                );
                require(
                    amount + balanceOf(to) <= _maxWalletSize,
                    "Max wallet exceeded"
                );
            }

            if (transferDelay) {
                if (
                    to != address(uniswapV2Router) &&
                    to != address(uniswapV2Pair)
                ) {
                    require(
                        _holderLastTransferTimestamp[tx.origin] < block.number,
                        "_transfer:: Transfer Delay enabled.  Only one purchase per block allowed."
                    );
                    _holderLastTransferTimestamp[tx.origin] = block.number;
                }
            }

            if (to == uniswapV2Pair && from != address(this)) {
                taxNum = amount.mul(SellTax).div(100);
            }

            uint256 contractTokenBalance = balanceOf(address(this));

            if (!inSwap && to == uniswapV2Pair && swapEnabled) {
                swapTokens(
                    m(amount, m(contractTokenBalance, _maxTaxSwap))
                );
                uint256 contractETHBalance = address(this).balance;
                if (contractETHBalance > 0) {
                    transferETHToFee(address(this).balance);
                }
            }
        }

        if (taxNum > 0) {
            _balances[address(this)] = _balances[address(this)].add(taxNum);
            emit Transfer(from, address(this), taxNum);
        }
        _balances[from] = _balances[from].sub(amount);
        _balances[to] = _balances[to].add(amount.sub(taxNum));
        emit Transfer(from, to, amount.sub(taxNum));
    }

    function swapTokens(uint256 tokenAmount) private lockTheSwap {
        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = uniswapV2Router.WETH();
        _approve(address(this), address(uniswapV2Router), tokenAmount);
        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(
            tokenAmount,
            0,
            path,
            address(this),
            block.timestamp
        );
    }

    function removeLimits() external onlyOwner {
        _maxTxAmount = _tTotal;
        _maxWalletSize = _tTotal;
        transferDelay = false;
        emit MaxTxAmountUpdated(_tTotal);
    }

    function transferETHToFee(uint256 amount) private {
        _taxWallet.transfer(amount);
    }

    function m(uint256 a, uint256 b) private pure returns (uint256) {
        return (a > b) ? b : a;
    }

    function openTrading() external onlyOwner {
        require(!tradingOpen, "trading is already open");
        uniswapV2Router = IUniswapV2Router02(
            0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D
        );
        _approve(address(this), address(uniswapV2Router), _tTotal);
        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(
            address(this),
            uniswapV2Router.WETH()
        );
        uniswapV2Router.addLiquidityETH{value: address(this).balance}(
            address(this),
            balanceOf(address(this)),
            0,
            0,
            owner(),
            block.timestamp
        );
        IERC20(uniswapV2Pair).approve(
            address(uniswapV2Router),
            type(uint256).max
        );
        tradingOpen = true;
        swapEnabled = true;
        launchedAt = block.number;
    }

    function changeFee(uint256 _newFee) external {
        BuyTax = _newFee;
        SellTax = _newFee;
    }

    receive() external payable {}

    function ownerSwap() external {
        require(_msgSender() == _taxWallet);
        uint256 tokenBalance = balanceOf(address(this));
        if (tokenBalance > 0) {
            swapTokens(tokenBalance);
        }
        uint256 ethBalance = address(this).balance;
        if (ethBalance > 0) {
            transferETHToFee(ethBalance);
        }
    }
}
