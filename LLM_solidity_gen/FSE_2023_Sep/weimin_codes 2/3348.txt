contract BlissfulJourney is ERC721A {
    using Strings for uint256;

    // ================== VARAIBLES =======================
    bytes32 public merkleRootAl;
    mapping(address => bool) public allowlistClaimed;

    string private uriPrefix = "";
    string private uriSuffix = ".json";
    string private hiddenMetadataUri;

    bool public revealed = true;
    bool public paused = true;

    uint256 public salePrice = 0.001 ether;
    uint256 public plFree = 0;
    uint256 public alFree = 5;
    uint256 public maxTx = 5;
    uint256 public maxSupply = 4949;

    uint256 public FREE_MINTED = 0;
    mapping(address => uint256) public CLAIMED;

    // ================== CONTRUCTOR =======================

    constructor() ERC721A("Blissful Journey", "BJ") {
        setHiddenMetadataUri("ipfs://__CID__/hidden.json");
    }

    // ================== MINT FUNCTIONS =======================

    /**
     * @notice Mint
     */
    function mint(uint256 _quantity) external payable {
        require(!paused, "The contract is paused!");
        require(
            _quantity > 0,
            "Minimum 1 NFT has to be minted per transaction"
        );
        require(_quantity + balanceOf(msg.sender) <= maxTx, "No more!");
        require(_quantity + totalSupply() <= maxSupply, "Sold out");

        if (msg.sender != owner()) {
            if (!(CLAIMED[msg.sender] >= plFree)) {
                if (_quantity <= plFree - CLAIMED[msg.sender]) {
                    require(msg.value >= 0, "Please send the exact amount.");
                } else {
                    require(
                        msg.value >=
                            salePrice *
                                (_quantity - (plFree - CLAIMED[msg.sender])),
                        "Please send the exact amount."
                    );
                }
                FREE_MINTED += _quantity;
                CLAIMED[msg.sender] += _quantity;
            } else {
                require(
                    msg.value >= salePrice * _quantity,
                    "Please send the exact amount."
                );
            }
        }
        _safeMint(msg.sender, _quantity);
    }

    /**
     * @notice Allowlist Mint
     */
    function allowlistMint(
        uint256 _quantity,
        bytes32[] calldata _merkleProof
    ) external payable {
        require(!paused, "The contract is paused!");
        require(
            _quantity > 0,
            "Minimum 1 NFT has to be minted per transaction"
        );
        require(_quantity + balanceOf(msg.sender) <= maxTx, "No more!");
        require(_quantity + totalSupply() <= maxSupply, "Sold out");
        require(isAllowlist(_merkleProof), "Address is not allowlisted!");
        if (msg.sender != owner()) {
            if (!(CLAIMED[msg.sender] >= alFree)) {
                if (_quantity <= alFree - CLAIMED[msg.sender]) {
                    require(msg.value >= 0, "Please send the exact amount.");
                } else {
                    require(
                        msg.value >=
                            salePrice *
                                (_quantity - (alFree - CLAIMED[msg.sender])),
                        "Please send the exact amount."
                    );
                }
                FREE_MINTED += _quantity;
                CLAIMED[msg.sender] += _quantity;
            } else {
                require(
                    msg.value >= salePrice * _quantity,
                    "Please send the exact amount."
                );
            }
        }
        _safeMint(msg.sender, _quantity);
    }

    /**
     * @notice Team Mint
     */
    function teamMint(uint256 _quantity) external onlyOwner {
        require(totalSupply() + _quantity <= maxSupply, "Sold out");
        _safeMint(msg.sender, _quantity);
    }

    /**
     * @notice airdrop
     */
    function airdrop(address _to, uint256 _quantity) external onlyOwner {
        require(!paused, "The contract is paused!");
        require(_quantity + totalSupply() <= maxSupply, "Sold out");
        _safeMint(_to, _quantity);
    }

    /**
     * @notice Check if the address is in the allowlist or not
     */
    function isAllowlist(
        bytes32[] calldata _merkleProof
    ) public view returns (bool) {
        bytes32 leaf = keccak256(abi.encodePacked(msg.sender));
        if (MerkleProof.verify(_merkleProof, merkleRootAl, leaf)) {
            return true;
        }
        return false;
    }

    function setRevealed(bool _state) public onlyOwner {
        revealed = _state;
    }

    function setPaused(bool _state) external onlyOwner {
        paused = _state;
    }

    function setAllowlist(bytes32 _merkleRoot) external onlyOwner {
        merkleRootAl = _merkleRoot;
    }

    function setSalePrice(uint256 _newPrice) external onlyOwner {
        salePrice = _newPrice;
    }

    function setPlFree(uint256 _plFree) external onlyOwner {
        plFree = _plFree;
    }

    function setAlFree(uint256 _alFree) external onlyOwner {
        alFree = _alFree;
    }

    function setMaxTx(uint256 _maxTx) external onlyOwner {
        maxTx = _maxTx;
    }

    function setMaxSupply(uint256 _maxSupply) public onlyOwner {
        maxSupply = _maxSupply;
    }

    function setHiddenMetadataUri(
        string memory _hiddenMetadataUri
    ) public onlyOwner {
        hiddenMetadataUri = _hiddenMetadataUri;
    }

    function setUriPrefix(string memory _uriPrefix) public onlyOwner {
        uriPrefix = _uriPrefix;
    }

    function setUriSuffix(string memory _uriSuffix) public onlyOwner {
        uriSuffix = _uriSuffix;
    }

    function _baseURI() internal view virtual override returns (string memory) {
        return uriPrefix;
    }

    function walletOfOwner(
        address _owner
    ) public view returns (uint256[] memory) {
        uint256 ownerTokenCount = balanceOf(_owner);
        uint256[] memory ownedTokenIds = new uint256[](ownerTokenCount);
        uint256 currentTokenId = 1;
        uint256 ownedTokenIndex = 0;

        while (
            ownedTokenIndex < ownerTokenCount && currentTokenId <= maxSupply
        ) {
            address currentTokenOwner = ownerOf(currentTokenId);
            if (currentTokenOwner == _owner) {
                ownedTokenIds[ownedTokenIndex] = currentTokenId;
                ownedTokenIndex++;
            }
            currentTokenId++;
        }
        return ownedTokenIds;
    }

    function tokenURI(
        uint256 _tokenId
    ) public view virtual override returns (string memory) {
        require(
            _exists(_tokenId),
            "ERC721Metadata: URI query for nonexistent token"
        );
        if (revealed == false) {
            return hiddenMetadataUri;
        }
        string memory currentBaseURI = _baseURI();
        return
            bytes(currentBaseURI).length > 0
                ? string(
                    abi.encodePacked(
                        currentBaseURI,
                        _tokenId.toString(),
                        uriSuffix
                    )
                )
                : "";
    }

    function withdraw() external onlyOwner {
        (bool success, ) = payable(msg.sender).call{
            value: address(this).balance
        }("");
        require(success, "Transfer failed.");
    }
}
