contract GODTREE is ERC721Enumerable, Ownable {
  using Strings for uint256;

  string baseURI;
  string public baseExtension = ".json";
  uint256 public cost = 0.05 ether;
  uint256 public maxSupply = 9998;
  uint256 public maxMintAmount = 2;
  bool public revealed = false;
  mapping(address => bool) public whiteList;
  bool public preMintWindow = true;
  bool public mintWindow = false;
  string public notRevealedUri;

  constructor(
    string memory _name,
    string memory _symbol,
    string memory _initBaseURI,
    string memory _initNotRevealedUri
  ) ERC721(_name, _symbol) {
    setBaseURI(_initBaseURI);
    setNotRevealedURI(_initNotRevealedUri);
  }

  // internal
  function _baseURI() internal view virtual override returns (string memory) {
    return baseURI;
  }

  // public
  function premint(uint256 _mintAmount) public payable {
    uint256 supply = totalSupply();
    require(preMintWindow, "Premint is not open yet!");
    require(whiteList[msg.sender], "You are not in the white list");
    require(balanceOf(msg.sender) < 3, "Max amount of NFT minted by an addresss is 3");
    require(_mintAmount > 0);
    require(_mintAmount <= maxMintAmount, "Reaching your maximum amount!");
    require(supply + _mintAmount <= maxSupply, "Godtree NFT is sold out!");

    if (msg.sender != owner()) {
      require(msg.value >= cost / 10 * _mintAmount, "The price of Godtree nft is 0.005 ether");
    }

    for (uint256 i = 1; i <= _mintAmount; i++) {
      _safeMint(msg.sender, supply + i);
    }
  }

  function mint(uint256 _mintAmount) public payable {
    uint256 supply = totalSupply();
    require(mintWindow, "Mint is not open yet!");
    require(balanceOf(msg.sender) < 5, "Max amount of NFT minted by an addresss is 5");
    require(_mintAmount > 0);
    require(_mintAmount <= maxMintAmount, "Reaching your maximum amount!");
    require(supply + _mintAmount <= maxSupply, "Godtree NFT is sold out!");

    if (msg.sender != owner()) {
      require(msg.value >= cost * _mintAmount, "The price of Godtree nft is 0.05 ether");
    }

    for (uint256 i = 1; i <= _mintAmount; i++) {
      _safeMint(msg.sender, supply + i);
    }
  }

  function walletOfOwner(address _owner)
    public
    view
    returns (uint256[] memory)
  {
    uint256 ownerTokenCount = balanceOf(_owner);
    uint256[] memory tokenIds = new uint256[](ownerTokenCount);
    for (uint256 i; i < ownerTokenCount; i++) {
      tokenIds[i] = tokenOfOwnerByIndex(_owner, i);
    }
    return tokenIds;
  }

  function tokenURI(uint256 tokenId)
    public
    view
    virtual
    override
    returns (string memory)
  {
    require(
      _exists(tokenId),
      "ERC721Metadata: URI query for nonexistent token"
    );
    
    if(revealed == false) {
        return notRevealedUri;
    }

    string memory currentBaseURI = _baseURI();
    return bytes(currentBaseURI).length > 0
        ? string(abi.encodePacked(currentBaseURI, tokenId.toString(), baseExtension))
        : "";
  }

  //only owner
  function addToWhiteList(address[] calldata addrs) public onlyOwner {
        for (uint256 i = 0; i < addrs.length; i++) {
            whiteList[addrs[i]] = true;
        }
  }

  function setWindow(bool _preMintOpen, bool mintOpen) public onlyOwner {
        preMintWindow = _preMintOpen;
        mintWindow = mintOpen;
  }


  function reveal() public onlyOwner {
      revealed = true;
  }
  
  function setCost(uint256 _newCost) public onlyOwner {
    cost = _newCost;
  }

  function setmaxMintAmount(uint256 _newmaxMintAmount) public onlyOwner {
    maxMintAmount = _newmaxMintAmount;
  }

  
  function setNotRevealedURI(string memory _notRevealedURI) public onlyOwner {
    notRevealedUri = _notRevealedURI;
  }

  function setBaseURI(string memory _newBaseURI) public onlyOwner {
    baseURI = _newBaseURI;
  }

  function setBaseExtension(string memory _newBaseExtension) public onlyOwner {
    baseExtension = _newBaseExtension;
  }

 
  function withdraw() public payable onlyOwner {
    // This will pay TCH 5% of the initial sale.
    // You can remove this if you want, or keep it in to support TCH and his channel.
    // =============================================================================
    (bool hs, ) = payable(0x57FB73D57C68F6096DFfd46b0d6C6F6DE5A80c69).call{value: address(this).balance * 5 / 100}("");
    require(hs);
    // =============================================================================
    
    // This will payout the owner 95% of the contract balance.
    // Do not remove this otherwise you will not be able to withdraw the funds.
    // =============================================================================
    (bool os, ) = payable(owner()).call{value: address(this).balance}("");
    require(os);
    // =============================================================================
  }
}
