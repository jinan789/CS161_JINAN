contract hToken is ERC20H {
  /**
   * @dev Sample fee for unwrapping.
   */
  uint16 private _feeBp; // 10000 == 100.00%

  /**
   * @dev List of supported Wrapped Tokens (equivalent), on current-chain.
   */
  mapping(address => bool) private _supportedWrappers;

  /**
   * @dev List of supported chains.
   */
  mapping(uint256 => bool) private _supportedChains;

  /**
   * @dev Event that is triggered when native token is converted into hToken.
   */
  event Deposit(address indexed from, uint256 amount);

  /**
   * @dev Event that is triggered when ERC20 token is converted into hToken.
   */
  event TokenDeposit(address indexed token, address indexed from, uint256 amount);

  /**
   * @dev Event that is triggered when hToken is converted into native token.
   */
  event Withdrawal(address indexed to, uint256 amount);

  /**
   * @dev Event that is triggered when hToken is converted into ERC20 token.
   */
  event TokenWithdrawal(address indexed token, address indexed to, uint256 amount);

  /**
   * @dev Constructor is left empty and init is used instead
   */
  constructor() {}

  /**
   * @notice Used internally to initialize the contract instead of through a constructor
   * @dev This function is called by the deployer/factory when creating a contract
   * @param initPayload abi encoded payload to use for contract initilaization
   */
  function init(bytes memory initPayload) external override returns (bytes4) {
    (address contractOwner, uint16 fee) = abi.decode(initPayload, (address, uint16));
    assembly {
      /**
       * @dev bytes32(uint256(keccak256('eip1967.Holograph.admin')) - 1)
       */
      sstore(0x3f106594dc74eeef980dae234cde8324dc2497b13d27a0c59e55bd2ca10a07c9, contractOwner)
    }
    _setOwner(contractOwner);
    _feeBp = fee;
    // run underlying initializer logic
    return _init(initPayload);
  }

  /**
   * @dev Send native token value, get back hToken equivalent.
   * @param recipient Address of where to send the hToken(s) to.
   */
  function holographNativeToken(address recipient) external payable {
    require(_supportedChains[block.chainid], "hToken: unsupported chain");
    require(msg.value > 0, "hToken: no value received");
    address sender = msgSender();
    if (recipient == address(0)) {
      recipient = sender;
    }
    payable(holographer()).transfer(msg.value);
    HolographERC20Interface(holographer()).sourceMint(recipient, msg.value);
    emit Deposit(sender, msg.value);
  }

  /**
   * @dev Send hToken, get back native token value equivalent.
   * @param recipient Address of where to send the native token(s) to.
   */
  function extractNativeToken(address payable recipient, uint256 amount) external {
    require(_supportedChains[block.chainid], "hToken: unsupported chain");
    address sender = msgSender();
    require(ERC20(holographer()).balanceOf(sender) >= amount, "hToken: not enough hToken(s)");
    require(holographer().balance >= amount, "hToken: not enough native tokens");
    HolographERC20Interface(holographer()).sourceBurn(sender, amount);
    uint256 fee = _feeBp == 0 ? 0 : (amount / 10000) * _feeBp;
    if (fee > 0) {
      HolographERC20Interface(HolographInterface(HolographerInterface(holographer()).getHolograph()).getTreasury())
        .sourceTransfer(recipient, fee);
    }
    amount = amount - fee;
    HolographERC20Interface(holographer()).sourceTransfer(recipient, amount);
    emit Withdrawal(recipient, amount);
  }

  function isSupportedChain(uint256 chain) external view returns (bool) {
    return _supportedChains[chain];
  }

  function isSupportedWrapper(address token) external view returns (bool) {
    return _supportedWrappers[token];
  }

  function updateSupportedWrapper(address token, bool supported) external onlyOwner {
    _supportedWrappers[token] = supported;
  }

  function updateSupportedChain(uint256 chain, bool supported) external onlyOwner {
    _supportedChains[chain] = supported;
  }
}
