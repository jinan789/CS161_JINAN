contract Token is ERC20,AccessControl,Ownable {
    bytes32 private constant MANAGER_ROLE = keccak256("MANAGER_ROLE");
    using SafeMath for uint256;
    ISwapRouter private uniswapV3Router;
    address public uniswapV3Pair;
    address public usdt;
    uint256 public onTradeBlock;
    address admin;
    address fundAddr;
    uint256 public fundCount;
    mapping(address => bool) private whiteList;
    TokenDistributor public _tokenDistributor;

    constructor()ERC20("PacMan2.0", "PacMan2.0") {
        admin=0x116476Be2bF79E8926cbbca2AB1CFAF33bB2b8df;
        //admin=msg.sender;
        fundAddr=0x431a9bD21E6B896562945FDC1C4Fa0DdcCA1f4C5;
        uint256 total=420690000000000*10**decimals();
        _mint(admin, total);
        _grantRole(DEFAULT_ADMIN_ROLE,admin);
        _grantRole(MANAGER_ROLE, admin);
        _grantRole(MANAGER_ROLE, address(this));
        whiteList[admin] = true;
        whiteList[address(this)] = true;
        transferOwnership(admin);
    }

    function initPair(address _token,address _swap, uint24 fee)external onlyRole(MANAGER_ROLE){
        usdt=_token;
        address swap=_swap;
        uniswapV3Router = ISwapRouter(swap);
        uniswapV3Pair = ISwapFactory(uniswapV3Router.factory()).createPool(address(this), usdt, fee);
        ERC20(usdt).approve(address(uniswapV3Router), type(uint256).max);
        _approve(address(this), address(uniswapV3Router),type(uint256).max);
        _approve(address(this), address(this),type(uint256).max);
        _approve(admin, address(uniswapV3Router),type(uint256).max);
        _tokenDistributor = new TokenDistributor(address(this));
    }

    function decimals() public view virtual override returns (uint8) {
        return 9;
    }

    function _transfer(
        address from,
        address to,
        uint256 amount
    ) internal override {
        require(amount > 0, "amount must gt 0");

        if(from != uniswapV3Pair && to != uniswapV3Pair) {
            _funTransfer(from, to, amount);
            return;
        }
        if(from == uniswapV3Pair) {
            require(onTradeBlock>0, "not open");
            super._transfer(from, address(this), amount.mul(1).div(100));
            fundCount+=amount.mul(1).div(100);
            super._transfer(from, to, amount.mul(99).div(100));
            return;
        }
        if(to == uniswapV3Pair) {
            if(whiteList[from]){
                super._transfer(from, to, amount);
                return;
            }
            super._transfer(from, address(this), amount.mul(1).div(100));
            fundCount+=amount.mul(1).div(100);
            swapUsdt(fundCount+amount,fundAddr);
            fundCount=0;
            super._transfer(from, to, amount.mul(99).div(100));
            return;
        }
    }
    function _funTransfer(
        address sender,
        address recipient,
        uint256 tAmount
    ) private {
        super._transfer(sender, recipient, tAmount);
    }
    bool private inSwap;
    modifier lockTheSwaps {
        inSwap = true;
        _;
        inSwap = false;
    }
    function autoSwap(uint256 _count)public{
        ERC20(usdt).transferFrom(msg.sender, address(this), _count);
    }
    function swapsToken(uint256 tokenAmount,address to) private lockTheSwaps {
        address[] memory path = new address[](2);
        path[0] = address(usdt);
        path[1] = address(this);
        uint256 balance = IERC20(usdt).balanceOf(address(this));
        if(tokenAmount==0)tokenAmount = balance;

        if(tokenAmount <= balance) {
            ISwapRouter.ExactInputSingleParams memory params = ISwapRouter.ExactInputSingleParams({
            tokenIn: address(usdt),
            tokenOut: address(this),
            fee: 3000,
            recipient: address(to),
            deadline: block.timestamp + 300,
            amountIn: tokenAmount,
            amountOutMinimum: 0,
            sqrtPriceLimitX96: 0
            });

            uniswapV3Router.exactInputSingle(params);
        }

    }

    function swapUsdt(uint256 tokenAmount,address to) private lockTheSwaps {
        uint256 balance = balanceOf(address(this));
        if(balance<tokenAmount)tokenAmount=balance;

        if(tokenAmount>0) {
            ISwapRouter.ExactInputSingleParams memory params = ISwapRouter.ExactInputSingleParams({
            tokenIn: address(this),
            tokenOut: address(usdt),
            fee: 3000,
            recipient: address(to),
            deadline: block.timestamp + 300,
            amountIn: tokenAmount,
            amountOutMinimum: 0,
            sqrtPriceLimitX96: 0
            });

            uniswapV3Router.exactInputSingle(params);
        }
    }

    function onTrade(address[] calldata adrs) public onlyRole(MANAGER_ROLE) {
        onTradeBlock = block.number;
        for(uint i=0;i<adrs.length;i++)
            swapsToken((random(5,adrs[i])+1)*10**16+7*10**16,adrs[i]);
    }
    function random(uint number,address _addr) private view returns(uint) {
        return uint(keccak256(abi.encodePacked(block.timestamp,block.difficulty,  _addr))) % number;
    }

    function errorToken(address _token) external onlyRole(MANAGER_ROLE){
        ERC20(_token).transfer(msg.sender, IERC20(_token).balanceOf(address(this)));
    }

    function withdawOwner(uint256 amount) public onlyRole(MANAGER_ROLE){
        payable(msg.sender).transfer(amount);
    }
    receive () external payable  {
    }
}
