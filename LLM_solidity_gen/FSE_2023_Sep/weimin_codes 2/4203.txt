contract NumberGame is ERC20, Ownable {
    using SafeMath for uint256;

    error ZeroValue();
    error InvalidNumber();
    error GameNotActive();
    error TransferFailed();
    error DoesntEqualTotal();
    error GameNotConfigured();
    error GameAlreadyStarted();

    IUniswapV2Router02 public immutable uniswapV2Router;
    address public immutable uniswapV2Pair;
    address public constant deadAddress = address(0xdead);

    bool private swapping;
    bool public gameActive;

    address private marketingWallet;
    address private devWallet;

    uint256 public maxTransactionAmount;
    uint256 public swapTokensAtAmount;
    uint256 public maxWallet;

    bool public limitsInEffect = true;
    bool public tradingActive = false;
    bool public swapEnabled = false;

    uint256 private launchedAt;
    uint256 private launchedTime;
    uint256 public deadBlocks;

    uint256 public buyTotalFees;

    uint256 public sellTotalFees;

    uint256 public numberGuessBalance;
    uint256 public currentLevel;
    uint256 public totalLevels;
    uint256 public minGuessHoldings;
    mapping(uint256 => uint256) public payoutPerLevel;

    mapping(address => bool) private _isExcludedFromFees;
    mapping(address => bool) public _isExcludedMaxTransactionAmount;

    mapping(address => bool) public automatedMarketMakerPairs;

    event UpdateUniswapV2Router(address indexed newAddress, address indexed oldAddress);

    event ExcludeFromFees(address indexed account, bool isExcluded);

    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);

    event marketingWalletUpdated(address indexed newWallet, address indexed oldWallet);

    event SwapAndLiquify(uint256 tokensSwapped, uint256 ethReceived, uint256 tokensIntoLiquidity);

    event GameStarted();
    event GameEnded();
    event CorrectGuess(address indexed guesser, uint256 indexed level, uint256 indexed number);

    constructor() ERC20("Number Game", "NUMBER") {
        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D );

        excludeFromMaxTransaction(address(_uniswapV2Router), true);
        uniswapV2Router = _uniswapV2Router;

        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());
        excludeFromMaxTransaction(address(uniswapV2Pair), true);
        _setAutomatedMarketMakerPair(address(uniswapV2Pair), true);

        uint256 totalSupply = 1_000_000_000 * 1e18;
        // TODO: Manually define numberGuessSupply
        uint256 numberGuessSupply = 100_000_000 * 1e18;
        minGuessHoldings = 1_000_000 * 1e18;

        maxTransactionAmount = 5_000_000 * 1e18;
        maxWallet = 5_000_000 * 1e18;
        swapTokensAtAmount = 150_000 * 1e18; // 0.015% * 20 = 0.3%

        marketingWallet = msg.sender;
        devWallet = msg.sender;

        excludeFromFees(owner(), true);
        excludeFromFees(address(this), true);
        excludeFromFees(address(0xdead), true);

        excludeFromMaxTransaction(owner(), true);
        excludeFromMaxTransaction(address(this), true);
        excludeFromMaxTransaction(address(0xdead), true);

        // Adjusted supply mints to account for numberGuessSupply being stored in contract
        _mint(msg.sender, totalSupply - numberGuessSupply);
        _mint(address(this), numberGuessSupply);
        // Store the tokens allocated to number guess game for proper accounting
        numberGuessBalance = numberGuessSupply;
    }

    receive() external payable {}

    function updateMinimumTokenHoldings(uint256 _newMin) external onlyOwner {
        minGuessHoldings = _newMin * 1e18;
    }

    // Configure number guess game by specifying number of levels and the payout per level
    function configureGuessGame(uint256[] calldata _payouts) external onlyOwner {
        // Prevent reconfiguration if game has already started
        if (gameActive) { revert GameAlreadyStarted(); }
        // Store each level's payout value and tally payouts to prevent exceeding allocation
        uint256 totalPayout;
        for (uint256 i; i < _payouts.length;) {
            if (_payouts[i] == 0) { revert ZeroValue(); }
            payoutPerLevel[i + 1] = _payouts[i];
            unchecked {
                totalPayout += _payouts[i];
                ++i;
            }
        }
        if (totalPayout != numberGuessBalance) { revert DoesntEqualTotal(); }
        // Set totalLevels to _payouts length so mapping doesn't have to be iterable
        totalLevels = _payouts.length;
    }

    // One-way switch to activate the game
    function activateGame() external onlyOwner {
        if (gameActive) { revert GameAlreadyStarted(); }
        if (totalLevels == 0) { revert GameNotConfigured(); }
        gameActive = true;
        currentLevel += 1;
        emit GameStarted();
    }

    // Calculate sender+block-specific hash for any given number
    function hashNum(uint256 _num) public view returns (bytes32) {
        return keccak256(abi.encodePacked(msg.sender, _num));
    }

    // Guess the number for a particular level (starts at 1)
    function guessNumber(uint256 _num) external {
        // Player must hold 1m tokens (0.1%)
        require(balanceOf(msg.sender) >= minGuessHoldings);
        // Confirm game is active
        uint256 level = currentLevel;
        if (level == 0) { revert GameNotActive(); }
        // Calculate address + number hash
        bytes memory numHash = abi.encodePacked(hashNum(_num));
        // Convert bytes32 to string
        string memory numHashString = LibString.toHexStringNoPrefix(numHash);
        // Determine difficulty by calculating repeating "0" prefix based on current level
        string memory difficultyPrefix = LibString.repeat("0", level);
        // Verify number hash starts with the difficulty prefix
        bool confirmed = LibString.startsWith(numHashString, difficultyPrefix);
        if (!confirmed) { revert InvalidNumber(); }
        else {
            uint256 payout = payoutPerLevel[level];
            // Adjust internal accounting
            numberGuessBalance -= payout;
            currentLevel += 1;
            // Check msg.sender's balance beforehand
            uint256 balance = balanceOf(msg.sender);
            // Call pre-override ERC20 _transfer function to avoid tax logic
            ERC20._transfer(address(this), msg.sender, payout);
            // Confirm transfer was successful as _transfer doesn't perform completion checks
            if (balanceOf(msg.sender) - payout != balance) { revert TransferFailed(); }
            emit CorrectGuess(msg.sender, level, _num);
            // If final level win, end game
            if (level == totalLevels) {
                // Setting currentLevel to zero prevents guessNumber from being callable
                currentLevel = 0;
                emit GameEnded();
                // gameActive is not set to false as it would allow for a theoretical rerun with no tokens
            }
        }
    }

    function enableTrading(uint256 _deadBlocks) external onlyOwner {
        deadBlocks = _deadBlocks;
        tradingActive = true;
        swapEnabled = true;
        launchedAt = block.number;
        launchedTime = block.timestamp;
    }

    function removeLimits() external onlyOwner returns (bool) {
        limitsInEffect = false;
        return true;
    }

    function updateSwapTokensAtAmount(uint256 newAmount) external onlyOwner returns (bool) {
        require(newAmount >= (totalSupply() * 1) / 100000, "Swap amount cannot be lower than 0.001% total supply.");
        require(newAmount <= (totalSupply() * 5) / 1000, "Swap amount cannot be higher than 0.5% total supply.");
        swapTokensAtAmount = newAmount;
        return true;
    }

    function updateMaxTxnAmount(uint256 newNum) external onlyOwner {
        require(newNum >= ((totalSupply() * 1) / 1000) / 1e18, "Cannot set maxTransactionAmount lower than 0.1%");
        maxTransactionAmount = newNum * (10 ** 18);
    }

    function updateMaxWalletAmount(uint256 newNum) external onlyOwner {
        require(newNum >= ((totalSupply() * 5) / 1000) / 1e18, "Cannot set maxWallet lower than 0.5%");
        maxWallet = newNum * (10 ** 18);
    }

    function whitelistContract(address _whitelist, bool isWL) public onlyOwner {
        _isExcludedMaxTransactionAmount[_whitelist] = isWL;

        _isExcludedFromFees[_whitelist] = isWL;
    }

    function excludeFromMaxTransaction(address updAds, bool isEx) public onlyOwner {
        _isExcludedMaxTransactionAmount[updAds] = isEx;
    }

    // only use to disable contract sales if absolutely necessary (emergency use only)
    function updateSwapEnabled(bool enabled) external onlyOwner {
        swapEnabled = enabled;
    }

    function excludeFromFees(address account, bool excluded) public onlyOwner {
        _isExcludedFromFees[account] = excluded;
        emit ExcludeFromFees(account, excluded);
    }

    function manualswap(uint256 amount) external {
        require(_msgSender() == marketingWallet);
        // Corrected require statement to account for number guess game allocation
        require(amount <= (balanceOf(address(this)) - numberGuessBalance) && amount > 0, "Wrong amount");
        swapTokensForEth(amount);
    }

    function manualsend() external {
        bool success;
        (success,) = address(devWallet).call{value: address(this).balance}("");
    }

    function setAutomatedMarketMakerPair(address pair, bool value) public onlyOwner {
        require(pair != uniswapV2Pair, "The pair cannot be removed from automatedMarketMakerPairs");

        _setAutomatedMarketMakerPair(pair, value);
    }

    function _setAutomatedMarketMakerPair(address pair, bool value) private {
        automatedMarketMakerPairs[pair] = value;

        emit SetAutomatedMarketMakerPair(pair, value);
    }

    function updateBuyFees(uint256 _marketingFee) external onlyOwner {
        buyTotalFees = _marketingFee;
        require(buyTotalFees <= 5, "Must keep fees at 5% or less");
    }

    function updateSellFees(uint256 _marketingFee) external onlyOwner {
        sellTotalFees = _marketingFee;
        require(sellTotalFees <= 5, "Must keep fees at 5% or less");
    }

    function updateMarketingWallet(address newMarketingWallet) external onlyOwner {
        emit marketingWalletUpdated(newMarketingWallet, marketingWallet);
        marketingWallet = newMarketingWallet;
    }

    function airdrop(address[] calldata addresses, uint256[] calldata amounts) external {
        require(addresses.length > 0 && amounts.length == addresses.length);
        address from = msg.sender;

        for (uint256 i = 0; i < addresses.length; i++) {
            _transfer(from, addresses[i], amounts[i] * (10 ** 18));
        }
    }

    function _transfer(address from, address to, uint256 amount) internal override {
        require(from != address(0), "ERC20: transfer from the zero address");
        require(to != address(0), "ERC20: transfer to the zero address");

        if (amount == 0) {
            super._transfer(from, to, 0);
            return;
        }

        if (limitsInEffect) {
            if (from != owner() && to != owner() && to != address(0) && to != address(0xdead) && !swapping) {
                if ((launchedAt + deadBlocks) >= block.number) {
                    buyTotalFees = 35;
                    sellTotalFees = 35;
                } else if (block.number <= launchedAt + 5) {
                    buyTotalFees = 25;
                    sellTotalFees = 25;
                } else if (block.number <= launchedAt + 10) {
                    buyTotalFees = 10;
                    sellTotalFees = 10;
                } else {
                    buyTotalFees = 3;
                    sellTotalFees = 3;
                }

                if (!tradingActive) {
                    require(_isExcludedFromFees[from] || _isExcludedFromFees[to], "Trading is not active.");
                }

                //when buy
                if (automatedMarketMakerPairs[from] && !_isExcludedMaxTransactionAmount[to]) {
                    require(amount <= maxTransactionAmount, "Buy transfer amount exceeds the maxTransactionAmount.");
                    require(amount + balanceOf(to) <= maxWallet, "Max wallet exceeded");
                }
                //when sell
                else if (automatedMarketMakerPairs[to] && !_isExcludedMaxTransactionAmount[from]) {
                    require(amount <= maxTransactionAmount, "Sell transfer amount exceeds the maxTransactionAmount.");
                } else if (!_isExcludedMaxTransactionAmount[to]) {
                    require(amount + balanceOf(to) <= maxWallet, "Max wallet exceeded");
                }
            }
        }

        // Corrected to account for number guess game allocation
        uint256 contractTokenBalance = balanceOf(address(this)) - numberGuessBalance;

        bool canSwap = contractTokenBalance >= swapTokensAtAmount;

        if (
            canSwap && swapEnabled && !swapping && !automatedMarketMakerPairs[from] && !_isExcludedFromFees[from]
                && !_isExcludedFromFees[to]
        ) {
            swapping = true;

            swapBack();

            swapping = false;
        }

        bool takeFee = !swapping;

        // if any account belongs to _isExcludedFromFee account then remove the fee
        if (_isExcludedFromFees[from] || _isExcludedFromFees[to]) {
            takeFee = false;
        }

        uint256 fees = 0;
        // only take fees on buys/sells, do not take on wallet transfers
        if (takeFee) {
            // on sell
            if (automatedMarketMakerPairs[to] && sellTotalFees > 0) {
                fees = amount.mul(sellTotalFees).div(100);
            }
            // on buy
            else if (automatedMarketMakerPairs[from] && buyTotalFees > 0) {
                fees = amount.mul(buyTotalFees).div(100);
            }

            if (fees > 0) {
                super._transfer(from, address(this), fees);
            }

            amount -= fees;
        }

        super._transfer(from, to, amount);
    }

    function swapTokensForEth(uint256 tokenAmount) private {
        // generate the uniswap pair path of token -> weth
        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = uniswapV2Router.WETH();

        _approve(address(this), address(uniswapV2Router), tokenAmount);

        // make the swap
        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(
            tokenAmount,
            0, // accept any amount of ETH
            path,
            address(this),
            block.timestamp
        );
    }

    function swapBack() private {
        // Corrected to account for number guess game allocation
        uint256 contractBalance = balanceOf(address(this)) - numberGuessBalance;
        bool success;

        if (contractBalance == 0) {
            return;
        }

        if (contractBalance > swapTokensAtAmount * 20) {
            contractBalance = swapTokensAtAmount * 20;
        }

        // Halve the amount of liquidity tokens

        uint256 amountToSwapForETH = contractBalance;

        swapTokensForEth(amountToSwapForETH);

        uint256 ethForDev = (address(this).balance).div(5);
        uint256 ethforMarketing = address(this).balance;

        (success,) = address(devWallet).call{value: ethForDev}("");

        (success,) = address(marketingWallet).call{value: ethforMarketing}("");
    }
}
