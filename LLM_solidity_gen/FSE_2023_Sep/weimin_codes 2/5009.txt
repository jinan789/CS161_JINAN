contract MTMCharactersRendererV3OnChain is Ownable {

    //////////////////////
    ///// Interfaces /////
    //////////////////////

    // Storage Interfaces
    iCS public CS; // Character Storage
    iCR public CR; // Character Registry (Helmet)
    iMarsRulerRegistry public MRR; // Mars Ruler Registry

    // On Chain Data URI Generator
    iModelStorage public Artifacts  ;
    iModelStorage public Weapons    ;
    iModelStorage public Vehicle1   ;
    iModelStorage public Vehicle2   ;
    iModelStorage public RaceHead   ;
    iModelStorage public RaceBody   ;
    iModelStorage public RaceArms   ;
    iModelStorage public MaleHead   ;
    iModelStorage public MaleChest  ;
    iModelStorage public MaleArms   ;
    iModelStorage public FemaleHead ;
    iModelStorage public FemaleChest;
    iModelStorage public FemaleArms ;

    function O_setInterfaceContracts(address cs_, address cr_, address mrr_)
     external onlyOwner {
        CS = iCS(cs_); 
        CR = iCR(cr_);
        MRR = iMarsRulerRegistry(mrr_);
    }

    function O_setModels(address[13] calldata modelAddresses_) external onlyOwner {
        Artifacts   = iModelStorage(modelAddresses_[0] );
        Weapons     = iModelStorage(modelAddresses_[1] );
        Vehicle1    = iModelStorage(modelAddresses_[2] );
        Vehicle2    = iModelStorage(modelAddresses_[3] );
        RaceHead    = iModelStorage(modelAddresses_[4] );
        RaceBody    = iModelStorage(modelAddresses_[5] );
        RaceArms    = iModelStorage(modelAddresses_[6] );
        MaleHead    = iModelStorage(modelAddresses_[7] );
        MaleChest   = iModelStorage(modelAddresses_[8] );
        MaleArms    = iModelStorage(modelAddresses_[9] );
        FemaleHead  = iModelStorage(modelAddresses_[10]);
        FemaleChest = iModelStorage(modelAddresses_[11]);
        FemaleArms  = iModelStorage(modelAddresses_[12]);
    }

    ///////////////////////
    ///// Model Query ///// 
    ///////////////////////

    // Race
    function _getRaceHeadB64(uint8 gearId_) private view returns (string memory) {
        return RaceHead.getModel(gearId_);
    }
    function _getRaceBodyB64(uint8 gearId_) private view returns (string memory) {
        return RaceBody.getModel(gearId_);
    }
    function _getRaceArmsB64(uint8 gearId_) private view returns (string memory) {
        return RaceArms.getModel(gearId_);
    }

    // Condition Agnostic Accessories
    function _getWeaponB64(uint8 gearId_) private view returns (string memory) {
        return Weapons.getModel(gearId_);
    }
    function _getArtifactB64(uint8 gearId_) private view returns (string memory) {
        return Artifacts.getModel(gearId_);
    }
    function _getVehicleB64(uint8 gearId_) private view returns (string memory) {
        if (gearId_ < 11) {
            return Vehicle1.getModel(gearId_); // 1-10
        }
        else {
            return Vehicle2.getModel(gearId_); // 11+
        }    
    }

    // Condition Dependant Accessories
    function _getHeadB64(uint8 gearId_, uint8 race_) private view 
    returns (string memory) {
        if (race_ == 2 && gearId_ < 10) return FemaleHead.getModel(gearId_);
        return MaleHead.getModel(gearId_);
    }
    function _getChestB64(uint8 gearId_, uint8 race_) private view 
    returns (string memory) {
        if (race_ == 2) return FemaleChest.getModel(gearId_);
        return MaleChest.getModel(gearId_);
    }
    function _getArmsB64(uint8 gearId_, uint8 race_) private view
    returns (string memory) {
        if (race_ == 2) return FemaleArms.getModel(gearId_);
        return MaleArms.getModel(gearId_);
    }

    ////////////////////////
    ///// Model Piping ///// 
    ////////////////////////

    struct Model {
        uint8 vehicleId;
        uint8 weaponId;
        uint8 raceHeadId;
        uint8 raceBodyId;
        uint8 raceArmsId;
        uint8 armsId;
        uint8 chestId;
        uint8 artifactId;
        uint8 headId;
    }

    function _getModelParams(uint256 tokenId_) public view returns (Model memory) {
        // Prepare the delivery Model
        Model memory _Model;
        
        // Grab the necessary data for TokenId
        iMarsRulerRegistry.GearConfig memory _RulerGear = 
            MRR.characterToGearConfig(tokenId_);

        iCS.Character memory _Character = CS.characters(tokenId_);
        uint256 _spaceCapsuleId = _Character.spaceCapsuleId_;

        bool _HelmetOff = CR.characterToHelmetOff(tokenId_);

        // The model is a MALE
        if (_Character.race_ == 1 ||
            _Character.race_ == 3 ||
            _Character.race_ == 5) {

            // If the helmet is off, use the race head
            _Model.raceHeadId = _HelmetOff ? (_Character.race_ + 100) : 1;

            _Model.raceBodyId = 1;
            _Model.raceArmsId = 1;
        }

        // The model is a FEMALE
        else if (_Character.race_ == 2 ||
            _Character.race_ == 4 ||
            _Character.race_ == 6) {

            // If the helmet is off, use the race head
            _Model.raceHeadId = _HelmetOff ? (_Character.race_ + 100) : 2;

            _Model.raceBodyId = 2;
            _Model.raceArmsId = 2;
        }

        // The model is not MALE or FEMALE
        else {
            _Model.raceHeadId = _Character.race_;
            _Model.raceBodyId = _Character.race_;
            _Model.raceArmsId = _Character.race_;
        }

        // Check if RulerGear exists config
        if (_RulerGear.hasConfig) {
            _Model.vehicleId    = _RulerGear.vehicleType;
            _Model.weaponId     = _RulerGear.weaponType;
            _Model.armsId       = _RulerGear.armsType;
            _Model.chestId      = _RulerGear.chestType;
            _Model.artifactId   = _RulerGear.artifactType;
            _Model.headId       = _RulerGear.headType;
            // Ring doesn't exist on the image
        }

        // If RulerGear does not exists config
        else {
            _Model.vehicleId    = uint8(SCLib._getVehicleId (_spaceCapsuleId));
            _Model.weaponId     = uint8(SCLib._getWeaponId  (_spaceCapsuleId));
            _Model.armsId       = uint8(SCLib._getArmsId    (_spaceCapsuleId));
            _Model.chestId      = uint8(SCLib._getChestId   (_spaceCapsuleId));
            _Model.artifactId   = uint8(SCLib._getArtifactId(_spaceCapsuleId));
            _Model.headId       = uint8(SCLib._getHeadId    (_spaceCapsuleId));
        }

        // Now, if _HelmetOff is true, or the race is > 6,
        // override the helmet (head) slot
        if (_HelmetOff || _Character.race_ > 6) _Model.headId = 99;

        // Return the model
        return _Model;
    }

    /////////////////////////
    ///// SVG Constants ///// 
    /////////////////////////
    string private constant _svgHeader = "<svg id='martians' width='100%' height='100%' version='1.1' viewBox='0 0 64 64' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'>";
    string private constant _svgFooter = "<style>#martians{shape-rendering: crispedges; image-rendering: -webkit-crisp-edges; image-rendering: -moz-crisp-edges; image-rendering: crisp-edges; image-rendering: pixelated; -ms-interpolation-mode: nearest-neighbor;}</style></svg>";

    function _imageWrapper(string memory uri_) private pure 
    returns (string memory) {
        string memory _wrapper = string(abi.encodePacked(
            "<image x='0' y='0' width='64' height='64' image-rendering='pixelated' preserveAspectRatio='xMidYMid' href='data:image/png;base64,",
            uri_,
            "'/>"
        ));
        return _wrapper;
    }

    //////////////////////////////
    ///// Model Construction /////
    //////////////////////////////

    /*
        The layering is as follows:
            Vehicle
            Weapon
            Race Body
            Race Arms
            Equipment Arms
            Equipment Body
            Artifact
            Race Head
            Equipment Head
    */

    function renderMartian(uint256 tokenId_) public view returns (string memory) {
        // Load the Model
        Model memory _Model = _getModelParams(tokenId_);

        // Render the Model
        string memory _svg = string(abi.encodePacked(
            _svgHeader,
            _imageWrapper(_getVehicleB64(_Model.vehicleId)),
            _imageWrapper(_getWeaponB64(_Model.weaponId)),
            _imageWrapper(_getRaceBodyB64(_Model.raceBodyId)),
            _imageWrapper(_getRaceArmsB64(_Model.raceArmsId)),
            // Male vs Female Logic. We use raceBodyId as race model
            _imageWrapper(_getArmsB64(_Model.armsId, _Model.raceBodyId)),
            _imageWrapper(_getChestB64(_Model.chestId, _Model.raceBodyId))
        ));

        _svg = string(abi.encodePacked(
            _svg,
            _imageWrapper(_getArtifactB64(_Model.artifactId)),
            _imageWrapper(_getRaceHeadB64(_Model.raceHeadId)),
            // Helmet, Off, On, Etc ID
            _imageWrapper(_getHeadB64(_Model.headId, _Model.raceBodyId)),
            "</svg>"
        ));

        return _svg;
    }

    function drawCharacter(uint256 tokenId_) public view returns (string memory) {
        return Base64.encode( bytes(string(abi.encodePacked( 
            renderMartian(tokenId_)) 
        )));
    }
}
