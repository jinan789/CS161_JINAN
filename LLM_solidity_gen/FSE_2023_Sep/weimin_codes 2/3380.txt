contract LimitBypassProxy is ZkSyncInterface, ZkBridgeLike {
    using SafeERC20 for IERC20;
    ZkSyncInterface public constant zkSync = ZkSyncInterface(0x32400084C286CF3E17e7B677ea9583e60a000324);
    ZkBridgeLike public constant zkErc20Bridge = ZkBridgeLike(0x57891966931Eb4Bb6FB81430E6cE0A03AAbDe063);

    function l2TransactionBaseCost(
        uint256 _l1GasPrice,
        uint256 _l2GasLimit,
        uint256 _l2GasPerPubdataByteLimit
    ) external view returns (uint256) {
        return zkSync.l2TransactionBaseCost(_l1GasPrice, _l2GasLimit, _l2GasPerPubdataByteLimit);
    }

    function requestL2Transaction(
        address _contractL2,
        uint256 _l2Value,
        bytes calldata _calldata,
        uint256 _l2GasLimit,
        uint256 _l2GasPerPubdataByteLimit,
        bytes[] calldata _factoryDeps,
        address _refundRecipient
    ) external payable returns (bytes32 canonicalTxHash) {
        return
            zkSync.requestL2Transaction{ value: msg.value }(
                _contractL2,
                _l2Value,
                _calldata,
                _l2GasLimit,
                _l2GasPerPubdataByteLimit,
                _factoryDeps,
                _refundRecipient
            );
    }

    function deposit(
        address _l2Receiver,
        address _l1Token,
        uint256 _amount,
        uint256 _l2TxGasLimit,
        uint256 _l2TxGasPerPubdataByte,
        address _refundRecipient
    ) external payable returns (bytes32 txHash) {
        IERC20(_l1Token).safeIncreaseAllowance(address(zkErc20Bridge), _amount);
        return
            zkErc20Bridge.deposit{ value: msg.value }(
                _l2Receiver,
                _l1Token,
                _amount,
                _l2TxGasLimit,
                _l2TxGasPerPubdataByte,
                _refundRecipient
            );
    }
}
