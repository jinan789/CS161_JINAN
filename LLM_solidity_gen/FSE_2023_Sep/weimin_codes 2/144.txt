contract COGG is Context, Ownable, IERC20, ERC20Detailed {
  using SafeERC20 for IERC20;
  using Address for address;
  using SafeMath for uint256;
  
    IUniswapV2Router02 public immutable uniswapV2Router;
    address public immutable uniswapV2Pair;
    
    mapping (address => uint) internal _balances;
    mapping (address => mapping (address => uint)) internal _allowances;
    mapping (address => bool) private _isExcludedFromFee;
   
    uint256 internal _totalSupply;
    uint256 public sellMarketingFee = 2;
    uint256 public buyMarketingFee = 1;
    uint256 private marketingFee;
  
    address payable public marketingAddress = payable(0xA1d1C867548d925Bf4F2e3C846F8Eb1B5816766d);
  
    bool inSwapAndLiquify;
    bool private swapAndLiquifyEnabled = true;

    uint256 public numTokensSellToFee = 100000 * 10**18;
  
    event MinTokensBeforeSwapUpdated(uint256 minTokensBeforeSwap);
    event SwapAndLiquifyEnabledUpdated(bool enabled);
    event SwapAndLiquify(
        uint256 tokensSwapped,
        uint256 ethReceived
    );

    modifier lockTheSwap {
        inSwapAndLiquify = true;
        _;
        inSwapAndLiquify = false;
    }
  
    address private _owner;
  
    constructor () ERC20Detailed("CocksGG", "COGG", 18) {
      _owner = msg.sender ;
    _totalSupply = 100000000 * (10**18); 
	_balances[_owner] = _totalSupply;

    IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D); //MAIN TEST ETH
	//IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E); //MAIN BSC
    //IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0xD99D1c33F9fC3444f8101754aBC46c52416550D1); //TEST BSC

         // Create a uniswap pair for this new token
        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())
            .createPair(address(this), _uniswapV2Router.WETH());

        // set the rest of the contract variables
        uniswapV2Router = _uniswapV2Router;

          //exclude owner and this contract from fee
        _isExcludedFromFee[owner()] = true;
        _isExcludedFromFee[address(this)] = true;
        _isExcludedFromFee[marketingAddress] = true;

     emit Transfer(address(0), _msgSender(), _totalSupply);
  }
  
    function totalSupply() public view override returns (uint) {
        return _totalSupply;
    }
    function balanceOf(address account) public view override returns (uint) {
        return _balances[account];
    }
    function transfer(address recipient, uint amount) public override  returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }
    function allowance(address towner, address spender) public view override returns (uint) {
        return _allowances[towner][spender];
    }
    function approve(address spender, uint amount) public override returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }
    function transferFrom(address sender, address recipient, uint amount) public override returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
        return true;
    }
    function increaseAllowance(address spender, uint addedValue) public returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
        return true;
    }
    function decreaseAllowance(address spender, uint subtractedValue) public returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
        return true;
    }

    function _approve(address towner, address spender, uint amount) internal {
        require(towner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");
        _allowances[towner][spender] = amount;
        emit Approval(towner, spender, amount);
    }

    function isContract(address account) internal view returns (bool) {
        return account.code.length > 0;
    }

    function setBuyMarketingFeePercent(uint256 updatedBuyMarketingFee) external onlyOwner {
        require(updatedBuyMarketingFee <= 3, "Buy fee should be less than 3%");
        buyMarketingFee = updatedBuyMarketingFee;
     
    }

    function setSellMarketingFeePercent(uint256 updatedSellMarketingFee) external onlyOwner {
        require(updatedSellMarketingFee <= 3, "Sell fee should be less than 3%");
        sellMarketingFee = updatedSellMarketingFee;
     
    }

    function setMarketingAddress(address payable wallet) external onlyOwner {
        require(wallet != marketingAddress,"Marketing address is already that address");
        require(wallet != address(0), "Marketing address cannot be dead address");
        require(!isContract(wallet), "Marketing address cannot be contract");
        marketingAddress = wallet;
    }


    function setSwapAndLiquifyEnabled(bool _enabled) public onlyOwner {
        swapAndLiquifyEnabled = _enabled;
        emit SwapAndLiquifyEnabledUpdated(_enabled);
    }

    function changeNumTokensSellToFee(uint256 _numTokensSellToFee) external onlyOwner {
        require(_numTokensSellToFee >= 10000 * 10**18 && _numTokensSellToFee <= 1000000 * 10**18, "Swap to fee threshold must be set within 10,000 to 1,000,000 tokens");
        numTokensSellToFee = _numTokensSellToFee;
        emit MinTokensBeforeSwapUpdated(_numTokensSellToFee);
    }

	function clearETH(uint256 weiAmount) external onlyOwner {		
        require(address(this).balance >= weiAmount, "Insufficient ETH balance");		
        payable(msg.sender).transfer(weiAmount);		
    }

    function clearERC20(address _tokenAddr,address _to, uint256 _amount) external onlyOwner {	
        require(_tokenAddr != address(this), "Owner can't claim native tokens");	
        IERC20(_tokenAddr).transfer(_to, _amount);	
    }

    function excludeFromFee(address account) public onlyOwner {
        _isExcludedFromFee[account] = true;
    }
    
    function includeInFee(address account) public onlyOwner {
        _isExcludedFromFee[account] = false;
    }

    function isExcludedFromFee(address account) public view returns (bool) {
        return _isExcludedFromFee[account];
    }

    //to recieve ETH from uniswapV2Router when swaping
    receive() external payable {}

    function _transfer(address sender, address recipient, uint amount) internal{

        require(sender != address(0), "ERC20: transfer from the zero address");
        require(recipient != address(0), "ERC20: transfer to the zero address");


        // is the token balance of this contract address over the min number of
        // tokens that we need to initiate a swap + liquidity lock?
        // also, don't get caught in a circular liquidity event.
        // also, don't swap & liquify if sender is uniswap pair.
        uint256 contractTokenBalance = balanceOf(address(this));
        
        
        bool overMinTokenBalance = contractTokenBalance >= numTokensSellToFee;
        if (
            overMinTokenBalance &&
            !inSwapAndLiquify &&
            sender != uniswapV2Pair &&
            swapAndLiquifyEnabled
        ) {
            contractTokenBalance = numTokensSellToFee;
            //add liquidity
            swapAndLiquify(contractTokenBalance);
        }

         //indicates if fee should be deducted from transfer
        bool takeFee = true;
        
        //if any account belongs to _isExcludedFromFee account then remove the fee
        if(_isExcludedFromFee[sender] || _isExcludedFromFee[recipient]){
            takeFee = false;
        }
       
        if(sender != uniswapV2Pair && recipient != uniswapV2Pair)
        {takeFee = false;}
        
        if(takeFee)
        {
            if(sender == uniswapV2Pair){marketingFee = buyMarketingFee;}
            else{marketingFee = sellMarketingFee;}
            uint256 taxAmount = amount.mul(marketingFee).div(100);
            uint256 TotalSent = amount.sub(taxAmount);
            _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
            _balances[recipient] = _balances[recipient].add(TotalSent);
            _balances[address(this)] = _balances[address(this)].add(taxAmount);
            emit Transfer(sender, recipient, TotalSent);
            emit Transfer(sender, address(this), taxAmount);
        }
        else
        {
            _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
            _balances[recipient] = _balances[recipient].add(amount);
            emit Transfer(sender, recipient, amount);
        }
       
    }

     function swapAndLiquify(uint256 contractTokenBalance) private lockTheSwap {
    
        // swap tokens for ETH
        swapTokensForEth(contractTokenBalance); // <- this breaks the ETH -> Token swap when swap+liquify is triggered

        payable(marketingAddress).transfer(address(this).balance);
        
        emit SwapAndLiquify(contractTokenBalance, address(this).balance);
    }

    function swapTokensForEth(uint256 tokenAmount) private {
        // generate the uniswap pair path of Token -> WETH
        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = uniswapV2Router.WETH();

        _approve(address(this), address(uniswapV2Router), tokenAmount);

        // make the swap
        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(
            tokenAmount,
            0, // accept any amount of ETH
            path,
            address(this),
            block.timestamp
        );
    }

}
