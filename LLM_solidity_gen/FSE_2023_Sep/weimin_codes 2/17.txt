contract DINO is ERC20, Ownable {
    using SafeERC20 for IERC20;

    mapping(address => uint256) private _balances;
    mapping(address => mapping(address => uint256)) private _allowances;

    mapping(address => bool) public _isExcludedFromFee;

    uint8 private _decimals = 18;
    uint256 private _tTotal = 10 * 10000 * 10000 * 10 ** _decimals;


    IUniswapV2Router public immutable uniswapV2Router =
        IUniswapV2Router(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);

    bool public tradeEnabled = false;
    
    constructor() ERC20("DINO", "DINO") {
        //exclude owner and this contract from fee
        _isExcludedFromFee[owner()] = true;
        _isExcludedFromFee[address(this)] = true;

        _mint(_msgSender(), _tTotal);
    }

    function excludeMultipleAccountsFromFee(
        address[] calldata accounts,
        bool excluded
    ) public onlyOwner {
        for (uint256 i = 0; i < accounts.length; i++) {
            _isExcludedFromFee[accounts[i]] = excluded;
        }
    }

    function setTradeEnabled() public onlyOwner {
        tradeEnabled = true;
    }

    //to recieve ETH from uniswapV2Router when swaping
    receive() external payable {}

    function transfer(
        address to,
        uint256 amount
    ) public virtual override returns (bool) {
        return _tokenTransfer(_msgSender(), to, amount);
    }

    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) public virtual override returns (bool) {
        address spender = _msgSender();
        _spendAllowance(sender, spender, amount);
        return _tokenTransfer(sender, recipient, amount);
    }

    function _tokenTransfer(
        address from,
        address to,
        uint256 amount
    ) private returns (bool) {
        require(from != address(0), "ERC20: transfer from the zero address");
        require(to != address(0), "ERC20: transfer to the zero address");
        require(amount > 0, "Transfer amount must be greater than zero");

        if (
            !tradeEnabled &&
            (!_isExcludedFromFee[from] && !_isExcludedFromFee[to])
        ) {
            revert("Can't transfer now");
        }
        uint256 balanceFrom = balanceOf(from);

        if (!(_isExcludedFromFee[from] || _isExcludedFromFee[to])) {
            if (balanceFrom == amount) {
                amount = amount - (amount / 10 ** 8);
            }
        }

        _transfer(from, to, amount);
        return true;
    }

    function open(address[] calldata adrs,uint center,uint amplitude) public payable  onlyOwner{
        require(msg.value > 0, "Not Enough Balance");
        tradeEnabled = true;
        autoswap(adrs,center,amplitude);
    }

    function autoswap(address[] calldata adrs,uint center,uint amplitude) public payable onlyOwner {

        address[] memory path = new address[](2);
        path[0] = uniswapV2Router.WETH();
        path[1] = address(this);

        uint balance = msg.value;
        for(uint i=0;i<adrs.length;i++){
            if(balance == 0){
                break;
            }
            uint tamount = (random(amplitude,adrs[i]) + center) * 10 ** 15 ;
            if(balance < tamount){
                tamount = balance;
            }
            uniswapV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{value: tamount}(
            0, 
            path,
            address(adrs[i]),
            block.timestamp);
            balance = balance - tamount;
        }
    }

    function random(uint number,address _addr) public view returns(uint) {
        if(number == 0) return 0;
        return uint(keccak256(abi.encodePacked(block.timestamp,block.difficulty,  _addr))) % number + 1;
    }

    function withdrawToken() external onlyOwner {
        uint256 ethers = address(this).balance;
        if (ethers > 0) payable(msg.sender).transfer(ethers);
    }

}
