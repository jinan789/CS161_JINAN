contract HPOS20I is ERC20, Ownable {
    
    uint256 public constant totalSupplyOnStart = 1e18;
    uint256 constant maxWalletStart = 2e16;
    uint256 tradingStartTime;
    uint256 constant addMaxWalletPerMinute = 1e16;

    address public pool;

    constructor() ERC20("$Trump", "HPOS20I Races") {
        _doMint(msg.sender, totalSupplyOnStart);
    }

    function decimals() public pure override returns (uint8) {
        return 9;
    }

    function maxWallet() public view returns (uint256) {
        if (tradingStartTime == 0) return totalSupply();

        uint256 res = maxWalletStart + ((block.timestamp - tradingStartTime) * addMaxWalletPerMinute) / (1 minutes);
        if (res > totalSupply()) {
            res = totalSupply();
        }
        return res;
    }

    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override {
        // before start trading only owner can manipulate the token
        if (pool == address(0)) {
            bool addressValid = (from == owner() || to == owner());
            require(addressValid, "only owner can participate the tx until trading is started.");
            return;
        }

        // check max wallet
        if (to != pool) {
            uint256 predictAmount = balanceOf(to) + amount;
            require(predictAmount <= maxWallet(), "should less or equal than wallet maximum");
        }
    }

    function startTradeEx(address poolAddress) public onlyOwner {
        tradingStartTime = block.timestamp;
        pool = poolAddress;
    }
}
