contract MakerDaoPSMSparkStakeMonitor {
    using SafeMath for uint256;
    address public owner;
    address public daiStakePool;
    address public makerDaoSparkSavingsStrategy;
    address public chainlinkDaiBaseUSD;
    address public chainlinkUsdcBaseUSD;
    address public DAI;
    address public PSMUSDC;
    address public USDC;

    constructor(address _owner) {
        owner = _owner;
        chainlinkDaiBaseUSD = 0xAed0c38402a5d19df6E4c03F4E2DceD6e29c1ee9;
        chainlinkUsdcBaseUSD = 0x8fFfFfd4AfB6115b954Bd326cbe7B4BA576818f6;
        makerDaoSparkSavingsStrategy = 0x6Dae9515DEb20F9875B4A383D353a97E0A6815E4; //0x71122Cd26c5f1E18826652708C3e00D1cf837DA4
        PSMUSDC = IsparkSavingsInterface(makerDaoSparkSavingsStrategy)
            .getGemJoin(); //0x0A59649758aa4d66E25f08Dd01271e891fe52199;
        USDC = IsparkSavingsInterface(makerDaoSparkSavingsStrategy).getGem(); //0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;
        daiStakePool = IsparkSavingsInterface(makerDaoSparkSavingsStrategy)
            .savingsAsset(); //0x83F20F44975D03b1b09e64809B757c47f942BEeA; // sdai
        DAI = IsparkSavingsInterface(makerDaoSparkSavingsStrategy).getDai(); // 0x6B175474E89094C44Da98b954EedeAC495271d0F;
    }

    function setMakerDaoSparkSavingsStrategy(
        address _makerDaoSparkSavingsStrategy
    ) external {
        require(
            msg.sender == owner,
            " only owner set lido spark staked Strategy"
        );
        makerDaoSparkSavingsStrategy = _makerDaoSparkSavingsStrategy;
    }

    function getPSMUSDCLiquidity() public view returns (uint256) {
        uint256 _usdcCash;
        _usdcCash = getTokenBalance(USDC, PSMUSDC);
        return _usdcCash;
    }

    function isPSMUSDCLiquidityInsufficient(
        uint256 _USDCAmountThreshold
    ) public view returns (bool) {
        uint256 _USDCCash;
        _USDCCash = getPSMUSDCLiquidity();
        if (_USDCAmountThreshold >= _USDCCash) {
            return true;
        }
        return false;
    }

    function hasSparkStaked(address _vault) public view returns (bool) {
        uint256 _balance;

        _balance = IERC20(daiStakePool).balanceOf(_vault);

        if (_balance > 0) {
            return true;
        }
        return false;
    }

    function getTokenBalance(
        address underlying,
        address vault
    ) public view returns (uint256) {
        return IERC20(underlying).balanceOf(vault);
    }

    function getPriceChainLink(
        address _chainlinkAggregator
    ) public view returns (uint256) {
        /*
        (
        uint80 roundId,
        int256 answer,
        uint256 startedAt,
        uint256 updatedAt,
        uint80 answeredInRound
        )
        */
        (, uint256 _price, , , ) = AggregatorV3Interface(_chainlinkAggregator)
            .latestRoundData();
        return _price;
    }

    function getDaiPriceFromChainLink() public view returns (uint256) {
        uint256 _price;
        _price = getPriceChainLink(chainlinkDaiBaseUSD);
        return _price;
    }

    function getUsdcPriceFromChainLink() public view returns (uint256) {
        uint256 _price;
        _price = getPriceChainLink(chainlinkUsdcBaseUSD);
        return _price;
    }

    function isDaiPriceUnanchoredFromChainLink(
        uint256 _anchorPrice
    ) public view returns (bool) {
        /*
        (
        uint80 roundId,
        int256 answer,
        uint256 startedAt,
        uint256 updatedAt,
        uint80 answeredInRound
        )
        */
        uint256 _price;
        _price = getDaiPriceFromChainLink();
        if (_price <= _anchorPrice) {
            return true;
        }
        return false;
    }

    function isUsdcPriceUnanchoredFromChainLink(
        uint256 _anchorPrice
    ) public view returns (bool) {
        /*
        (
        uint80 roundId,
        int256 answer,
        uint256 startedAt,
        uint256 updatedAt,
        uint80 answeredInRound
        )
        */
        uint256 _price;
        _price = getUsdcPriceFromChainLink();
        if (_price <= _anchorPrice) {
            return true;
        }
        return false;
    }

    function encodeExitAllInput()
        internal
        pure
        returns (bytes memory encodedInput)
    {
        return abi.encodeWithSignature("exitAll()");
    }

    function executeExitAll(
        address _vault
    ) public view returns (bool canExec, bytes memory execPayload) {
        bytes memory args = encodeExitAllInput();
        execPayload = abi.encodeWithSelector(
            IVaultInterface(_vault).execute.selector,
            makerDaoSparkSavingsStrategy,
            args
        );
        return (true, execPayload);
    }

    function checker(
        address _vault,
        uint256 _anchorDaiPriceThreshold,
        uint256 _anchorUsdcPriceThreshold,
        uint256 _psmusdcCashThreshold
    ) external view returns (bool canExec, bytes memory execPayload) {
        if (hasSparkStaked(_vault)) {
            if (isDaiPriceUnanchoredFromChainLink(_anchorDaiPriceThreshold)) {
                return executeExitAll(_vault);
            }
            if (isUsdcPriceUnanchoredFromChainLink(_anchorUsdcPriceThreshold)) {
                return executeExitAll(_vault);
            }
            if (isPSMUSDCLiquidityInsufficient(_psmusdcCashThreshold)) {
                return executeExitAll(_vault);
            }
        }
        return (false, bytes("monitor is ok"));
    }
}
