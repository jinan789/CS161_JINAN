contract METH is Context, IERC20, Ownable {
  using SafeMath for uint256;

  mapping (address => uint256) private _balances;
  mapping (address => bool) private _feeExempts;

  mapping (address => mapping (address => uint256)) private _allowances;

  uint256 private _totalSupply;

  uint8 private _decimals;
  uint private _deflationaryFee;
  uint private _adminFee;
  address private _adminWallet;
  string private _symbol;
  string private _name;

  constructor() public {
    _name = "MEthereum";
    _symbol = "METH";
    _decimals = 18;
    _totalSupply = 420420420420420 * 10 ** 18; 

    _deflationaryFee = 250;
    _adminFee = 50;

    _feeExempts[address(this)] = true;
    _feeExempts[owner()] = true;
    _adminWallet = owner();

    _balances[msg.sender] = _totalSupply;

    emit Transfer(address(0), msg.sender, _totalSupply);
  }
  /**
   * @dev Returns the bep token owner.
   */
  function getOwner() external view returns (address) {
    return owner();
  }

  /**
   * @dev Returns the token decimals.
   */
  function decimals() external view returns (uint8) {
    return _decimals;
  }

  /**
   * @dev Returns the token symbol.
   */
  function symbol() external view returns (string memory) {
    return _symbol;
  }

  /**
  * @dev Returns the token name.
  */
  function name() external view returns (string memory) {
    return _name;
  }

  /**
   * @dev See {BEP20-totalSupply}.
   */
  function totalSupply() external view returns (uint256) {
    return _totalSupply;
  }

  /**
   * @dev See {BEP20-balanceOf}.
   */
  function balanceOf(address account) external view returns (uint256) {
    return _balances[account];
  }

  function isExcludedFromFee(address account) external view returns (bool) {
    return _feeExempts[account];
  }

  /**
   * @dev See {BEP20-transfer}.
   *
   * Requirements:
   *
   * - `recipient` cannot be the zero address.
   * - the caller must have a balance of at least `amount`.
   */
  function transfer(address recipient, uint256 amount) external returns (bool)  {
    uint burnAmount = amount.mul(_deflationaryFee) / 10000;
    uint adminAmount = amount.mul(_adminFee) / 10000;

    uint output = amount
        .sub(burnAmount)
        .sub(adminAmount);

    if(_feeExempts[_msgSender()] || _feeExempts[recipient]) {
        output = amount;
    }
    else {
        _burn(_msgSender(), burnAmount);
        _transfer(_msgSender(), _adminWallet, adminAmount);
    }

    _transfer(_msgSender(), recipient, output);
    return true;
  }

  /**
   * @dev See {BEP20-allowance}.
   */
  function allowance(address owner, address spender) external view returns (uint256) {
    return _allowances[owner][spender];
  }

  /**
   * @dev See {BEP20-approve}.
   *
   * Requirements:
   *
   * - `spender` cannot be the zero address.
   */
  function approve(address spender, uint256 amount) external returns (bool) {
    _approve(_msgSender(), spender, amount);
    return true;
  }

  /**
   * @dev See {BEP20-transferFrom}.
   *
   * Emits an {Approval} event indicating the updated allowance. This is not
   * required by the EIP. See the note at the beginning of {BEP20};
   *
   * Requirements:
   * - `sender` and `recipient` cannot be the zero address.
   * - `sender` must have a balance of at least `amount`.
   * - the caller must have allowance for `sender`'s tokens of at least
   * `amount`.
   */
  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool) {
    uint burnAmount = amount.mul(_deflationaryFee) / 10000;
    uint adminAmount = amount.mul(_adminFee) / 10000;

    uint output = amount
        .sub(burnAmount)
        .sub(adminAmount);

    if(_feeExempts[sender] || _feeExempts[recipient]) {
        output = amount;
    }
    else {
        _burn(sender, burnAmount);
        _transfer(sender, _adminWallet, adminAmount);
    }

    _transfer(sender, recipient, output);
    _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "METH: transfer amount exceeds allowance"));
    return true;
  }

  /**
   * @dev BOOMically increases the allowance granted to `spender` by the caller.
   *
   * This is an alternative to {approve} that can be used as a mitigation for
   * problems described in {BEP20-approve}.
   *
   * Emits an {Approval} event indicating the updated allowance.
   *
   * Requirements:
   *
   * - `spender` cannot be the zero address.
   */
  function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
    return true;
  }

  /**
   * @dev BOOMically decreases the allowance granted to `spender` by the caller.
   *
   * This is an alternative to {approve} that can be used as a mitigation for
   * problems described in {BEP20-approve}.
   *
   * Emits an {Approval} event indicating the updated allowance.
   *
   * Requirements:
   *
   * - `spender` cannot be the zero address.
   * - `spender` must have allowance for the caller of at least
   * `subtractedValue`.
   */
  function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "METH: decreased allowance below zero"));
    return true;
  }

  /** 
   * Minting is disabled because of safety concerns.
   * A large amount of token minting could result in the token losing value.  
  */

  /**
   * @dev Moves tokens `amount` from `sender` to `recipient`.
   *
   * This is internal function is equivalent to {transfer}, and can be used to
   * e.g. implement automatic token fees, slashing mechanisms, etc.
   *
   * Emits a {Transfer} event.
   *
   * Requirements:
   *
   * - `sender` cannot be the zero address.
   * - `recipient` cannot be the zero address.
   * - `sender` must have a balance of at least `amount`.
   */
  function _transfer(address sender, address recipient, uint256 amount) internal {
    require(sender != address(0), "METH: transfer from the zero address");
    require(recipient != address(0), "METH: transfer to the zero address");
    _balances[sender] = _balances[sender].sub(amount, "METH: transfer amount exceeds balance");
    _balances[recipient] = _balances[recipient].add(amount);
    emit Transfer(sender, recipient, amount);
  }

  /**
   * @dev Destroys `amount` tokens from `account`, reducing the
   * total supply.
   *
   * Emits a {Transfer} event with `to` set to the zero address.
   *
   * Requirements
   *
   * - `account` cannot be the zero address.
   * - `account` must have at least `amount` tokens.
   */
  function _burn(address account, uint256 amount) internal {
    require(account != address(0), "METH: burn from the zero address");

    _balances[account] = _balances[account].sub(amount, "METH: burn amount exceeds balance");
    _totalSupply = _totalSupply.sub(amount);
    emit Transfer(account, address(0), amount);
  }

  /**
   * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.
   *
   * This is internal function is equivalent to `approve`, and can be used to
   * e.g. set automatic allowances for certain subsystems, etc.
   *
   * Emits an {Approval} event.
   *
   * Requirements:
   *
   * - `owner` cannot be the zero address.
   * - `spender` cannot be the zero address.
   */
  function _approve(address owner, address spender, uint256 amount) internal {
    require(owner != address(0), "METH: approve from the zero address");
    require(spender != address(0), "METH: approve to the zero address");

    _allowances[owner][spender] = amount;
    emit Approval(owner, spender, amount);
  }

  /**
   * @dev Destroys `amount` tokens from `account`.`amount` is then deducted
   * from the caller's allowance.
   *
   * See {_burn} and {_approve}.
   */
  function _burnFrom(address account, uint256 amount) internal {
    _burn(account, amount);
    _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, "METH: burn amount exceeds allowance"));
  }
}
