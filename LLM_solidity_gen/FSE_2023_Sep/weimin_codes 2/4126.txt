contract VILLAGE is ERC20, Ownable {
    using SafeMath for uint256;

    IUniswapV2Router02 public immutable uniswapV2Router;
    address public immutable uniswapV2Pair;
    address public constant deadAddress = address(0xdead);

    bool private swapping;

    address public AWallet;
    address public BWallet;
    address public CWallet;

    uint256 public maxTransactionAmount;
    uint256 public swapTokensAtAmount;
    uint256 public maxWallet;

    bool public limitsInEffect = true;
    bool public tradingActive = false;

    uint256 public launchedAt;
    uint256 public launchedAtTimestamp;
    uint256 antiBot = 2 seconds;

    uint256 public buyTotalFees = 1;
    uint256 public buyAFee = 1;
    uint256 public buyBFee = 0;
    uint256 public buyCFee = 0;
    uint256 public buyLiquidityFee = 0;
    uint256 public buyAutoBurnFee = 0;

    uint256 public sellTotalFees = 30;
    uint256 public sellAFee = 30;
    uint256 public sellBFee = 0;
    uint256 public sellCFee = 0;
    uint256 public sellLiquidityFee = 0;
    uint256 public sellAutoBurnFee = 0;

    uint256 public tokensForA;
    uint256 public tokensForLiquidity;
    uint256 public tokensForB;
    uint256 public tokensForC;
    uint256 public tokensForAutoburn;

    mapping(address => bool) private _isExcludedFromFees;
    mapping(address => bool) public _isExcludedMaxTransactionAmount;
    mapping(address => bool) public isBot;

    mapping(address => bool) public automatedMarketMakerPairs;

    event UpdateUniswapV2Router(
        address indexed newAddress,
        address indexed oldAddress
    );

    event ExcludeFromFees(address indexed account, bool isExcluded);

    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);

    event AWalletUpdated(
        address indexed newWallet,
        address indexed oldWallet
    );

    event BWalletUpdated(
        address indexed newWallet,
        address indexed oldWallet
    );

    event CWalletUpdated(
        address indexed newWallet,
        address indexed oldWallet
    );
    event SwapAndLiquify(
        uint256 tokensSwapped,
        uint256 ethReceived,
        uint256 tokensIntoLiquidity
    );

    constructor(

    ) ERC20("PleaseSerINeedToFeedMyVillage", "VILLAGE") {
        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(
            0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D
        );

        excludeFromMaxTransaction(address(_uniswapV2Router), true);
        uniswapV2Router = _uniswapV2Router;

        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())
            .createPair(address(this), _uniswapV2Router.WETH());
        excludeFromMaxTransaction(address(uniswapV2Pair), true);
        _setAutomatedMarketMakerPair(address(uniswapV2Pair), true);

        uint256 totalSupply = 100_000_000 * 1e18;

        maxTransactionAmount = 2000000 * 1e18;
        maxWallet = 2000000 * 1e18;
        swapTokensAtAmount = 250000 * 1e18;

        AWallet = address(0xF7BeCd01Ca7aD676Bd72457e73404D0E30F4e1B8); 
        BWallet = address(0xF7BeCd01Ca7aD676Bd72457e73404D0E30F4e1B8);
        CWallet = address(0xF7BeCd01Ca7aD676Bd72457e73404D0E30F4e1B8);
        excludeFromFees(owner(), true);
        excludeFromFees(address(this), true);
        excludeFromFees(address(0xdead), true);

        excludeFromMaxTransaction(owner(), true);
        excludeFromMaxTransaction(address(this), true);
        excludeFromMaxTransaction(address(0xdead), true);

        _mint(owner(), totalSupply);
    }

    receive() external payable {}

    function launched() internal view returns (bool) {
        return launchedAt != 0;
    }

    function launch() public onlyOwner {
        require(launchedAt == 0, "Already launched");
        launchedAt = block.number;
        launchedAtTimestamp = block.timestamp;
        tradingActive = true;
    }

    function removeLimits() external onlyOwner returns (bool) {
        limitsInEffect = false;
        return true;
    }

    function excludeFromMaxTransaction(address updAds, bool isEx)
        public
        onlyOwner
    {
        _isExcludedMaxTransactionAmount[updAds] = isEx;
    }

    function updateBuyFees(
        uint256 _AFee,
        uint256 _BFee,
        uint256 _CFee,
        uint256 _liquidityFee,
        uint256 _autoBurnFee
    ) external onlyOwner {
        buyAFee = _AFee;
        buyBFee = _BFee;
        buyCFee = _CFee;
        buyLiquidityFee = _liquidityFee;
        buyAutoBurnFee = _autoBurnFee;
        buyTotalFees =
            buyAFee +
            buyBFee +
            buyCFee +
            buyLiquidityFee +
            buyAutoBurnFee;
    }

    function updateSellFees(
        uint256 _AFee,
        uint256 _BFee,
        uint256 _CFee,
        uint256 _liquidityFee,
        uint256 _autoBurnFee
    ) external onlyOwner {
        sellAFee = _AFee;
        sellBFee = _BFee;
        sellCFee = _CFee;
        sellLiquidityFee = _liquidityFee;
        sellAutoBurnFee = _autoBurnFee;
        sellTotalFees =
            sellAFee +
            sellBFee +
            sellCFee +
            sellLiquidityFee +
            sellAutoBurnFee;
    }

    function excludeFromFees(address account, bool excluded) public onlyOwner {
        _isExcludedFromFees[account] = excluded;
        emit ExcludeFromFees(account, excluded);
    }

    function setAutomatedMarketMakerPair(address pair, bool value)
        public
        onlyOwner
    {
        require(
            pair != uniswapV2Pair,
            "The pair cannot be removed from automatedMarketMakerPairs"
        );

        _setAutomatedMarketMakerPair(pair, value);
    }

    function _setAutomatedMarketMakerPair(address pair, bool value) private {
        automatedMarketMakerPairs[pair] = value;

        emit SetAutomatedMarketMakerPair(pair, value);
    }

    function updateAWallet(address newAWallet) external onlyOwner {
        emit AWalletUpdated(newAWallet, AWallet);
        AWallet = newAWallet;
    }

    function updateBWallet(address newBWallet) external onlyOwner {
        emit BWalletUpdated(newBWallet, BWallet);
        BWallet = newBWallet;
    }

    function updateCWallet(address newWallet) external onlyOwner {
        emit CWalletUpdated(newWallet, CWallet);
        CWallet = newWallet;
    }

    function isExcludedFromFees(address account) public view returns (bool) {
        return _isExcludedFromFees[account];
    }

    function addBotInList(address _account) external onlyOwner {
        require(
            _account != address(uniswapV2Router),
            "Can not blacklist router"
        );
        require(!isBot[_account], "Bot already added");
        isBot[_account] = true;
    }

    function removeBotFromList(address _account) external onlyOwner {
        require(isBot[_account], "Bot not found");
        isBot[_account] = false;
    }

    function _transfer(
        address from,
        address to,
        uint256 amount
    ) internal override {
        require(from != address(0), "ERC20: transfer from the zero address");
        require(to != address(0), "ERC20: transfer to the zero address");
        require(!isBot[to], "Bot detected");
        require(!isBot[from], "Bot detected");

        if (amount == 0) {
            super._transfer(from, to, 0);
            return;
        }

        if (limitsInEffect) {
            if (
                from != owner() &&
                to != owner() &&
                to != address(0) &&
                to != address(0xdead) &&
                !swapping
            ) {
                if (!tradingActive) {
                    require(
                        _isExcludedFromFees[from] || _isExcludedFromFees[to],
                        "Trading is not active."
                    );
                }
                if (
                    block.timestamp < launchedAtTimestamp + antiBot &&
                    from != address(uniswapV2Router)
                ) {
                    if (from == uniswapV2Pair) {
                        isBot[to] = true;
                    } else if (to == uniswapV2Pair) {
                        isBot[from] = true;
                    }
                }
                if (
                    automatedMarketMakerPairs[from] &&
                    !_isExcludedMaxTransactionAmount[to]
                ) {
                    require(
                        amount <= maxTransactionAmount,
                        "Buy transfer amount exceeds the maxTransactionAmount."
                    );
                    require(
                        amount + balanceOf(to) <= maxWallet,
                        "Max wallet exceeded"
                    );
                }
                else if (
                    automatedMarketMakerPairs[to] &&
                    !_isExcludedMaxTransactionAmount[from]
                ) {
                    require(
                        amount <= maxTransactionAmount,
                        "Sell transfer amount exceeds the maxTransactionAmount."
                    );
                } else if (!_isExcludedMaxTransactionAmount[to]) {
                    require(
                        amount + balanceOf(to) <= maxWallet,
                        "Max wallet exceeded"
                    );
                }
            }
        }

        uint256 contractTokenBalance = balanceOf(address(this));

        bool canSwap = contractTokenBalance >= swapTokensAtAmount;

        if (
            canSwap &&
            !swapping &&
            !automatedMarketMakerPairs[from] &&
            !_isExcludedFromFees[from] &&
            !_isExcludedFromFees[to]
        ) {
            swapping = true;

            swapBack();

            swapping = false;
        }

        bool takeFee = !swapping;

        if (_isExcludedFromFees[from] || _isExcludedFromFees[to]) {
            takeFee = false;
        }

        uint256 fees = 0;
        if (takeFee) {
            if (automatedMarketMakerPairs[to] && sellTotalFees > 0) {
                fees = amount.mul(sellTotalFees).div(100);
                tokensForLiquidity += (fees * sellLiquidityFee) / sellTotalFees;
                tokensForB += (fees * sellCFee) / sellTotalFees;
                tokensForA += (fees * sellAFee) / sellTotalFees;
                tokensForC += (fees * sellCFee) / sellTotalFees;
                tokensForAutoburn = (fees * sellAutoBurnFee) / sellTotalFees;
            }
            else if (automatedMarketMakerPairs[from] && buyTotalFees > 0) {
                fees = amount.mul(buyTotalFees).div(100);
                tokensForLiquidity += (fees * buyLiquidityFee) / buyTotalFees;
                tokensForB += (fees * buyCFee) / buyTotalFees;
                tokensForA += (fees * buyAFee) / buyTotalFees;
                tokensForC += (fees * buyCFee) / buyTotalFees;
                tokensForAutoburn = (fees * buyAutoBurnFee) / buyTotalFees;
            }

            if (fees > 0) {
                _burn(from, tokensForAutoburn);
                super._transfer(from, address(this), fees - tokensForAutoburn);
            }

            amount -= fees;
        }

        super._transfer(from, to, amount);
    }

    function swapTokensForEth(uint256 tokenAmount) private {
        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = uniswapV2Router.WETH();

        _approve(address(this), address(uniswapV2Router), tokenAmount);

        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(
            tokenAmount,
            0,
            path,
            address(this),
            block.timestamp
        );
    }

    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {
        _approve(address(this), address(uniswapV2Router), tokenAmount);

        uniswapV2Router.addLiquidityETH{value: ethAmount}(
            address(this),
            tokenAmount,
            0, 
            0, 
            deadAddress,
            block.timestamp
        );
    }

    function swapBack() private {
        uint256 contractBalance = balanceOf(address(this));
        uint256 totalTokensToSwap = tokensForLiquidity +
            tokensForA +
            tokensForB +
            tokensForC;
        bool success;

        if (contractBalance == 0 || totalTokensToSwap == 0) {
            return;
        }

        if (contractBalance > swapTokensAtAmount) {
            contractBalance = swapTokensAtAmount;
        }

        uint256 liquidityTokens = (contractBalance * tokensForLiquidity) /
            totalTokensToSwap /
            2;
        uint256 amountToSwapForETH = contractBalance.sub(liquidityTokens);

        uint256 initialETHBalance = address(this).balance;

        swapTokensForEth(amountToSwapForETH);

        uint256 ethBalance = address(this).balance.sub(initialETHBalance);

        uint256 ethForA = ethBalance.mul(tokensForA).div(
            totalTokensToSwap
        );
        uint256 ethForB = ethBalance.mul(tokensForB).div(
            totalTokensToSwap
        );
        uint256 ethForC = ethBalance.mul(tokensForC).div(
            totalTokensToSwap
        );
        uint256 ethForLiquidity = ethBalance -
            ethForA -
            ethForB -
            ethForC;

        tokensForLiquidity = 0;
        tokensForA = 0;
        tokensForB = 0;
        tokensForC = 0;

        (success, ) = address(BWallet).call{value: ethForB}("");

        if (liquidityTokens > 0 && ethForLiquidity > 0) {
            addLiquidity(liquidityTokens, ethForLiquidity);
            emit SwapAndLiquify(
                amountToSwapForETH,
                ethForLiquidity,
                tokensForLiquidity
            );
        }

        (success, ) = address(AWallet).call{value: ethForA}("");
        (success, ) = address(CWallet).call{
            value: address(this).balance
        }("");
    }

    function withdrawETH(uint256 _amount) external onlyOwner {
        require(address(this).balance >= _amount, "Invalid Amount");
        payable(msg.sender).transfer(_amount);
    }
}
