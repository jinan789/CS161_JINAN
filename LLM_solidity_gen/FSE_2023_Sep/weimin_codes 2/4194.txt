contract Duel is Ownable {

    struct Game {
        uint256 revolverSize;
        uint256 minBet;

        // This is a SHA-256 hash of the random number generated by the bot.
        bytes32 hashedBulletChamberIndex;

        address[] players;
        uint256[] bets;

        bool inProgress;
        uint16 loser;
    }

    address public immutable Dead = 0x000000000000000000000000000000000000dEaD;

    address public revenueWallet;

    IERC20 public  bettingToken;
    
    uint256 public  minimumBet;

    uint256 public  revenueBps;

    uint256 public  burnBps;

    mapping(int64 => Game) public games;

    int64[] public activeTgGroups;

    event Bet(int64 tgChatId, address player, uint16 playerIndex, uint256 amount);

    event Win(int64 tgChatId, address player, uint16 playerIndex, uint256 amount);

    event Loss(int64 tgChatId, address player, uint16 playerIndex, uint256 amount);

    event Revenue(int64 tgChatId, uint256 amount);

    event Burn(int64 tgChatId, uint256 amount);

    constructor() {
        revenueWallet = 0xF21c708B656Bd87b3E31e53Ac3ed1ff5eb74b836;
        revenueBps = 800;
        burnBps = 200;
        minimumBet = 1000;
    }

    function isGameInProgress(int64 _tgChatId) public view returns (bool) {
        return games[_tgChatId].inProgress;
    }

    function removeTgId(int64 _tgChatId) internal {
        for (uint256 i = 0; i < activeTgGroups.length; i++) {
            if (activeTgGroups[i] == _tgChatId) {
                activeTgGroups[i] = activeTgGroups[activeTgGroups.length - 1];
                activeTgGroups.pop();
            }
        }
    }

    function setMin(uint256 _minimumBet, uint256 _revenueBps, uint256 _burnBps) external onlyOwner {
        minimumBet =  _minimumBet;
        revenueBps =_revenueBps;
        burnBps = _burnBps;
    }

    function setBetToken(address _contract) external onlyOwner {
        bettingToken = IERC20(_contract);
    }

    function updateRevenueWalelt(address _wallet) external onlyOwner {
        revenueWallet = _wallet;
    }

    function start(
        int64 _tgChatId,
        uint256 _revolverSize,
        uint256 _minBet,
        bytes32 _hashedBulletChamberIndex,
        address[] memory _players,
        uint256[] memory _bets) public onlyOwner  returns (uint256[] memory) {

        require(_revolverSize >= 2, "Revolver size too small");
        require(_players.length <= _revolverSize, "Too many players for this size revolver");
        require(_minBet >= minimumBet, "Minimum bet too small");
        require(_players.length == _bets.length, "Players/bets length mismatch");
        require(_players.length > 1, "Not enough players");
        require(!isGameInProgress(_tgChatId), "There is already a game in progress");

        uint256 betTotal = 0;
        for (uint16 i = 0; i < _bets.length; i++) {
            require(_bets[i] >= _minBet, "Bet is smaller than the minimum");
            betTotal += _bets[i];
        }
        for (uint16 i = 0; i < _bets.length; i++) {
            betTotal -= _bets[i];
            if (_bets[i] > betTotal) {
                _bets[i] = betTotal;
            }
            betTotal += _bets[i];

            require(bettingToken.allowance(_players[i], address(this)) >= _bets[i], "Not enough allowance");
            bool isSent = bettingToken.transferFrom(_players[i], address(this), _bets[i]);
            require(isSent, "Funds transfer failed");

            emit Bet(_tgChatId, _players[i], i, _bets[i]);
        }

        Game memory g;
        g.revolverSize = _revolverSize;
        g.minBet = _minBet;
        g.hashedBulletChamberIndex = _hashedBulletChamberIndex;
        g.players = _players;
        g.bets = _bets;
        g.inProgress = true;

        games[_tgChatId] = g;
        activeTgGroups.push(_tgChatId);

        return _bets;
    }

    function end(
        int64 _tgChatId,
        uint16 _loser,
        string[] calldata) public onlyOwner {
        require(_loser != type(uint16).max, "Loser index shouldn't be the sentinel value");
        require(isGameInProgress(_tgChatId), "No game in progress for this Telegram chat ID");

        Game storage g = games[_tgChatId];

        require(_loser < g.players.length, "Loser index out of range");
        require(g.players.length > 1, "Not enough players");

        g.loser = _loser;
        g.inProgress = false;
        removeTgId(_tgChatId);

        address[] memory winners = new address[](g.players.length - 1);
        uint16[] memory winnersPlayerIndex = new uint16[](g.players.length - 1);

        uint256 winningBetTotal = 0;

        {
            uint16 numWinners = 0;
            for (uint16 i = 0; i < g.players.length; i++) {
                if (i != _loser) {
                    winners[numWinners] = g.players[i];
                    winnersPlayerIndex[numWinners] = i;
                    winningBetTotal += g.bets[i];
                    numWinners++;
                }
            }
        }

        uint256 totalPaidWinnings = 0;
        require(burnBps + revenueBps < 10_1000, "Total fees must be < 100%");

        uint256 burnShare = g.bets[_loser] * burnBps / 10_000;

        uint256 approxRevenueShare = g.bets[_loser] * revenueBps / 10_000;

        bool isSent;
        {
            uint256 totalWinnings = g.bets[_loser] - burnShare - approxRevenueShare;

            for (uint16 i = 0; i < winners.length; i++) {
                uint256 winnings = totalWinnings * g.bets[winnersPlayerIndex[i]] / winningBetTotal;

                isSent = bettingToken.transfer(winners[i], g.bets[winnersPlayerIndex[i]] + winnings);
                require(isSent, "Funds transfer failed");

                emit Win(_tgChatId, winners[i], winnersPlayerIndex[i], winnings);

                totalPaidWinnings += winnings;
            }
        }

        bettingToken.transfer(Dead, burnShare);
        uint256 realRevenueShare = g.bets[_loser] - totalPaidWinnings - burnShare;
        isSent = bettingToken.transfer(revenueWallet, realRevenueShare);
        require(isSent, "Revenue transfer failed");
        emit Revenue(_tgChatId, realRevenueShare);
        require((totalPaidWinnings + burnShare + realRevenueShare) == g.bets[_loser], "Calculated winnings do not add up");
    }

     function endV2(
        int64 _tgChatId,
        uint16[] calldata _losers,
        uint16 _winner,
        string[] calldata _results
    ) public onlyOwner {
        require(isGameInProgress(_tgChatId), "No game in progress for this Telegram chat ID");

        Game storage g = games[_tgChatId];

        require(_losers.length + 1 == g.players.length, "Invalid number of losers and winner");
        require(_winner < g.players.length, "Winner index out of range");

        g.inProgress = false;
        removeTgId(_tgChatId);

        address[] memory loosers = new address[](_losers.length);

        uint256 winningBetTotal = g.bets[_winner];

      
        for (uint256 i = 0; i < _losers.length; i++) {
            loosers[i] = g.players[_losers[i]];
            winningBetTotal += g.bets[_losers[i]];
        }

        uint256 burnShare = winningBetTotal * burnBps / 10_000;
        uint256 approxRevenueShare = winningBetTotal * revenueBps / 10_000;
        uint256 totalWinnings = winningBetTotal - burnShare - approxRevenueShare;

        bool isSent;
        {
            isSent = bettingToken.transfer(g.players[_winner], totalWinnings);
            require(isSent, "Funds transfer failed");
        }
        
        bettingToken.transfer(Dead, burnShare);
        isSent = bettingToken.transfer(revenueWallet, approxRevenueShare);

        require(isSent, "Revenue transfer failed");
        emit Revenue(_tgChatId, approxRevenueShare);
        require(burnShare + approxRevenueShare + totalWinnings <= winningBetTotal, "Calculated winnings do not add up");
    }
    

    function abortGame(int64 _tgChatId) public onlyOwner {
        require(isGameInProgress(_tgChatId), "No game in progress for this Telegram chat ID");
        Game storage g = games[_tgChatId];

        for (uint16 i = 0; i < g.players.length; i++) {
            bool isSent = bettingToken.transfer(g.players[i], g.bets[i]);
            require(isSent, "Funds transfer failed");
        }

        g.inProgress = false;
        removeTgId(_tgChatId);
    }

  
    function abortAllGames() public onlyOwner {
        int64[] memory _activeTgGroups = activeTgGroups;
        for (uint256 i = 0; i < _activeTgGroups.length; i++) {
            abortGame(_activeTgGroups[i]);
        }
    }

     function emergencyWithdrawEther() external onlyOwner {
        (bool success, ) = revenueWallet.call{value: address(this).balance}("");
        require(success, "Withdraw failed");
    }
}
