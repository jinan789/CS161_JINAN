contract PONZI is ERC20, ERC20Burnable, Pausable, Ownable {
    using SafeMath for uint256;

    uint256 _totalSupply = 77777777;
    address public devWallet = 0xa83551179d2d559a015245307d0A12e9Df922EF6;

    // Initially set fees to 0
    uint256 public swapTreasuryFee    = 0;
    uint256 public buyFee             = 0;
    uint256 public sellFee            = 0;
    uint256 public feeDenominator     = 100;

    mapping (address => uint256) _balances;
    mapping (address => bool) isFeeExempt;

    constructor() ERC20("PonziTech", "PONZI") {
        _mint(msg.sender, 77777777 * 10 ** decimals());
    }

    function takeFee(address sender, uint256 amount, bool isSell) internal returns (uint256) {
        
        uint256 feeToTake;
        
        // Decide fee based on buy/sell action
        if (isSell) {
            feeToTake = sellFee;
        } else {
            feeToTake = buyFee;
        }
        
        uint256 feeAmount = amount.mul(feeToTake).div(feeDenominator);

        _balances[address(this)] = _balances[address(this)].add(feeAmount);
        _balances[sender] = _balances[sender].sub(feeAmount);

        emit Transfer(sender, address(this), feeAmount);

        return amount.sub(feeAmount);
    }

    function setSwapFees(uint256 _newSwapTreasuryFee, uint256 _newBuyFee, uint256 _newSellFee, uint256 _feeDenominator) external onlyOwner() {
        require(_newSwapTreasuryFee.add(_newBuyFee).add(_newSellFee) < feeDenominator, "Total fees cannot be more than 100%");
        
        swapTreasuryFee = _newSwapTreasuryFee;
        buyFee = _newBuyFee;
        sellFee = _newSellFee;
        feeDenominator = _feeDenominator;
    }

    function setTreasuryFeeReceiver(address _newWallet) external onlyOwner() {
        devWallet = _newWallet;
    }
}
