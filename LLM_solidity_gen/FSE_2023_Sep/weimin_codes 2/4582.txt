contract SpaceVault is  IVault,
                        WrapedTokenDeployer,
                        ReentrancyGuard,
                        OnlyGovernance, 
                        OnlyBridge
{
    using SafeERC20 for IERC20;

    event Deposit(
        address indexed token,
        address indexed sender,
        uint256 amount
    );

    event Burn(
        address indexed token,
        address indexed sender,
        uint256 amount
    );

    event Withdraw(
        address indexed sender,
        address indexed token,
        address indexed to,
        uint256 amount
    );

    event Mint(
        address token_address,
        address dst_address,
        uint256 amount
    );

    address public bridge;
    
    function deposit(
        address token,
        address from,
        uint256 amount
    ) nonReentrant onlyBridge external override {
        IERC20(token).safeTransferFrom(from, address(this), amount);
        emit Deposit(from, token, amount);
    }

    function withdraw(
        address token,
        address to,
        uint256 amount
    ) nonReentrant onlyBridge external override {
        require(IERC20(token).balanceOf(address(this)) > amount, "Vault token balance to low");
        IERC20(token).safeTransfer(to, amount);
        emit Withdraw(msg.sender, token, to, amount);
    }

    function deploy(
        string memory name,
        string memory symbol,
        uint256 origin,
        bytes memory origin_hash,
        uint8 origin_decimals
    ) nonReentrant onlyBridge external override returns(address){
        return _deploy(name, symbol, origin, origin_hash, origin_decimals);
    }

    function mint(
        address token_address,
        address to,
        uint256 amount
    ) nonReentrant onlyBridge external override {
        WrapedToken(token_address).mint(to, amount);
        emit Mint(token_address, to, amount);
    }

    function burn(
        address token,
        address from,
        uint256 amount
    ) nonReentrant onlyBridge external override {
        ERC20Burnable(token).burnFrom(from, amount); 
        emit Burn(from, token, amount);
    }

    function tokenTransferOwnership(address token, address new_vault) nonReentrant onlyGovernance external {
        WrapedToken(token).transferOwnership(new_vault);
    }

    /**
     * @notice Balance of token in vault.
     */
    function getBalance(IERC20 token) external view returns (uint256) {
        return token.balanceOf(address(this));
    }

    /**
     * @notice Removes tokens accidentally sent to this vault.
     */
    function sweep(
        address token,
        uint256 amount,
        address to
    ) onlyGovernance external {
        IERC20(token).safeTransfer(to, amount);
    }
}
