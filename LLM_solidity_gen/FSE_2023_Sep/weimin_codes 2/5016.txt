contract SnifferSwap is Proprietorship, AntiReentry {
    ERC20Blueprint oldSnifferToken;
    ERC20Blueprint newSnifferToken;
    uint stage = 0;

    // Constructor sets the initial addresses of the old and new Sniffer tokens.
    constructor() {
        oldSnifferToken = ERC20Blueprint(address(0x68E47eeCFd76fd289fa0CF4B25009c7e00E10bA6)); // Old Sniffer Token address
        newSnifferToken = ERC20Blueprint(address(0x7592b42b15aBEea1FEB767AfA727952C23e1aF38)); // New Sniffer Token address
    }

    // Receives Ether.
    receive() external payable {}

    // Stage 1 - users deposit old Sniffer tokens to receive new ones.
    function claim(uint oldSnifferTokenQty) external nonReentry {
        require(stage != 0, "Migration not initialized.");
        require(stage == 1, "Stage 1 of migration has concluded.");
        uint userHoldings = oldSnifferToken.balanceOf(msg.sender);
        require(userHoldings >= oldSnifferTokenQty, "Insufficient old Sniffer tokens.");
        uint contractNewSnifferTokenReserve = newSnifferToken.balanceOf(address(this));
        require(contractNewSnifferTokenReserve >= oldSnifferTokenQty, "Not enough new Sniffer tokens in the contract.");
        oldSnifferToken.transferFrom(msg.sender, address(this), oldSnifferTokenQty);
        newSnifferToken.transfer(msg.sender, oldSnifferTokenQty);
    }

    // Modify to adjust the token addresses.
    function adjustSnifferTokenAddresses(address oldTkn, address newTkn) external soleOwner {
        oldSnifferToken = ERC20Blueprint(oldTkn);
        newSnifferToken = ERC20Blueprint(newTkn);
    }

    // Modify to switch migration stage.
    function switchStage(uint _stage) external soleOwner {
        stage = _stage;
    }

    // Retrieve any token sent to this contract by mistake.
    function retrieveToken(address _tokenAddr, address _destination) external soleOwner {
        require(_tokenAddr != address(0), "Token address cannot be null.");
        uint256 contractReserve = ERC20Blueprint(_tokenAddr).balanceOf(address(this));
        ERC20Blueprint(_tokenAddr).transfer(_destination, contractReserve);
    }

    // Withdraw stranded Ether sent to this contract.
    function withdrawStrandedEther(address recipientAddr) external soleOwner {
        (bool success, ) = recipientAddr.call{value: address(this).balance}("");
        require(success);
    }
}
