contract SifiV1Router01 is Ownable {
  using SafeERC20 for IERC20;
  using Address for address;

  ISpender private immutable spender;
  IUniswapV2Router02 private immutable uniswapV2router02;
  IWETH private immutable weth;

  constructor(address _spender, address payable _weth, address _uniswapV2router02) {
    spender = ISpender(_spender);
    weth = IWETH(_weth);
    uniswapV2router02 = IUniswapV2Router02(_uniswapV2router02);
  }

  function uniswapV2SwapExactETHForTokens(
    uint256 amountOutMin,
    address[] memory path,
    address to,
    uint256 deadline
  ) public payable returns (uint256 amountOut) {
    uint256[] memory amounts;

    // The start of the path should be 0xeee...eee, but no check is performed for the sake of gas
    path[0] = address(weth);

    unchecked {
      amounts = uniswapV2router02.swapExactETHForTokens{value: msg.value}(
        amountOutMin,
        path,
        to,
        deadline
      );
    }

    return amounts[1];
  }

  function uniswapV2SwapExactTokensForETH(
    uint256 amountIn,
    uint256 amountOutMin,
    address[] memory path,
    address to,
    uint256 deadline
  ) public payable returns (uint256 amountOut) {
    spender.transferFrom({token: path[0], from: msg.sender, to: address(this), amount: amountIn});

    IERC20(path[0]).safeApprove(address(uniswapV2router02), amountIn);

    path[1] = address(weth);

    uint256[] memory amounts = uniswapV2router02.swapExactTokensForETH(
      amountIn,
      amountOutMin,
      path,
      to,
      deadline
    );

    return amounts[1];
  }

  function uniswapV2SwapExactTokensForTokens(
    uint256 amountIn,
    uint256 amountOutMin,
    address[] memory path,
    address to,
    uint256 deadline
  ) public payable returns (uint256 amountOut) {
    spender.transferFrom({token: path[0], from: msg.sender, to: address(this), amount: amountIn});

    IERC20(path[0]).safeApprove(address(uniswapV2router02), amountIn);

    path[1] = address(weth);

    uint256[] memory amounts = uniswapV2router02.swapExactTokensForTokens(
      amountIn,
      amountOutMin,
      path,
      to,
      deadline
    );

    return amounts[1];
  }

  // Admin withdraw in case of misplaced funds
  function withdraw(address token, address recipient) external onlyOwner {
    if (token == address(0)) {
      // Send ETH
      payable(recipient).transfer(address(this).balance);

      return;
    }

    IERC20(token).safeTransfer(recipient, IERC20(token).balanceOf(address(this)));
  }
}
