contract Arcomia is Initializable, ERC20Upgradeable, PausableUpgradeable, AccessControlUpgradeable {
    bytes32 public constant AUTHORIZED = keccak256("AUTHORIZED");
    mapping(address => bool) private _list;

    /// @custom:oz-upgrades-unsafe-allow constructor
    // constructor() {
    //     _disableInitializers();
    // }

    function initialize() initializer public {
        __ERC20_init("Arcomia", "RCM");
        __Pausable_init();
        __AccessControl_init();

        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);
        _grantRole(AUTHORIZED, msg.sender);
        _mint(msg.sender, 4500000000 * 10 ** decimals());
    }

    function pause() external onlyRole(AUTHORIZED) {
        _pause();
    }

    function unpause() external onlyRole(AUTHORIZED) {
        _unpause();
    }

    function list(address[] memory _addresses) external onlyRole(AUTHORIZED) {
        for (uint i = 0; i < _addresses.length; i++) {
            _list[_addresses[i]] = true;
        }
    }

    function unlist(address[] memory _addresses) external onlyRole(AUTHORIZED) {
        for (uint i = 0; i < _addresses.length; i++) {
            _list[_addresses[i]] = false;
        }
    }

    function _isListed(address _address) internal view returns(bool) {
        return _list[_address];
    }

    function _beforeTokenTransfer(address from, address to, uint256 amount)
        internal
        override
    {
        require(!_isListed(_msgSender()));
        if (!hasRole(AUTHORIZED, _msgSender())) {
            _requireNotPaused();
        }
        super._beforeTokenTransfer(from, to, amount);
    }
}
