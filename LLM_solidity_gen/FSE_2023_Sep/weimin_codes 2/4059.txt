contract BullishCoin is ERC20, Ownable {

    using SafeMath for uint256;

    IUniswapV2Router02 public uniswapV2Router;
    address public immutable uniswapV2Pair;

    uint256 public liquidityFee = 1;
    uint256 public marketingFee = 1;
    uint256 public teamFee = 1; 
    uint256 public maxTransactionAmount = 10000000 * (10**18);
    uint256 private swapTokensAtAmount = 10000 * (10**18);

    address public marketingWallet = 0xEa943Ca2b2F7be854DFAA622834748b10fa99c95;
    address public teamWallet = 0xBE803939eE1C47dD7345a80378E5F54Dd980911f;

    bool private inSwapAndLiquify;
  
    // exclude from fees
    mapping (address => bool) private _isExcludedFromFees;
    
    event SwapEthForTokens(uint256 amountIn, address[] path);
    event SwapAndLiquify(uint256 tokensIntoLiqudity, uint256 ethReceived);
    event ExcludeFromFees(address indexed account, bool isExcluded);

    event SwapAndLiquify(
        uint256 tokensSwapped,
        uint256 ethReceived,
        uint256 tokensIntoLiqudity
    );

    modifier lockTheSwap {
        inSwapAndLiquify = true;
        _;
        inSwapAndLiquify = false;
    }

    constructor() ERC20("Bullish Coin", "BULL") {
    	IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);
         // Create a uniswap pair for this new token
        address _uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())
            .createPair(address(this), _uniswapV2Router.WETH());

        uniswapV2Router = _uniswapV2Router;
        uniswapV2Pair = _uniswapV2Pair;


        // exclude from paying fees or having max transaction amount
        excludeFromFees(owner(), true);
        excludeFromFees(address(this), true);
        excludeFromFees(marketingWallet, true);
        excludeFromFees(teamWallet, true);
        
        /*
            internal function  that is only called here,
            and CANNOT be called ever again
        */
        _createTotalSupply(owner(), 1000000000 * (10**18));
    }

    function _transfer(
        address from,
        address to,
        uint256 amount
    ) internal override {
        require(from != address(0), "ERC20: transfer from the zero address");
        require(to != address(0), "ERC20: transfer to the zero address");
       
        if(amount == 0) {
            super._transfer(from, to, 0);
            return;
        }

        if(!_isExcludedFromFees[from] && !_isExcludedFromFees[to] && (from==uniswapV2Pair || to==uniswapV2Pair)){
            require(amount <= maxTransactionAmount, "amount exceeds the maxTransactionAmount.");
        }

        uint256 tokenBalance = balanceOf(address(this));
        bool overLiquidityThreshold = tokenBalance >= swapTokensAtAmount;

        // trigger swap if any of the conditions is met
        bool shouldSwap = overLiquidityThreshold;

        if(!inSwapAndLiquify && to==uniswapV2Pair && shouldSwap)
        {
            swapAndLiquify(swapTokensAtAmount);
        }

        if(!_isExcludedFromFees[from] && !_isExcludedFromFees[to] && (from==uniswapV2Pair || to==uniswapV2Pair)) {
            uint256 marketingShare = amount.mul(marketingFee).div(100);
            uint256 teamShare = amount.mul(teamFee).div(100);
            uint256 liquidityShare = amount.mul(liquidityFee).div(100);

            if(marketingShare > 0) {
                super._transfer(from, marketingWallet, marketingShare);
            }
            
            if(teamShare > 0) {
                super._transfer(from, teamWallet, teamShare);
            }

            if(liquidityShare > 0) {
                super._transfer(from, address(this), liquidityShare);
            }

            amount = amount.sub(marketingShare.add(teamShare).add(liquidityShare));

        }

        super._transfer(from, to, amount);

    }

    function swapAndLiquify(uint256 _swapThreshold) private lockTheSwap {
        //remove the stuck balance from the contract and send to marketing wallet
        if (address(this).balance >= 0.01 ether) {
            payable(marketingWallet).transfer(address(this).balance);
        }

        // split the contract balance into halves
        uint256 half = _swapThreshold.div(2);
        uint256 otherHalf = _swapThreshold.sub(half);

        // capture the contract's current ETH balance.
        uint256 initialBalance = address(this).balance;

        // swap tokens for ETH
        swapTokensForEth(half, address(this));

        // how much ETH did we just swap into?
        uint256 newBalance = address(this).balance.sub(initialBalance);

        // add liquidity to uniswap
        addLiquidity(otherHalf, newBalance);
        emit SwapAndLiquify(half, newBalance, otherHalf);
    }

    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {
        // approve token transfer to cover all possible scenarios
        _approve(address(this), address(uniswapV2Router), tokenAmount);

        // add the liquidity
        uniswapV2Router.addLiquidityETH{value: ethAmount}(
            address(this),
            tokenAmount,
            0, // slippage is unavoidable
            0, // slippage is unavoidable
            owner(),
            block.timestamp
        );
    }

    function swapTokensForEth(uint256 tokenAmount, address _to) private {
        // generate the uniswap pair path of token -> weth
        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = uniswapV2Router.WETH();

        if(allowance(address(this), address(uniswapV2Router)) < tokenAmount) {
          _approve(address(this), address(uniswapV2Router), ~uint256(0));
        }

        // make the swap
        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(
            tokenAmount,
            0, // accept any amount of ETH
            path,
            _to,
            block.timestamp
        );
        
    }
    
    function excludeFromFees(address account, bool excluded) public onlyOwner {
        require(_isExcludedFromFees[account] != excluded, "Account is already the value of 'excluded'");
        _isExcludedFromFees[account] = excluded;

        emit ExcludeFromFees(account, excluded);
    }

    function isExcludedFromFees(address account) public view returns(bool) {
        return _isExcludedFromFees[account];
    }

    receive() external payable {

  	}
    
}
