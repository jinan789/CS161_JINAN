contract Pets is ERC721Enumerable, Ownable {
  using Strings for uint256;

  string baseURI;
  string public baseExtension = ".json";
  uint256 public cost = 0.0099 ether;
  uint256 public maxSupply = 5000;
  uint256 private _giftedAmount = 0;
  uint256 public maxMintAmount = 5;
  bool public paused = false;
  bool public revealed = true;
  string public notRevealedUri;
  address private _lilverse;
  mapping(address => uint256) private _userMintedAmount;
  mapping(address => bool) public isUserGifted;
  mapping(uint256 => bool) public isTokenGifted;

  constructor(
    string memory _name,
    string memory _symbol,
    string memory _initBaseURI,
    string memory _initNotRevealedUri,
    address _lilverseAddress
  ) ERC721(_name, _symbol) {
    setBaseURI(_initBaseURI);
    setNotRevealedURI(_initNotRevealedUri);
    _lilverse = _lilverseAddress;
  }

  // internal
  function _baseURI() internal view virtual override returns (string memory) {
    return baseURI;
  }

  // public
  function mint(uint256 _mintAmount, uint256[] memory tokens) public payable {
    uint256 supply = totalSupply();
    uint256 _gift = 0;
    require(!paused);
    require(_mintAmount > 0, "Mint amount must be bigger, than 0");
    require(_mintAmount <= maxMintAmount, "Mint amount must be less or equal to 5");
    require(supply + _mintAmount <= maxSupply, "You are trying to mint more than available");
    
    if (msg.sender != owner()) {
      require(_userMintedAmount[msg.sender] + _mintAmount <= maxMintAmount, "You are trying to mint more than available per wallet");
      require(msg.value >= cost * _mintAmount, 'You have not sent enough ETH');
    }
    
    if (tokens.length > 0) {
      require(!isUserGifted[msg.sender], "You have already recieved a gift");
      
      for(uint256 i = 0; i < tokens.length; i++) {
        require(tokens[i] < NFTCollection(_lilverse).totalSupply(), "Token number are higher than total supply of Lilverse");
        require(NFTCollection(_lilverse).ownerOf(tokens[i]) == msg.sender, "You do not own one or more Lilverse NFTs, you have sent");
      }
      
      require(tokens.length == NFTCollection(_lilverse).balanceOf(msg.sender), "You have not passed all of your Lilverse NFT");

      for(uint256 i = 0; i < tokens.length; i++) {
        if (!isTokenGifted[tokens[i]]) {
          if (_mintAmount <= 2) {_gift = 1;}
          if (_mintAmount >= 3 && _mintAmount <= 4) {_gift = 2;}
          if (_mintAmount == 5) {_gift = 3;}
          break;
        }
      }

      for(uint256 i = 0; i < tokens.length; i++) {
        isTokenGifted[tokens[i]] = true;
      }
      
      isUserGifted[msg.sender] = true;
    }

    _userMintedAmount[msg.sender] += _mintAmount + _gift;

    for(uint256 i = 0; i < _mintAmount + _gift; i++) {
      _safeMint(msg.sender, supply + i);
    }
  }

  function walletOfOwner(address _owner)
    public
    view
    returns (uint256[] memory)
  {
    uint256 ownerTokenCount = balanceOf(_owner);
    uint256[] memory tokenIds = new uint256[](ownerTokenCount);
    for (uint256 i; i < ownerTokenCount; i++) {
      tokenIds[i] = tokenOfOwnerByIndex(_owner, i);
    }
    return tokenIds;
  }

  function tokenURI(uint256 tokenId)
    public
    view
    virtual
    override
    returns (string memory)
  {
    require(
      _exists(tokenId),
      "ERC721Metadata: URI query for nonexistent token"
    );
    
    if(revealed == false) {
      return notRevealedUri;
    }

    string memory currentBaseURI = _baseURI();
    return bytes(currentBaseURI).length > 0
      ? string(abi.encodePacked(currentBaseURI, tokenId.toString(), baseExtension))
      : "";
  }

  //only owner
  function reveal() public onlyOwner {
    revealed = true;
  }
  
  function setCost(uint256 _newCost) public onlyOwner {
    cost = _newCost;
  }

  function setmaxMintAmount(uint256 _newmaxMintAmount) public onlyOwner {
    maxMintAmount = _newmaxMintAmount;
  }
  
  function setNotRevealedURI(string memory _notRevealedURI) public onlyOwner {
    notRevealedUri = _notRevealedURI;
  }

  function setBaseURI(string memory _newBaseURI) public onlyOwner {
    baseURI = _newBaseURI;
  }

  function setBaseExtension(string memory _newBaseExtension) public onlyOwner {
    baseExtension = _newBaseExtension;
  }

  function pause(bool _state) public onlyOwner {
    paused = _state;
  }
 
  function withdraw() public payable onlyOwner {    
    // This will payout the owner 100% of the contract balance.
    // Do not remove this otherwise you will not be able to withdraw the funds.
    // =============================================================================
    (bool os, ) = payable(owner()).call{value: address(this).balance}("");
    require(os);
    // =============================================================================
  }
}
