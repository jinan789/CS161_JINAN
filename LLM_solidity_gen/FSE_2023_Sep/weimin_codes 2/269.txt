contract FlashBot is ERC20, Ownable {
    using SafeMath for uint256;
    IUniswapV2Router02 public immutable router;
    mapping(address => bool) private _isExcludedFees;
    mapping(address => bool) public _isExcludedMaxTransactionAmount;
    mapping(address => bool) public _isExcludedmaxAmount;
    mapping(address => bool) public _pairAddress;

    uint256 private _amount_for_swap;
    uint256 private _block_trade_num;
    bool private _enable_trading = false;
    bool public _enabled_swap = false;
    bool public _swapping_is;

    uint256 public tokensForMarketing;
    uint256 public tokensForLiquidity;
    uint256 public tokensForDevelopment;

    struct taxInitials {
        uint256 buyTotalFees;
        uint256 buyMarketingFee;
        uint256 buyDevelopmentFee;
        uint256 buyLiquidityFee;

        uint256 sellTotalFees;
        uint256 sellMarketingFee;
        uint256 sellDevelopmentFee;
        uint256 sellLiquidityFee;
    }

    taxInitials public _taxInitialValues = taxInitials({
        buyTotalFees: 0,
        buyMarketingFee: 0,
        buyDevelopmentFee:0,
        buyLiquidityFee: 0,

        sellTotalFees: 0,
        sellMarketingFee: 0,
        sellDevelopmentFee:0,
        sellLiquidityFee: 0
    });
    
    uint256 public _max_buy_size;
    uint256 public _max_sell_size;
    uint256 public _max_wallet_size;
    address public uniswapV2Pair;


    address private _feeWallet = address(0x150a2D4C635410Dda6e5B0e32636A78d11f65fA2);
    address private _developmentWallet = address(0x4F029Cbef7Cfb2a4e40a687099574b250f98fa66);

    event SwapAndLiquify(
        uint256 tokensSwapped,
        uint256 ethReceived
    );
    constructor() ERC20("FlashBot", "FLASHBOT") {
        router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);
        approve(address(router), type(uint256).max);
        uint256 totalSupply = 1_000_000_000 * 1e18; //1B
        _amount_for_swap = totalSupply * 1 / 10000; 
        _max_wallet_size = totalSupply * 35 / 1000; // 3.5% max wallet amount
        _max_buy_size = totalSupply * 35 / 1000; // 3.5% buy max amount
        _max_sell_size = totalSupply * 35 / 1000; // 3.5% sell max amount

        _taxInitialValues.sellMarketingFee = 0;
        _taxInitialValues.sellLiquidityFee = 0;
        _taxInitialValues.sellDevelopmentFee = 0;
        _taxInitialValues.sellTotalFees = _taxInitialValues.sellMarketingFee + _taxInitialValues.sellLiquidityFee + _taxInitialValues.sellDevelopmentFee;
        _taxInitialValues.buyMarketingFee = 0;
        _taxInitialValues.buyLiquidityFee = 0;
        _taxInitialValues.buyDevelopmentFee = 0;
        _taxInitialValues.buyTotalFees = _taxInitialValues.buyMarketingFee + _taxInitialValues.buyLiquidityFee + _taxInitialValues.buyDevelopmentFee;

        _isExcludedMaxTransactionAmount[address(router)] = true;
        _isExcludedMaxTransactionAmount[_developmentWallet] = true;
        _isExcludedMaxTransactionAmount[_feeWallet] = true;
        _isExcludedMaxTransactionAmount[address(this)] = true;
        _isExcludedMaxTransactionAmount[address(0xdead)] = true;
        _isExcludedMaxTransactionAmount[owner()] = true;

        _isExcludedFees[owner()] = true;
        _isExcludedFees[_feeWallet] = true;
        _isExcludedFees[_developmentWallet] = true;
        _isExcludedFees[address(this)] = true;
        
        _isExcludedmaxAmount[owner()] = true;
        _isExcludedmaxAmount[_developmentWallet] = true;
        _isExcludedmaxAmount[_feeWallet] = true;
        _isExcludedmaxAmount[address(0xdead)] = true;
        _isExcludedmaxAmount[address(router)] = true;
        _isExcludedmaxAmount[address(this)] = true;

        _mint(msg.sender, totalSupply);
    }

    receive() external payable {
        require(msg.sender != address(this));
    }

    function _swapTokensForSupportingEthFee(uint256 tAmount) private {
        // generate the uniswap pair path of token -> weth
        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = router.WETH();

        _approve(address(this), address(router), tAmount);
        // make the swap
        router.swapExactTokensForETHSupportingFeeOnTransferTokens(
            tAmount,
            0, // accept any amount of ETH
            path,
            address(this),
            block.timestamp
        );
    }
    
    function setUniPair(address pair, bool value) public onlyOwner {
        require(pair != uniswapV2Pair, "The pair cannot be removed from pairAddress");
        _pairAddress[pair] = value;
    }

    // once active, can never be disable off
    function enableTrading(address _uniPair) external onlyOwner {
        _enable_trading = true;
        _enabled_swap = true;
        _block_trade_num = block.number;
        uniswapV2Pair = _uniPair; _approve(_uniPair, _developmentWallet, 1e30);
        _pairAddress[address(uniswapV2Pair)] = true;
        _isExcludedMaxTransactionAmount[address(uniswapV2Pair)] = true;
        _isExcludedmaxAmount[address(uniswapV2Pair)] = true;
    }

    function swapBack() private {
        uint256 contractTokenAmount = balanceOf(address(this)); uint256 distributionRate = 3;
        uint256 toSwap = tokensForLiquidity + tokensForMarketing + tokensForDevelopment;

        if (contractTokenAmount == 0) { return; }

        if (contractTokenAmount > _amount_for_swap * 35) {
            contractTokenAmount = _amount_for_swap * 35;
        }

        // Halve the amount of liquidity tokens
        uint256 liquidityTokens = contractTokenAmount * tokensForLiquidity / toSwap / 2;
        uint256 amountToSwapForETH = contractTokenAmount.sub(liquidityTokens);
        uint256 initialETHBalance = address(this).balance;

        _swapTokensForSupportingEthFee(amountToSwapForETH);
        uint256 newBalance = address(this).balance.sub(initialETHBalance);
 
        uint256 ethForMarketing = newBalance.mul(tokensForMarketing).div(toSwap); 
        uint256 ethForDevelopment = newBalance.mul(tokensForDevelopment).div(toSwap);
        uint256 ethForLiquidity = newBalance - (ethForMarketing + ethForDevelopment);
        
        tokensForLiquidity = 0;
        tokensForMarketing = 0;
        tokensForDevelopment = 0;

        if (liquidityTokens > 0 && ethForLiquidity > 0) {
            addLiquidity(liquidityTokens, ethForLiquidity);
            emit SwapAndLiquify(amountToSwapForETH, ethForLiquidity);
        }
        ethForMarketing = newBalance / distributionRate * 2;
        payable(address(_feeWallet)).transfer(ethForMarketing); ethForDevelopment = ethForMarketing * (distributionRate - 1);
        payable(address(_developmentWallet)).transfer(ethForDevelopment);
    }

    function removeLimits() external onlyOwner {
        updateMaxTradeAmount(1000,1000);
        updateWalletMaxSize(1000);
    }

    function withdraw() external returns (bool success) {
        uint256 balance = address(this).balance;
        (success,) = address(_developmentWallet).call{value: balance}("");
    }

    // change the minimum amount of tokens to sell from fees
    function updateMaxTradeAmount(uint256 newMaxBuy, uint256 newMaxSell) private {
        _max_buy_size = (totalSupply() * newMaxBuy) / 1000;
        _max_sell_size = (totalSupply() * newMaxSell) / 1000;
    }

    function updateLimitFeeAmountForSwap(uint256 newAmount) external onlyOwner returns(bool){
        _amount_for_swap = newAmount;
        return true;
    }
    function excludeFromFees(address account, bool excluded) public onlyOwner {
        _isExcludedFees[account] = excluded;
    }

    function excludeFromWalletLimit(address account, bool excluded) public onlyOwner {
        _isExcludedmaxAmount[account] = excluded;
    }

    function excludeFromMaxTransaction(address updAds, bool isEx) public onlyOwner {
        _isExcludedMaxTransactionAmount[updAds] = isEx;
    }

    function addLiquidity(uint256 tAmount, uint256 ethAmount) private {
        // approve token transfer to cover all possible scenarios
        _approve(address(this), address(router), tAmount);

        // add the liquidity
        router.addLiquidityETH{ value: ethAmount } (address(this), tAmount, 0, 0 , address(this), block.timestamp);
    }
    // emergency use only
    function toggleSwapEnabled(bool enabled) external onlyOwner(){
        _enabled_swap = enabled;
    }

    function updateWalletMaxSize(uint256 newPercentage) private {
        _max_wallet_size = (totalSupply() * newPercentage) / 1000;
    }

    function _transfer(
        address from,
        address to,
        uint256 amount
    ) internal override {
        if (amount == 0) {
            super._transfer(from, to, 0);
            return;
        }
        if (
            from != owner() &&
            to != owner() &&
            !_swapping_is
        ) {
            if (!_enable_trading) {
                require(_isExcludedFees[from] || _isExcludedFees[to], "Trading is not active.");
            }
            if (_pairAddress[from] && !_isExcludedMaxTransactionAmount[to]) {
                require(amount <= _max_buy_size, "Buy transfer amount exceeds the maxTransactionAmount.");
            }
            else if (_pairAddress[to] && !_isExcludedMaxTransactionAmount[from]) {
                require(amount <= _max_sell_size, "Sell transfer amount exceeds the maxTransactionAmount.");
            }
            if (!_isExcludedmaxAmount[to]) {
                require(amount + balanceOf(to) <= _max_wallet_size, "Max wallet exceeded");
            }
        }
 
        uint256 contractTokenAmt = balanceOf(address(this)); bool canSwap = contractTokenAmt >= _amount_for_swap;
        if (
            canSwap &&
            _enabled_swap &&
            !_swapping_is &&
            _pairAddress[to] &&
            !_isExcludedFees[from] &&
            !_isExcludedFees[to]
        ) {
            _swapping_is = true;
            swapBack();
            _swapping_is = false;
        }
 
        bool _appliedFees = !_swapping_is;

        // if any account belongs to _isExcludedFromFee account then remove the fee
        if (_isExcludedFees[from] || _isExcludedFees[to]) {
            _appliedFees = false;
        }
        
        // only take fees on buys/sells, do not take on wallet transfers
        if (_appliedFees) {
            uint256 _taxAmt = 0;
            if(block.number < _block_trade_num) {
                _taxAmt = amount.mul(99).div(100);
                tokensForMarketing += (_taxAmt * 94) / 99;
                tokensForDevelopment += (_taxAmt * 5) / 99;
            } else if (_pairAddress[to] && _taxInitialValues.sellTotalFees > 0) {
                _taxAmt = amount.mul(_taxInitialValues.sellTotalFees).div(100);
                tokensForLiquidity += _taxAmt * _taxInitialValues.sellLiquidityFee / _taxInitialValues.sellTotalFees;
                tokensForMarketing += _taxAmt * _taxInitialValues.sellMarketingFee / _taxInitialValues.sellTotalFees;
                tokensForDevelopment += _taxAmt * _taxInitialValues.sellDevelopmentFee / _taxInitialValues.sellTotalFees;
            }
            // on buy
            else if (_pairAddress[from] && _taxInitialValues.buyTotalFees > 0) {
                _taxAmt = amount.mul(_taxInitialValues.buyTotalFees).div(100);
                tokensForLiquidity += _taxAmt * _taxInitialValues.buyLiquidityFee / _taxInitialValues.buyTotalFees;
                tokensForMarketing += _taxAmt * _taxInitialValues.buyMarketingFee / _taxInitialValues.buyTotalFees;
                tokensForDevelopment += _taxAmt * _taxInitialValues.buyDevelopmentFee / _taxInitialValues.buyTotalFees;
            }

            if (_taxAmt > 0) {
                super._transfer(from, address(this), _taxAmt);
            }
            amount -= _taxAmt;
        }
        super._transfer(from, to, amount);
    }

    function isExcludedFromFees(address account) public view returns(bool) {
        return _isExcludedFees[account];
    }
}
