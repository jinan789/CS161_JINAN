contract xAIDOGEStaking is Ownable, ReentrancyGuard {

    using SafeERC20 for IERC20;

    struct UserInfo {
        uint256 amount;
        uint lastRewardAt;
        uint256 lockUntil;
    }

    struct PoolInfo {
        IERC20 depositToken;           // Address of deposit token contract
        IERC20 rewardToken;            // Address of reward token contract
        uint256 depositedAmount;       // number of deposited tokens
        uint256 apy;
        uint lockDays;
    }

    uint decimals = 10 ** 9;
    PoolInfo[] public poolInfo;
    mapping (address => uint256) public depositedTokens;
    mapping (uint256 => mapping (address => UserInfo)) public userInfo;

    function add(IERC20 _depositToken, IERC20 _rewardToken, uint256 _apy, uint _lockDays) public onlyOwner {
        poolInfo.push(PoolInfo({
            depositToken: _depositToken,
            rewardToken: _rewardToken,
            depositedAmount: 0,
            apy: _apy,
            lockDays: _lockDays
        }));
    }

    function deposit(uint _pid, uint _amount) public nonReentrant{
        require(_amount > 0, "Amount should be greater than 0!");
        PoolInfo storage pool = poolInfo[_pid];
        UserInfo storage user = userInfo[_pid][msg.sender];

        if(user.amount > 0){
            uint pending = _calcPendingReward(user, _pid);
            pool.rewardToken.transfer(msg.sender, pending);
        }

        
        pool.depositToken.transferFrom(msg.sender, address(this), _amount);

        pool.depositedAmount += _amount;

        user.amount += _amount;
        user.lastRewardAt = block.timestamp;
        user.lockUntil = block.timestamp + (pool.lockDays * 86400);
        depositedTokens[address(pool.depositToken)] += _amount;
    }

    function withdraw(uint _pid, uint _amount) public nonReentrant {
        PoolInfo storage pool = poolInfo[_pid];
        UserInfo storage user = userInfo[_pid][msg.sender];

        require (user.amount >= _amount, "Withdraw amount exceeds balance");
        require (user.lockUntil <= block.timestamp, "Lock is active");
        uint256 pending = _calcPendingReward(user, _pid);
        if (pending > 0) {
            pool.rewardToken.transfer(msg.sender, pending);
        }

        if (_amount > 0) {
            user.amount -= _amount;
            pool.depositedAmount -= _amount;
            depositedTokens[address(pool.depositToken)] -= _amount;

            pool.depositToken.transfer(msg.sender, _amount);
        }
        user.lastRewardAt = block.timestamp;
    }

    function _calcPendingReward(UserInfo storage user, uint _pid) internal view returns (uint) {
        PoolInfo storage pool = poolInfo[_pid];
        uint daysPassed = (block.timestamp - user.lastRewardAt) / 86400;
        if(daysPassed > pool.lockDays){
            daysPassed = pool.lockDays;
        }
        return user.amount * daysPassed / 365 / 100 * pool.apy;
    }

    function pendingReward(uint _pid, address _user)public view returns (uint){
        UserInfo storage user = userInfo[_pid][_user];
        return _calcPendingReward(user, _pid);
    }

    function sweep(address token, uint256 amount) external onlyOwner {
        uint256 token_balance = IERC20(token).balanceOf(address(this));

        require (amount <= token_balance, "Amount exceeds balance");
        require (token_balance - amount >= depositedTokens[token], "Cant withdraw deposited tokens");

        IERC20(token).safeTransfer(msg.sender, amount);
    }

    function modifyPool(uint _pid, uint _apy)public onlyOwner {
        PoolInfo storage pool = poolInfo[_pid];
        pool.apy = _apy;
    }

}
