contract ERC721NFT is Ownable, ERC721A, ReentrancyGuard {
    bool public publicSale = true;
    uint256 public maxToken = 200;
    uint256 public start_price = 0.1 ether;
    uint256 public price_step  = 0.1 ether;
    uint256 public count_per_step  = 20;
    string private _baseTokenURI;

    constructor(string memory _NAME, string memory _SYMBOL, string memory baseTokenURI)
        ERC721A(_NAME, _SYMBOL, 1000, maxToken)
    {
        _baseTokenURI = baseTokenURI;
    }

    function tokensOfOwner(address _owner) external view returns(uint256[] memory) {
        uint tokenCount = balanceOf(_owner);
        uint256[] memory tokensId = new uint256[](tokenCount);
        for(uint i = 0; i < tokenCount; i++){
            tokensId[i] = tokenOfOwnerByIndex(_owner, i);
        }
        return tokensId;
    }

    function getCurrentPrice(uint256 _count) public view returns (uint256) {
        uint256 count_steps;
        uint256 remainder; 
        uint256 total_price;
        remainder = totalSupply() % count_per_step;
        count_steps =  (totalSupply() - remainder ) / count_per_step;
        if (_count > (count_per_step - remainder)) {            
            total_price = (count_per_step - remainder) * (start_price + count_steps * price_step);
            total_price += (_count - (count_per_step - remainder)) * (start_price + (count_steps +1) * price_step);
        } else {
            total_price = _count * (start_price + count_steps * price_step);
        }
        return total_price;
    }

    function mint(uint256 quantity, address _to) external payable callerIsUser {
        require(publicSale, "SALE_HAS_NOT_STARTED_YET");
        require(quantity > 0, "INVALID_QUANTITY");
        require(quantity <= count_per_step, "CANNOT_MINT_THAT_MANY");
        require(totalSupply() + quantity <= maxToken, "NOT_ENOUGH_SUPPLY_TO_MINT_DESIRED_AMOUNT");
        require(msg.value >= getCurrentPrice(quantity) || msg.sender == owner() , "Value below price");
        _safeMint(_to, quantity);
    }

    modifier callerIsUser() {
        require(tx.origin == msg.sender, "The caller is another contract");
        _;
    }
    function numberMinted(address owner) public view returns (uint256) {
        return _numberMinted(owner);
    }
    function getOwnershipData(uint256 tokenId)
        external
        view
        returns (TokenOwnership memory)
    {
        return ownershipOf(tokenId);
    }
    function tokenURI(uint256 tokenId)
        public
        view
        virtual
        override
        returns (string memory)
    {
        require(
            _exists(tokenId),
            "ERC721Metadata: URI query for nonexistent token"
        );
        string memory _tokenURI = super.tokenURI(tokenId);
        return
            bytes(_tokenURI).length > 0
                ? string(abi.encodePacked(_tokenURI, ".json"))
                : "";
    }
    function _baseURI() internal view virtual override returns (string memory) {
        return _baseTokenURI;
    }
    function flipPublicSaleState() external onlyOwner {
        publicSale = !publicSale;
    }
    function setBaseURI(string calldata baseURI) external onlyOwner {
        _baseTokenURI = baseURI;
    }

    function withdraw() external onlyOwner {
        payable(msg.sender).transfer(address(this).balance);
    }
}
