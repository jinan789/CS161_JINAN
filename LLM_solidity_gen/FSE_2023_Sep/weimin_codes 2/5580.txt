contract NFT is ERC721Royalty, ERC721Enumerable, Ownable, ReentrancyGuard {
    using EnumerableSet for EnumerableSet.AddressSet;
    EnumerableSet.AddressSet private _allowList;

    event AddedToAllowList(address indexed _address);
    event RemovedFromAllowList(address indexed _address);

    uint256 public constant limitSupply = 100;
    uint256 public constant presaleSupply = 0;
    uint256 public constant presalePrice = 0 ether;
    uint256 public constant publicSalePrice = 0.15 ether;
    uint256 public PRESALE_MAX_MINT = 3;
    uint256 public MAX_PER_MINT = 20;
    address public royaltyReceiverAddress = 0x1c5e19aa8E68D31f8aa671Cbda520aDd621C06F8;
    uint96 public royaltyFee = 500;
    uint16 private constant allowListLimit = 300;

    uint256 public publicSaleMinted;
    bool public publicSaleActive = false;
    event PresaleStart();
    event PresalePaused();

    uint256 public presaleMinted;
    bool public presaleActive = false;
    event SaleStart();
    event SalePaused();

    uint16 public allowListTransactionLimit;

    mapping(address => uint256) private _totalClaimed;

    modifier whenPresalePaused() {
      require(presaleActive == false, "Presale is not paused.");
      _;
    }

    modifier whenPresaleActive() {
      require(presaleActive == true, "Presale is already paused.");
      _;
    }

    modifier whenSaleActive() {
      require(publicSaleActive == true, "Public sale is already paused.");
      _;
    }

    constructor() ERC721("Messi", "$MESSI") {
        _setDefaultRoyalty(royaltyReceiverAddress, royaltyFee);
        allowListTransactionLimit = allowListLimit;
    }

    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 firstTokenId,
        uint256 batchSize
    ) internal virtual override(ERC721, ERC721Enumerable) {
        super._beforeTokenTransfer(from, to, firstTokenId, batchSize);
    }

    function _burn(uint256 tokenId) internal virtual override(ERC721, ERC721Royalty) {
        super._burn(tokenId);
    }

    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721Enumerable, ERC721Royalty) returns (bool) {
        return super.supportsInterface(interfaceId);
    }

    function publicSaleSupply() public view virtual returns (uint256) {
        return limitSupply - presaleSupply;
    }

    function _baseURI() internal pure override returns (string memory) {
        return "https://bafybeihshmwe2yyj6ieetjnvfb2vrv2rlcmkudp2fuqqnnwujslcio6hca.ipfs.w3s.link/metadata/";
    }

    function setRoyalties(address receiver, uint96 feeNumerator)
        external
        onlyOwner
    {
        royaltyFee = feeNumerator;
        royaltyReceiverAddress = receiver;
        return _setDefaultRoyalty(receiver, feeNumerator);
    }

    function setAllowListTransactionLimit(uint16 allowListTransactionLimit_)
        external
        onlyOwner
    {
        allowListTransactionLimit = allowListTransactionLimit_;
    }

    function addToAllowList(address[] memory addresses)
        external
        onlyOwner
        whenPresalePaused
    {
        require(
            addresses.length <= allowListTransactionLimit,
            "Passed list of addresses is too long."
        );
        for (uint256 index = 0; index < addresses.length; index += 1) {
            if (_allowList.add(addresses[index])) {
                emit AddedToAllowList(addresses[index]);
            }
        }
    }

    function removeFromAllowList(address[] memory addresses)
        external
        onlyOwner
        whenPresalePaused
    {
        require(
            addresses.length <= allowListTransactionLimit,
            "Passed list of addresses is too long."
        );
        for (uint256 index = 0; index < addresses.length; index += 1) {
            if (_allowList.remove(addresses[index])) {
                emit RemovedFromAllowList(addresses[index]);
            }
        }
    }

    function inAllowList(address value) public view returns (bool) {
        return _allowList.contains(value);
    }

    function _preValidatePurchase(uint256 amountOfNFTs) internal view {
        require(msg.sender != address(0));
        require(amountOfNFTs > 0, "Tokens quantity must be equal or bigger than 1.");
        require(totalSupply() + amountOfNFTs <= limitSupply, "Requested quantity would exceed max supply.");
        if (presaleActive) {
            require(inAllowList(msg.sender), "Presale: Address isn't in the allow list.");
            require(amountOfNFTs + _totalClaimed[msg.sender] <= PRESALE_MAX_MINT, "Presale: Limited amount of tokens per address.");
            require(presaleMinted + amountOfNFTs <= presaleSupply, "Presale: Requested quantity would exceed max presale supply.");
            require(presalePrice * amountOfNFTs <= msg.value, "Presale: Insufficient funds.");
        } else if (publicSaleActive) {
            require(amountOfNFTs <= MAX_PER_MINT, "PublicSale: Limited amount of tokens per transaction.");
            require(publicSaleMinted + amountOfNFTs <= publicSaleSupply(), "PublicSale: Requested quantity would exceed max presale supply.");
            require(publicSalePrice * amountOfNFTs <= msg.value, "PublicSale: Insufficient funds.");
        } else {
          revert ("No sale active.");
        }
    }

    function _processTokenMint(address recipient) internal returns (uint256) {
        uint256 newItemId = totalSupply() + 1;
        _safeMint(recipient, newItemId);
        return newItemId;
    }

    function mintPresale(uint256 amountOfNFTs) external payable {
        require(presaleActive, "Presale is not active.");
        _preValidatePurchase(amountOfNFTs);
        presaleMinted += amountOfNFTs;
        _totalClaimed[msg.sender]+= amountOfNFTs;

        for (uint256 i = 0; i < amountOfNFTs; i++) {
            _processTokenMint(msg.sender);
        }
    }

    function mint(uint256 amountOfNFTs) external payable {
        require(publicSaleActive, "Public sale is not active.");
        _preValidatePurchase(amountOfNFTs);
        publicSaleMinted += amountOfNFTs;

        for (uint256 i = 0; i < amountOfNFTs; i++) {
            _processTokenMint(msg.sender);
        }
    }

    function startPresale() external onlyOwner {
        if (publicSaleActive) { pauseAnySale(); }
        presaleActive = true;
        emit PresaleStart();
    }

    function pausePresale() external onlyOwner whenPresaleActive {
        presaleActive = false;
        emit PresalePaused();
    }

    function startPublicSale() external onlyOwner {
        if (presaleActive) { pauseAnySale(); }

        publicSaleActive = true;
        emit SaleStart();
    }

    function pausePublicSale() external onlyOwner whenSaleActive {
        publicSaleActive = false;
        emit SalePaused();
    }

    function pauseAnySale() internal onlyOwner {
      if (publicSaleActive) { 
        publicSaleActive = false;
        emit SalePaused();
      } 
      if(presaleActive){
        presaleActive = false;
        emit PresalePaused();
      }
    }

    function setTokensPerWalletMax(uint256 number) public onlyOwner {
        PRESALE_MAX_MINT = number;
    }

    function setPerTransactionMax(uint256 number) public onlyOwner {
        MAX_PER_MINT = number;
    }

    function withdraw(address payable wallet, uint256 amount) external onlyOwner {
        require(amount <= address(this).balance);
        wallet.transfer(amount);
    }

    function devMint(uint256 amountOfNFTs) external onlyOwner {
        require(totalSupply() + amountOfNFTs <= limitSupply, "SOLD_OUT");
        publicSaleMinted += amountOfNFTs;
        for (uint256 i = 0; i < amountOfNFTs; i++) {
            _processTokenMint(msg.sender);
        }
    }
}
