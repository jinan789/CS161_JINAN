contract Token is Ownable, ERC20 {
    uint256 private _numTokensSellToAddToSwap = 100000 * (10 ** decimals());
    bool inSwapAndLiquify;

    // 1% buy/sell tax
    uint256 public buySellLiquidityTax;
    uint256 public sellDevelopmentTax;
    address public developmentWallet;
    address public constant DEAD = address(0xdead); // burn LP to dead address

    IUniswapV2Router02 public immutable uniswapV2Router;
    address public immutable uniswapV2Pair;
    mapping(address => bool) private _isExcludedFromFee;

    event SwapAndLiquify(
        uint256 tokensSwapped,
        uint256 ethReceived,
        uint256 tokensIntoLiqudity
    );

    modifier lockTheSwap() {
        inSwapAndLiquify = true;
        _;
        inSwapAndLiquify = false;
    }

    /**
     * @dev Sets the values for {name} and {symbol}.
     *
     * The default value of {decimals} is 18. To select a different value for
     * {decimals} you should overload it.
     *
     * All two of these values are immutable: they can only be set once during
     * construction.
     */
    constructor(
        address _developmentWallet,
        uint _liquidityTax,
        uint _developmentTax,
        address _routerAddress
    ) ERC20("Soliton", "SOLITON") {
        _mint(msg.sender, (10000000000000 * 10 ** decimals()));

        developmentWallet = _developmentWallet;
        buySellLiquidityTax = _liquidityTax;
        sellDevelopmentTax = _developmentTax;

        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(
            _routerAddress
        );
        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())
            .createPair(address(this), _uniswapV2Router.WETH());

        uniswapV2Router = _uniswapV2Router;
        _isExcludedFromFee[msg.sender] = true;
        _isExcludedFromFee[address(uniswapV2Router)] = true;
    }

    function _swapAndLiquify(uint256 contractTokenBalance) private lockTheSwap {
        uint256 half = (contractTokenBalance / 2);
        uint256 otherHalf = (contractTokenBalance - half);

        uint256 initialBalance = address(this).balance;

        _swapTokensForEth(half);

        uint256 newBalance = (address(this).balance - initialBalance);

        _addLiquidity(otherHalf, newBalance);

        emit SwapAndLiquify(half, newBalance, otherHalf);
    }

    function excludeFromFee(address _user, bool value) external onlyOwner {
        _isExcludedFromFee[_user] = value;
    }

    function swapAndSendToMarketing(uint256 tokens) private lockTheSwap {
        uint256 initialBalance = address(this).balance;
        _swapTokensForEth(tokens);
        uint256 newBalance = address(this).balance - initialBalance;
        payable(developmentWallet).transfer(newBalance);
    }

    function _swapTokensForEth(uint256 tokenAmount) private {
        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = uniswapV2Router.WETH();

        _approve(address(this), address(uniswapV2Router), tokenAmount);

        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(
            tokenAmount,
            0,
            path,
            address(this),
            (block.timestamp + 300)
        );
    }

    function _addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {
        _approve(address(this), address(uniswapV2Router), tokenAmount);

        uniswapV2Router.addLiquidityETH{value: ethAmount}(
            address(this),
            tokenAmount,
            0,
            0,
            DEAD,
            block.timestamp
        );
    }

    /**
     * @dev Moves `amount` of tokens from `from` to `to`.
     *
     * This internal function is equivalent to {transfer}, and can be used to
     * e.g. implement automatic token fees, slashing mechanisms, etc.
     *
     * Emits a {Transfer} event.
     *
     * Requirements:
     *
     * - `from` cannot be the zero address.
     * - `to` cannot be the zero address.
     * - `from` must have a balance of at least `amount`.
     */
    function _transfer(
        address from,
        address to,
        uint256 amount
    ) internal override {
        require(from != address(0), "ERC20: transfer from the zero address");
        require(to != address(0), "ERC20: transfer to the zero address");
        require(
            balanceOf(from) >= amount,
            "ERC20: transfer amount exceeds balance"
        );

        uint256 transferAmount;
        if (
            (from == uniswapV2Pair || to == uniswapV2Pair) && !inSwapAndLiquify
        ) {
            // DEX transaction
            if (
                from != uniswapV2Pair &&
                ((balanceOf(address(this))) >= _numTokensSellToAddToSwap)
            ) {
                uint256 totalfee = 2 *
                    (buySellLiquidityTax) +
                    sellDevelopmentTax;
                _numTokensSellToAddToSwap = balanceOf(address(this));

                uint256 marketingTokens = (_numTokensSellToAddToSwap *
                    sellDevelopmentTax) / totalfee;
                swapAndSendToMarketing(marketingTokens);

                uint256 liquidityTokens = _numTokensSellToAddToSwap -
                    marketingTokens;

                // sell transaction with threshold to swap
                _swapAndLiquify(liquidityTokens);
            }
            if (_isExcludedFromFee[from] || _isExcludedFromFee[to]) {
                // no tax on excluded account
                transferAmount = amount;
            } else {
                // 1% buy tax to LP, 2% sell tax (1% to LP, 1% to dev wallet)
                uint256 liquidityAmount = ((amount * buySellLiquidityTax) /
                    100);
                if (from == uniswapV2Pair) {
                    // buy transaction
                    transferAmount = amount - liquidityAmount;
                } else {
                    // sell transaction
                    uint256 developmentAmount = ((amount * sellDevelopmentTax) /
                        100);

                    transferAmount =
                        amount -
                        liquidityAmount -
                        developmentAmount;
                    super._transfer(from, address(this), developmentAmount); // only on sell transaction
                }
                super._transfer(from, address(this), liquidityAmount); // on buy/sell both transactions
            }
        } else {
            // normal wallet transaction
            transferAmount = amount;
        }
        super._transfer(from, to, transferAmount);
    }

    receive() external payable {}
}
