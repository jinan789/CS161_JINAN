contract SparkStakeRebalanceMonitor {
    using SafeMath for uint256;
    address public owner;
    address public sparkPool;
    address public daiStakePool;
    address public lidoSparkSavingsStrategy;

    constructor(address _owner) {
        owner = _owner;
        lidoSparkSavingsStrategy = 0x2B30A948Fe2bf1FF67506aaBB3dF3fE0603d128F; //0x71122Cd26c5f1E18826652708C3e00D1cf837DA4
        sparkPool = IsparkSavingsInterface(lidoSparkSavingsStrategy).pool(); //spark 0xC13e21B648A5Ee794902342038FF3aDAB66BE987#
        daiStakePool = IsparkSavingsInterface(lidoSparkSavingsStrategy)
            .savingsAsset(); //0x83F20F44975D03b1b09e64809B757c47f942BEeA; // sdai
    }

    function setLidoSparkSavingsStrategy(
        address _lidoSparkSavingsStrategy
    ) external {
        require(
            msg.sender == owner,
            " only owner set Lido Aave Leverage Strategy"
        );
        lidoSparkSavingsStrategy = _lidoSparkSavingsStrategy;
    }

    function getHealthFactor(address _vault) public view returns (uint256) {
        (, , , , , uint256 hf) = ISparkPool(sparkPool).getUserAccountData(
            _vault
        );
        return hf;
    }

    function hasSparkStaked(address _vault) public view returns (bool) {
        uint256 _balance;

        _balance = IERC20(daiStakePool).balanceOf(_vault);

        if (_balance > 0) {
            return true;
        }
        return false;
    }

    function needReBalance(
        address _vault,
        uint256 _minReHealthFactor,
        uint256 _maxReHealthFactor
    ) public view returns (bool) {
        uint256 vault_hf;
        vault_hf = getHealthFactor(_vault);
        if (vault_hf >= _maxReHealthFactor || vault_hf <= _minReHealthFactor) {
            return true;
        }
        return false;
    }

    function encodeRebalanceInput(
        uint256 healthFactor
    ) internal pure returns (bytes memory encodedInput) {
        return abi.encodeWithSignature("rebalance(uint256)", healthFactor);
    }

    function executeRebalance(
        address _vault,
        uint256 _rebalanceHealthFactory
    ) internal view returns (bool canExec, bytes memory execPayload) {
        bytes memory args = encodeRebalanceInput(_rebalanceHealthFactory);
        execPayload = abi.encodeWithSelector(
            IVaultInterface(_vault).execute.selector,
            lidoSparkSavingsStrategy,
            args
        );
        return (true, execPayload);
    }

    function checker(
        address _vault,
        uint256 _minReHealthFactorThreshold,
        uint256 _rebalanceToHealthFactor,
        uint256 _maxReHealthFactorThreshold
    ) external view returns (bool canExec, bytes memory execPayload) {
        if (hasSparkStaked(_vault)) {
            if (
                needReBalance(
                    _vault,
                    _minReHealthFactorThreshold,
                    _maxReHealthFactorThreshold
                )
            ) {
                return executeRebalance(_vault, _rebalanceToHealthFactor);
            }
        }
        return (false, bytes("monitor is ok"));
    }
}
