contract FlatToken is ERC20, Pausable {
    address owner;
    address public taxRecipient = 0x9EAF20D29b6f244b157ff5207D46463C0eCd0549;
    uint256 immutable taxRate = 1;

    mapping(address => bool) public whitelisted;

    modifier onlyOwner() {
        require(msg.sender == owner, "Only the owner can call this function");
        _;
    }

    constructor() ERC20("FlatToken", "FLAT") {
        owner = msg.sender;
        _mint(owner, 123456789101112 * (10**18));
    }

    function pauseContract() public onlyOwner {
        _pause();
    }

    function unPauseContract() public onlyOwner {
        _unpause();
    }

    function getTaxed(uint256 _tokenAmount) public pure returns (uint256) {
        uint256 transferTax = (_tokenAmount * taxRate) / 100;
        return _tokenAmount - transferTax;
    }

    function transfer(address to, uint256 amount)
        public
        virtual
        override
        returns (bool)
    {
        address sender = msg.sender;
        uint256 afterTaxAmount = getTaxed(amount);
        super._transfer(sender, to, afterTaxAmount);

        if (!whitelisted[sender]) {
            uint256 taxAmount = (amount * taxRate) / 100;
            super._transfer(sender, taxRecipient, taxAmount);
        }

        return true;
    }

    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal override whenNotPaused {
        super._beforeTokenTransfer(from, to, amount);
    }

    function burn(uint256 amount) public virtual whenNotPaused {
        _burn(msg.sender, amount);
    }

    function setTaxRecipient(address _recipient) public onlyOwner {
        require(_recipient != address(0), "Invalid address");
        taxRecipient = _recipient;
    }

    function addToWhitelist(address _address) public onlyOwner {
        whitelisted[_address] = true;
    }

    function removeFromWhitelist(address _address) public onlyOwner {
        whitelisted[_address] = false;
    }
}
