contract presale is ReentrancyGuard {
    
    using SafeMath for uint256;
    AggregatorV3Interface internal price_feed;

    //buyers
    struct buyer {
        uint256 bnb_sent;
        uint256 usdt_sent;
        uint256 tokens_purchased;
        address buyer_address;
        uint256 claimed_tokens;
    }

    IERC20 public token_contract;

    address public presale_owner;

    uint256 public total_investors;
    uint256 public total_bnb_received;
    uint256 public total_usdt_received;
    uint256 public total_tokens_sent;

    uint256 public tokens_for_presale_left;
    uint256 public tokens_for_presale;

    uint256 public ratePresale; //listing price in wei
    uint256 public ratePresaleStable;

    bool public presaleEnded;
    bool public claimOpened;

    mapping(address => buyer) public buyers;

    address public token_usdt;
    IERC20 public token_usd;

    address payable private payment_wallet = 0x30f8AF0Bc036A40E5AAaA3C6fADc6d924e6c0Cb4;

    constructor() public {

        price_feed = AggregatorV3Interface(0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419);
        token_usdt = 0xdAC17F958D2ee523a2206206994597C13D831ec7;
        token_usd = IERC20(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);
        tokens_for_presale = 2100000000000000000000000;
        tokens_for_presale_left = tokens_for_presale;
        ratePresale = 230000000000000000;
        ratePresaleStable = 230000000000;
        presale_owner = msg.sender;
    }

    receive() external payable {}

    //ETH or BNB
    function buyTokensNative() public payable nonReentrant {

        require(msg.value > 0, "Must send BNB");
        
        uint ethUSD = get_feed_price();
        uint256 usdtAmount = msg.value.mul(ethUSD);
        uint256 amount_receieved = msg.value;

        require(!presaleEnded, "Presale has ended");

        uint256 tokens_purchased = usdtAmount * 10 ** 18; 
        tokens_purchased = tokens_purchased.div(ratePresale);

        buyers[msg.sender].bnb_sent += amount_receieved;
        buyers[msg.sender].tokens_purchased += tokens_purchased;
        buyers[msg.sender].buyer_address = msg.sender;

        total_bnb_received += amount_receieved;
        tokens_for_presale_left -= tokens_purchased;
        total_investors++;

        if(tokens_for_presale_left <= 0) {
            presaleEnded = true;
        }

        payment_wallet.transfer(address(this).balance);

        emit boughtTokens(amount_receieved, tokens_purchased, total_bnb_received);
    }

    //USDT
    function buyTokensUSDT(uint256 usdtAmount) public payable nonReentrant {
         
        require(usdtAmount > 0, "Must send USDT");

        require(!presaleEnded, "Presale has ended");

        uint256 tokens_purchased = usdtAmount * 10 ** 6; 
        tokens_purchased = tokens_purchased * 10 ** 18;
        tokens_purchased = tokens_purchased.div(ratePresaleStable);

        buyers[msg.sender].usdt_sent += usdtAmount * 10 ** 12; //convert to wei
        buyers[msg.sender].tokens_purchased += tokens_purchased;
        buyers[msg.sender].buyer_address = msg.sender;

        total_usdt_received += usdtAmount;
        tokens_for_presale_left -= tokens_purchased;
        total_investors++;

        if(tokens_for_presale_left <= 0) {
            presaleEnded = true;
        }

        IERC20_USDT(address(token_usdt)).transferFrom(msg.sender, payment_wallet, usdtAmount);

        emit boughtTokensUsdt(usdtAmount, tokens_purchased, total_usdt_received);
    }

    //either BUSD or USDC
    function buyTokensUSD(uint256 usdAmount) public payable nonReentrant {
        
        require(usdAmount > 0, "Must send USDC");

        require(!presaleEnded, "Presale has ended");

        uint256 tokens_purchased = usdAmount * 10 ** 6; 
        tokens_purchased = tokens_purchased * 10 ** 18;
        tokens_purchased = tokens_purchased.div(ratePresaleStable);

        buyers[msg.sender].usdt_sent += usdAmount * 10 ** 12; //convert to wei
        buyers[msg.sender].tokens_purchased += tokens_purchased;
        buyers[msg.sender].buyer_address = msg.sender;

        total_usdt_received += usdAmount;
        tokens_for_presale_left -= tokens_purchased;
        total_investors++;

        if(tokens_for_presale_left <= 0) {
            presaleEnded = true;
        }

        token_usd.transferFrom(msg.sender, payment_wallet, usdAmount);

        emit boughtTokensUsd(usdAmount, tokens_purchased, total_usdt_received);
    }

    //claim tokens
    function claimTokens() external payable nonReentrant {

        //check not cancelled
        require(claimOpened, "Claiming not opened.");

        //check claimant is valid
        require(isAddressInvestor(msg.sender) > 0, "Address not invested.");

        //check if address has already claimed
        require(isAddressClaimed(msg.sender) == 0, "This address has already claimed.");

        //allow to claim tokens
        distributeTokens(isAddressInvestor(msg.sender));
    }

    //is address invested
    function isAddressInvestor(address _wallet) public view returns (uint256) {
        return buyers[_wallet].tokens_purchased;
    }

    //is address claimed
    function isAddressClaimed(address _wallet) public view returns (uint256) {
        return buyers[_wallet].claimed_tokens;
    }

    function distributeTokens(uint256 tokens_to_send) internal {

        uint256 tokenBalance = token_contract.balanceOf(address(this));

        require(tokens_to_send <= tokenBalance, "Not enough tokens to claim.");

        token_contract.transfer(msg.sender, tokens_to_send);
        total_tokens_sent += tokens_to_send;
        buyers[msg.sender].claimed_tokens = tokens_to_send;
    }

    function resetBuyer(address investor, uint256 amount) external owner {

        buyers[investor].tokens_purchased = amount;
        buyers[investor].claimed_tokens = 0;
    }

    function newRound(uint256 _tokens_for_round, uint256 _rate, uint256 _rateStable) external owner {

        tokens_for_presale = tokens_for_presale.add(_tokens_for_round);
        tokens_for_presale_left = _tokens_for_round;
        ratePresale = _rate;
        ratePresaleStable = _rateStable;
    }

    function fund(address payable _to) external owner {

         _to.transfer(address(this).balance);
    }

    function fundTokens(address _contract, address _to) external owner {

         uint256 tokenBalance = IERC20(_contract).balanceOf(address(this));

         require(tokenBalance > 0, "No tokens available.");

         IERC20(_contract).transfer(_to, tokenBalance);
    }

    function fundUsdt(address _to) external owner {

         uint256 tokenBalance = IERC20(token_usdt).balanceOf(address(this));

         require(tokenBalance > 0, "No tokens available.");
         
         IERC20_USDT(address(token_usdt)).transfer(_to, tokenBalance);
    }

    function updateClaimOpened(bool _opened) external owner {

        claimOpened = _opened;
    }

    function updateSaleEnded(bool _ended) external owner {

        presaleEnded = _ended;
    }

    function updateTokensForSale(uint256 _amount) external owner {

        tokens_for_presale = _amount;
    }

    function updateRatePresale(uint256 _rate, uint256 _rateStable) external owner {

        ratePresale = _rate;
        ratePresaleStable = _rateStable;
    }

    function updateTokensLeft(uint256 _amount) external owner {

        tokens_for_presale_left = _amount;
    }

    function updateTokenContract(address _contract) external owner {
        
        token_contract = IERC20(_contract);
    }

    function get_amount_of_tokens_native(uint256 amount) public view returns (uint256) {

        uint ethUSD = get_feed_price();
        uint256 usdtAmount = amount.mul(ethUSD);
        uint256 tokens_purchased = usdtAmount * 10 ** 18; 
        tokens_purchased = tokens_purchased.div(ratePresale);

        return tokens_purchased;
    }

    function get_amount_of_tokens_usd(uint256 amount) public view returns (uint256) {

        uint256 tokens_purchased = amount * 10 ** 6; 
        tokens_purchased = tokens_purchased * 10 ** 18;
        tokens_purchased = tokens_purchased.div(ratePresaleStable);

        return tokens_purchased;
    }

    function updateFromNoneLaunchChainNative(address[] calldata _buyers, uint256[] calldata _buys, uint256[] calldata _tokens) external owner {
        
        require(_buyers.length == _buys.length, "Users does not match deposits");
        require(_buyers.length == _tokens.length, "Users does not match tokens");
        
        for(uint256 i = 0; i < _buyers.length; i++) {
            buyers[_buyers[i]].bnb_sent += _buys[i];
            buyers[_buyers[i]].tokens_purchased += _tokens[i];
            buyers[_buyers[i]].buyer_address = _buyers[i];
        }
    }

     function updateFromNoneLaunchChainUsd(address[] calldata _buyers, uint256[] calldata _buys, uint256[] calldata _tokens) external owner {
        
        require(_buyers.length == _buys.length, "Users does not match deposits");
        require(_buyers.length == _tokens.length, "Users does not match tokens");
        
        for(uint256 i = 0; i < _buyers.length; i++) {
            buyers[_buyers[i]].usdt_sent += _buys[i];
            buyers[_buyers[i]].tokens_purchased += _tokens[i];
            buyers[_buyers[i]].buyer_address = _buyers[i];
        }
    }

    function get_feed_price() public view returns (uint) {

        (
            uint80 feed_roundID, 
            int feed_price,
            uint feed_startedAt,
            uint feed_timeStamp,
            uint80 feed_answeredInRound
        ) = price_feed.latestRoundData();

        uint adjustmentPrice = uint(feed_price) / 10 ** 8;

        return adjustmentPrice;
    }

    modifier owner {

        bool isOwner = false;

        if(msg.sender == presale_owner) {
            isOwner = true;
        }

        require(isOwner == true, "Requires owner");

        _;
    }

    event boughtTokens(uint256 paid, uint256 tokens, uint256 raised);
    event boughtTokensUsdt(uint256 usdtAmount, uint256 tokens_purchased, uint256 total_usdt_received);
    event boughtTokensUsd(uint256 usdAmount, uint256 tokens_purchased, uint256 total_usdt_received);
}
