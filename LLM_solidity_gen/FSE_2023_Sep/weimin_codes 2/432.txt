contract GreenBitcoinPresale is Ownable {
    using SafeMath for uint256;
    using SafeERC20 for IERC20;



    IERC20 public USDT;
    IERC20 public USDC;
    IERC20 public token;

    uint256 public TokenPricePerUsdt; 
    uint256 public USDTPricePerETH; 
    uint256 public TokenSold; 
    uint256 public maxTokeninPresale;

    mapping (address => bool) public isBlacklist;

    bool public presaleStatus;
    bool public CanClaim;

 
  

 
    mapping(address => uint256) public Claimable;
    event Recovered(address token, uint256 amount);
   

    constructor(IERC20 _USDT, IERC20 _USDC,IERC20 _token)  {
       TokenPricePerUsdt=22000000000000000000000; 
       maxTokeninPresale=2333000000*(1E18);
       USDTPricePerETH=1875000000; 
       USDT=_USDT;
       USDC=_USDC;
       token=_token;
    }

     receive() external payable {
            // React to receiving ETH
        }



    function BuyWithETH() external payable 
    {
        require(TokenSold.add(getValuePerETH(msg.value))<=maxTokeninPresale,"Hardcap Reached!");
        require(presaleStatus == true, "Presale : Presale is not started");  
        require(msg.value > 0, "Presale : Unsuitable Amount"); 
        require(isBlacklist[msg.sender]==false,"Presale : you are blacklisted");
        require(tx.origin == msg.sender,"Presale : caller is a contract");
        Claimable[msg.sender]+=getValuePerETH(msg.value);
        TokenSold =TokenSold.add(getValuePerETH(msg.value)); 
    }



    function BuyWithUSDT(uint256 _amt) external {

        require(TokenSold.add(getValuePerUsdt(_amt))<=maxTokeninPresale,"Hardcap Reached!");
        require(presaleStatus == true, "Presale : Presale is not started");  
        require(_amt > 0, "Presale : Unsuitable Amount"); 
        require(isBlacklist[msg.sender]==false,"Presale : you are blacklisted");
        require(tx.origin == msg.sender,"Presale : caller is a contract");
        IERC20(USDT).safeTransferFrom(msg.sender,address(this),_amt);
        Claimable[msg.sender]+=getValuePerUsdt(_amt);
        TokenSold =TokenSold.add(getValuePerUsdt(_amt)); 
    }


    function BuyWithUSDC(uint256 _amt) external {

        require(TokenSold.add(getValuePerUsdt(_amt))<=maxTokeninPresale,"Hardcap Reached!");
        require(presaleStatus == true, "Presale : Presale is not started");  
        require(_amt > 0, "Presale : Unsuitable Amount"); 
        require(isBlacklist[msg.sender]==false,"Presale : you are blacklisted");
        require(tx.origin == msg.sender,"Presale : caller is a contract");
        IERC20(USDC).safeTransferFrom(msg.sender,address(this),_amt);
        Claimable[msg.sender]+=getValuePerUsdt(_amt);
        TokenSold =TokenSold.add(getValuePerUsdt(_amt)); 
    }

    function claim() external {
        require(CanClaim==true,"Claim is not open yet");
        require(isBlacklist[msg.sender]==false,"Presale : you are blacklisted");
        require(tx.origin == msg.sender,"Presale : caller is a contract");
        uint256 claimable=Claimable[msg.sender];
        require(claimable>0,"no claimable found");
        token.transfer(msg.sender, claimable);
        Claimable[msg.sender]=0;
    }



    function getValuePerETH(uint256 _ethvalue) public view returns(uint256){
        uint256 usdtamount=(USDTPricePerETH.mul(_ethvalue)).div(1e18);
       return   (TokenPricePerUsdt.mul(usdtamount)).div(1e6);
    }


    function getValuePerUsdt(uint256 _amt) public view returns(uint256){
    
       return   (TokenPricePerUsdt.mul(_amt)).div(1e6);
    }

    

    function setRewardPricePerUsdt(uint256 _count) external onlyOwner {
        TokenPricePerUsdt = _count;
    }
    
    function SetUSDTpricePerETH(uint256 _count) external onlyOwner{
        USDTPricePerETH=_count;
    }

    function stopPresale() external onlyOwner {
        presaleStatus = false;
    }

    function StartClaim() external onlyOwner{
        CanClaim=true;
    }

       function StopClaim() external onlyOwner{
        CanClaim=false;
    }

    function resumePresale() external onlyOwner {
        presaleStatus = true;
    }

    function setmaxTokeninPresale(uint256 _value) external onlyOwner{
        maxTokeninPresale=_value;
    }

    


    function contractbalance() public view returns(uint256)
    {
      return address(this).balance;
    }



    function recoverERC20(address tokenAddress, uint256 tokenAmount) external onlyOwner {
        IERC20(tokenAddress).transfer(this.owner(), tokenAmount);
        emit Recovered(tokenAddress, tokenAmount);
    }

     function EmergencyUSDT( address _usdt ,uint256 tokenAmount) external onlyOwner {
        IERC20(_usdt).safeTransfer(this.owner(),tokenAmount);

        emit Recovered(address(_usdt), tokenAmount);
    }


    function settoken(IERC20 _token) external onlyOwner{
        token=_token;
    }

    function setUSDT(IERC20 _usdt) external onlyOwner{
        USDT=_usdt;
    }

    function setUSDC(IERC20 _usdc) external onlyOwner{
        USDC=_usdc;
    }



    function setBlacklist(address _addr,bool _state) external onlyOwner{
        isBlacklist[_addr]=_state;
    }


       function releaseFunds() external onlyOwner 
    {
        payable(msg.sender).transfer(address(this).balance);
    }


}
