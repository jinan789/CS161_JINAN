I want you to help me find new gas-wasting patterns for Solidity. Gas is a unique pricing mechanism in Solidity, which measures the amount of computational resources put into the execution of Solidity codes. The goal of gas optimization is to find an equivalent code instruction sequence that produces the same output while consuming less gas, which may misalign from the way people typically write codes, since code writers aim for readability and maintainability, while gas optimization might seem a little unintuitive to newcomers. For example, storage variables in Solidity are expensive in terms of gas, while memory is not, so storage operations should be avoided whenever possible. Gas is paid in real money, so saving gas is saving money.

First, I will give you a list of known gas-wasting patterns. The list is numbered, with each bullet point specifying one gas-wasting pattern, which is followed by an explanation of why this pattern wastes gas. I want you to read through these and learn how to find new gas-wasting patterns from it. The list is as follows:

1. Repeated computation of the same expression: including repetitive reads of the same expensive storage variable (e.g. Overuse of expensive storage variables). This could be solved by introducing an intermediate variable to hold the value.
 
2. Extractable code chunks: if there are multiple chunks of codes that perform the same/similar functionalities, then we could abstract them into one function (or modifier) to save deployment costs 

3. Variable refactoring: by refactoring variable types and thus adjusting memory layout, we could save gas by saving the amount of storage space needed

4. Redundant operations with same effects: redundant operations that overwrite the effect of the previous operation, making the previous useless

5. Pre-computable operations on constants: performing comparisons (or say other operations) to constants is useless and could be pre-computed

6. Persistent conditional checks: some of the condition checks may always evaluate to true or always evaluate to false, which could be directly replaced by their evaluated values

7. Simplifiable conditional operations: expressions that involve logical operations that could be simplified to reduce the amount of computational workload.

8. "dead codes." codes that are guaranteed not to be executed (e.g. unreachable conditional branch) should be removed.
9. "Opaque predicate." If the outcome of a predicate could be inferred to be true/false without execution, then we could just replace it with the corresponding value to save the compuation during runtime.
10. "Expensive operations in a loop." If an gas-expensive operation is executed multiple times in a loop, while there is a way to equivalently move it out of the loop to execute only once (e.g. storing a storage variable in a memory variable and performing operations on the memory variable inside the loop), then we should do it to save gas.
11. "Constant outcome of a loop." If the outcome of a loop could be inferred without execution, then we could just replace it with the corresponding value to save the compuation during runtime.
12. "Loop fusion." If two loops have the same starting and stopping conditions with the same increment steps, then we could consider combining them into one (e.g. delete the second loop, and put its loop body codes into the first one) if they have no dependencies. This way, we save the logical comparisons, conditional jumps, as well as the incremental steps of the second loop, which saves computation and thus gas.
13. "Repeated computations in a loop." If there are expressions that produce the same outcome in each iteration of a loop, we could move it out of the loop and execute only once, which saves computation.
14. "Struct variable refactoring." If a struct used in a contract contains some fields that are used more often and some that are less often, then by breaking up the struct into two, where the frequently used fields are now put as a separate struct, we get to avoid unnecessary reads on the less often used fields and save gas.s

Next, I will give you a chunk of Solidity codes from which you will find gas-inefficient patterns; note that I have removed simple functions from the contract and only kept complex ones, with the hope that you could focus on the most complicated function codes
contract LSDai is Ownable, ILSDai {
  function _burnShares(address _account, uint256 _sharesAmount) internal returns (uint256 newTotalShares) {
    if (_account == address(0)) {
      revert LSDai__BurnFromZeroAddress();
    }

    uint256 accountShares = _shares[_account];

    if (_sharesAmount > accountShares) {
      revert LSDai__SharesAmountExceedsBalance();
    }

    uint256 preRebaseTokenAmount = getPooledDaiByShares(_sharesAmount);

    newTotalShares = _totalLsdaiShares.sub(_sharesAmount);

    _totalLsdaiShares = newTotalShares;

    _shares[_account] = accountShares.sub(_sharesAmount);

    uint256 postRebaseTokenAmount = getPooledDaiByShares(_sharesAmount);

    emit SharesBurnt(_account, preRebaseTokenAmount, postRebaseTokenAmount, _sharesAmount);

    // Notice: we're not emitting a Transfer event to the zero address here since shares burn
    // works by redistributing the amount of tokens corresponding to the burned shares between
    // all other token holders. The total supply of the token doesn't change as the result.
    // This is equivalent to performing a send from `address` to each other token holder address,
    // but we cannot reflect this as it would require sending an unbounded number of events.

    // We're emitting `SharesBurnt` event to provide an explicit rebase log record nonetheless.
  }

  /**
   * @dev See {IERC20-allowance}.
   */
  function initialize(uint256 _depositCap, uint256 _interestFee, uint256 _withdrawalFee, address _feeRecipient)
    external
    returns (bool)
  {
    if (_initialized) {
      revert LSDai__AlreadyInitialized();
    }

    // Transfer ownership to message sender
    _transferOwnership(msg.sender);

    // Set ERC20 name and symbol
    name = "Liquid Savings DAI";
    symbol = "LSDAI";

    // Set initial deposit cap to 10m DAI
    setDepositCap(_depositCap);
    // Set fee information
    setFeeRecipient(_feeRecipient);
    setWithdrawalFee(_withdrawalFee);
    setInterestFee(_interestFee);

    _initialized = true;

    // Setup the LSDAI contract to be able to interact with the MakerDAO contracts and DAI token
    vat.hope(address(daiJoin));
    vat.hope(address(pot));
    dai.approve(address(daiJoin), type(uint256).max);

    return true;
  }

  /**
   * @return the amount of shares owned by `_account`.
   */
  function setWithdrawalFee(uint256 fee) public onlyOwner {
    if (fee > 20) {
      revert LSDai__WithdrawalFeeHigh();
    }

    withdrawalFee = fee;

    emit WithdrawalFeeSet(fee);
  }

  /**
   * @dev Updates the interest fee. Only callable by the owner.
   * @param fee The new interest fee, in basis points.
   */
  function setInterestFee(uint256 fee) public onlyOwner {
    // Cap at 5% (500 basis points)
    if (fee > 500) {
      revert LSDai__InterestFeeHigh();
    }

    interestFee = fee;

    emit InterestFeeSet(fee);
  }

  /**
   * @dev Updates the fee recipient. Only callable by the owner.
   * @param recipient The new fee recipient.
   */
  function setFeeRecipient(address recipient) public onlyOwner {
    if (recipient == address(0)) {
      revert LSDai__FeeRecipientZeroAddress();
    }

    feeRecipient = recipient;

    emit FeeRecipientSet(recipient);
  }

  /**
   * @return the amount of tokens owned by the `account`.
   *
   * @dev Balances are dynamic and equal the `account`'s share in the amount of the
   * total DAI controlled by the protocol. See `sharesOf`.
   */
  function getSharesByPooledDai(uint256 daiAmount) public view returns (uint256) {
    // Prevent division by zero
    if (_totalPooledDai == 0) {
      return daiAmount;
    }

    return daiAmount.mul(_totalLsdaiShares).div(_totalPooledDai);
  }

  /**
   * @return the amount of DAI that corresponds to `sharesAmount` token shares.
   * @param sharesAmount The amount of LSDAI shares.
   */
  function getTotalPotSharesValue() external view returns (uint256) {
    uint256 chi = (block.timestamp > pot.rho())
      ? (RMath.rpow(pot.dsr(), block.timestamp - pot.rho()) * pot.chi()) / RMath.RAY
      : pot.chi();

    // total pooled DAI is the total shares times the chi
    return (_totalPotShares * chi) / RMath.RAY;
  }
  function _deposit(address _to, uint256 _daiAmount) internal returns (uint256 shares) {
    // Check if the deposit cap is reached
    if (depositCap > 0 && _getTotalPooledDai().add(_daiAmount) > depositCap) {
      revert LSDai__DepositCap();
    }

    uint256 chi = _getMostRecentChi();

    // Calculate the amount of pot shares to mint
    uint256 potSharesAmount = RMath.rdiv(_daiAmount, chi);

    // Mint the shares to the user
    shares = getSharesByPooledDai(_daiAmount);
    _mintShares(_to, shares);

    // Increase the total amount of DAI pooled
    _totalPooledDai = _totalPooledDai.add(_daiAmount);
    // Keep track of total pot shares controlled by LSDAI
    _totalPotShares = _totalPotShares.add(potSharesAmount);

    // Mint LSDAI at 1:1 ratio to DAI
    emit Transfer(address(0), _to, _daiAmount);

    // Join the DSR on behalf of the user
    daiJoin.join(address(this), _daiAmount);
    pot.join(potSharesAmount);
  }

  /**
   * Withdraw shares back to DAI
   * @param _from The address to withdraw LSDAI from.
   * @param _to The address to withdraw DAI to.
   * @param _daiAmount The amount of LSDAI to withdraw. wad is denominated in (1/chi) * dai
   * @param _withdrawFee The fee to be charged on the withdrawal, in basis points.
   */
Now that I have given you the necessary information, I want you to help me find new gas-wasting patterns from the above codes, based on what you learn from the list of patterns. Please be creative and think out of the box beyond the patterns listed above. Please put the new gas wasting patterns in bullet points (in the form of '1.', '2.', etc), and answer the following questions for each of the found patterns (in sub-bullet-points under each bullet point):

1. How did you find this pattern? Could you explain the reasoning process, step by step, behind the discovery?

2. What should I do, step by step, to fix the found gas-wasting patterns? Could you explain the reasoning process, step by step, behind the reason why such a fix works?

3. On a score of 0 to 5, could you please tell me how would you rate this found new pattern, in terms of how much it is sacrificing readability, security, and maintainability in exchange for gas optimization (5 is the least impacted. For example, Security score of 5 means implementing the found gas-optimization pattern would have no effect on security, whereas 1 means it would reduce security)? Please format your answer as in "Readability: 5; Security: 4; Maintainability: 3". Please also provide explanations.

Here are some additional requirements:
1. If you think my prompt to you has any issues (e.g. ambiguity or lack of information), please tell me how I should improve it in the next time.
2. please help me format your answer in the form of a Latex section (e.g. \section*{Analysis of Provided Solidity Code}), since I want to assert it to a Latex document.