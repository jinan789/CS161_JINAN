I want you to help me find new gas-wasting patterns for Solidity. Gas is a unique pricing mechanism in Solidity, which measures the amount of computational resources put into the execution of Solidity codes. The goal of gas optimization is to find an equivalent code instruction sequence that produces the same output while consuming less gas, which may misalign from the way people typically write codes, since code writers aim for readability and maintainability, while gas optimization might seem a little unintuitive to newcomers. For example, storage variables in Solidity are expensive in terms of gas, while memory is not, so storage operations should be avoided whenever possible. Gas is paid in real money, so saving gas is saving money.

First, I will give you a list of known gas-wasting patterns. The list is numbered, with each bullet point specifying one gas-wasting pattern, which is followed by an explanation of why this pattern wastes gas. I want you to read through these and learn how to find new gas-wasting patterns from it. The list is as follows:

1. Repeated computation of the same expression: including repetitive reads of the same expensive storage variable (e.g. Overuse of expensive storage variables). This could be solved by introducing an intermediate variable to hold the value.
 
2. Extractable code chunks: if there are multiple chunks of codes that perform the same/similar functionalities, then we could abstract them into one function (or modifier) to save deployment costs 

3. Variable refactoring: by refactoring variable types and thus adjusting memory layout, we could save gas by saving the amount of storage space needed

4. Redundant operations with same effects: redundant operations that overwrite the effect of the previous operation, making the previous useless

5. Pre-computable operations on constants: performing comparisons (or say other operations) to constants is useless and could be pre-computed

6. Persistent conditional checks: some of the condition checks may always evaluate to true or always evaluate to false, which could be directly replaced by their evaluated values

7. Simplifiable conditional operations: expressions that involve logical operations that could be simplified to reduce the amount of computational workload.

8. "dead codes." codes that are guaranteed not to be executed (e.g. unreachable conditional branch) should be removed.
9. "Opaque predicate." If the outcome of a predicate could be inferred to be true/false without execution, then we could just replace it with the corresponding value to save the compuation during runtime.
10. "Expensive operations in a loop." If an gas-expensive operation is executed multiple times in a loop, while there is a way to equivalently move it out of the loop to execute only once (e.g. storing a storage variable in a memory variable and performing operations on the memory variable inside the loop), then we should do it to save gas.
11. "Constant outcome of a loop." If the outcome of a loop could be inferred without execution, then we could just replace it with the corresponding value to save the compuation during runtime.
12. "Loop fusion." If two loops have the same starting and stopping conditions with the same increment steps, then we could consider combining them into one (e.g. delete the second loop, and put its loop body codes into the first one) if they have no dependencies. This way, we save the logical comparisons, conditional jumps, as well as the incremental steps of the second loop, which saves computation and thus gas.
13. "Repeated computations in a loop." If there are expressions that produce the same outcome in each iteration of a loop, we could move it out of the loop and execute only once, which saves computation.
14. "Struct variable refactoring." If a struct used in a contract contains some fields that are used more often and some that are less often, then by breaking up the struct into two, where the frequently used fields are now put as a separate struct, we get to avoid unnecessary reads on the less often used fields and save gas.s

Next, I will give you a chunk of Solidity codes from which you will find gas-inefficient patterns; note that I have removed simple functions from the contract and only kept complex ones, with the hope that you could focus on the most complicated function codes
contract TRU is
    function createToken(
        string memory _title,
        string memory _description,
        string memory _date,
        string memory _authorName,
        uint256 _price,
        string memory _image,
        string memory url
    ) public {
        require(bytes(_title).length > 0, "The title cannot be empty");
        require(bytes(_date).length > 0, "The Date cannot be empty");
        require(
            bytes(_description).length > 0,
            "The description cannot be empty"
        );
        require(_price > 0, "The price cannot be empty");
        require(bytes(_image).length > 0, "The image cannot be empty");

        nft memory _nft = nft({
            id: index,
            title: _title,
            description: _description,
            price: _price,
            date: _date,
            authorName: _authorName,
            author: payable(msg.sender),
            owner: payable(msg.sender),
            status: 1,
            image: _image,
            _baseURIextended: url
        });

        nfts.push(_nft); // push to the array
        uint256 tokenId = nfts.length - 1; // array length -1 to get the token ID = 0, 1,2 ...
        _safeMint(msg.sender, tokenId);

        emit LognftTokenCreate(
            tokenId,
            _title,
            _date,
            _authorName,
            _price,
            msg.sender,
            msg.sender
        );
        index++;
        pendingnftCount++;
    }

    /*
     *   The buynft() function verifies whether the buyer has enough balance to purchase the nft.
     *   The function also checks whether the seller and buyer both have a valid account address.
     *   The token owner's address is not the same as the buyer's address. The seller is the owner
     *   of the nft. Once all of the conditions have been verified, it will stnft the payment and
     *   nft token transfer process. _transfer transfers an nft token from the seller to the buyer's
     *   address. _current_owner.transfer will transfer the buyer's payment amount to the nft owner's
     *   account. If the seller pays extra Ether to buy the nft, that ether will be refunded to the
     *   buyer's account. Finally, the buynft() function will update nft ownership information in
     *   the blockchain. The status will change to 0, also known as the sold status. The function
     *   implementations keep records of the nft transaction in the nftTxn array.
     */
    function buynft(uint256 _tokenId) public payable {
        (
            uint256 _id,
            string memory _title,
            ,
            uint256 _price,
            uint256 _status,
            ,
            string memory _authorName,
            address _author,
            address payable _current_owner,
            ,

        ) = findnft(_tokenId);

        // Ensure _current_owner address is valid and not the zero address
        require(_current_owner != address(0), "Invalid _current_owner address");
        // Ensure the sender's address is valid and not the zero address
        require(msg.sender != address(0), "Invalid sender address");
        // Ensure the sender is not the current owner to prevent unauthorized transfers
        require(
            msg.sender != _current_owner,
            "Sender cannot be the current owner"
        );
        // Ensure the value sent with the transaction is greater than or equal to the specified _price
        require(msg.value >= _price, "Insufficient payment amount");
        // Ensure the owner of the NFT with the given _tokenId is a valid address and not the zero address
        require(
            nfts[_tokenId].owner != address(0),
            "Invalid NFT owner address"
        );
        // Ensure the NFT with the given _tokenId is available for sale (status == 1)
        require(nfts[_tokenId].status == 1, "NFT is not available for sale");

        _safeTransfer(_current_owner, msg.sender, _tokenId, ""); // transfer ownership of the nft
        //return extra payment
        if (msg.value > _price)
            payable(msg.sender).transfer(msg.value - _price);
        // make a payment to the platformFeeRecipient
        (
            address platformFeeRecipient,
            uint16 platformFeeBps
        ) = getPlatformFeeInfo();
        uint256 contractOwnerAmount = (_price * platformFeeBps) / 10000;
        uint256 _currentOwnerAmount = (_price - contractOwnerAmount);
        address payable contractOwner = payable(platformFeeRecipient);
        contractOwner.transfer(contractOwnerAmount);
        //make a payment to the current owner
        _current_owner.transfer(_currentOwnerAmount);

        nfts[_tokenId].owner = payable(msg.sender);
        nfts[_tokenId].status = 0;

        nftTxn memory _nftTxn = nftTxn({
            id: _id,
            price: _price,
            seller: _current_owner,
            buyer: msg.sender,
            txnDate: block.timestamp,
            status: _status
        });

        nftTxns[_id].push(_nftTxn);
        pendingnftCount--;
        emit LognftSold(
            _tokenId,
            _title,
            _authorName,
            _price,
            _author,
            _current_owner,
            msg.sender
        );
    }

    /* Pass the token ID and get the nft Information */
    }
Now that I have given you the necessary information, I want you to help me find new gas-wasting patterns from the above codes, based on what you learn from the list of patterns. Please be creative and think out of the box beyond the patterns listed above. Please put the new gas wasting patterns in bullet points (in the form of '1.', '2.', etc), and answer the following questions for each of the found patterns (in sub-bullet-points under each bullet point):

1. How did you find this pattern? Could you explain the reasoning process, step by step, behind the discovery?

2. What should I do, step by step, to fix the found gas-wasting patterns? Could you explain the reasoning process, step by step, behind the reason why such a fix works?

3. On a score of 0 to 5, could you please tell me how would you rate this found new pattern, in terms of how much it is sacrificing readability, security, and maintainability in exchange for gas optimization (5 is the least impacted. For example, Security score of 5 means implementing the found gas-optimization pattern would have no effect on security, whereas 1 means it would reduce security)? Please format your answer as in "Readability: 5; Security: 4; Maintainability: 3". Please also provide explanations.

Here are some additional requirements:
1. If you think my prompt to you has any issues (e.g. ambiguity or lack of information), please tell me how I should improve it in the next time.
2. please help me format your answer in the form of a Latex section (e.g. \section*{Analysis of Provided Solidity Code}), since I want to assert it to a Latex document.