Reviewing the provided Solidity code, below are some identified patterns of gas inefficiency that are not covered in your initial list:

1. **Excessive permission checks:** The code makes extensive use of permission checks like `whenNotPaused`, `nonReentrant`, and `initializer`. While these checks are important for security, they also consume gas every time they are invoked. 

   - **Finding process:** I noticed that these modifiers are used in almost every function. While they are essential for security, they also contribute to the gas cost of each function invocation.
   - **Fixing process:** Consider combining these checks into a single modifier if they are always used together, which reduces the number of function invocations and thus the gas usage. Also, if any checks are not necessary for certain functions, consider removing them from those functions. As an example:
      ```solidity
      modifier isEligible() {
          require(!paused, "paused");
          require(!reentrancy_lock, "reentrant");
          _;
      }
      ```
   - **Impact on readability, security, maintainability:** Readability: 4 (slightly less readable as the checks are now hidden in a single modifier); Security: 5 (no impact); Maintainability: 4 (slightly less maintainable as changes to one check may impact others).

2. **Redundant access of state variables:** The `_nftAddress` and `_tokenId` are repeatedly used to access the `auctions` and `highestBids` mappings. 

   - **Finding process:** I noticed that the same arguments (_nftAddress, _tokenId) were used to access the same storage mappings multiple times in the same function.
   - **Fixing process:** You can adjust the code to read these values into memory once, and then reuse the memory variables instead of accessing the storage multiple times. For example:
      ```solidity
      Auction storage auction = auctions[_nftAddress][_tokenId];
      HighestBid storage highestBid = highestBids[_nftAddress][_tokenId];
      ```
      can be optimized as follows:
      ```solidity
      Auction memory auction = auctions[_nftAddress][_tokenId];
      HighestBid memory highestBid = highestBids[_nftAddress][_tokenId];
      ```
   - **Impact on readability, security, maintainability:** Readability: 5 (no impact); Security: 5 (no impact); Maintainability: 5 (no impact).

For your first additional requirement, your prompt is clear and comprehensive but could be improved by asking for specific priorities between readability, security, and maintainability, since these factors can sometimes be at odds with each other.

Regarding the second requirement, the process of finding these patterns involved thoroughly reading the provided code and understanding its operation, then comparing that to the list of known gas-wasting patterns. While this process was effective, it could potentially be improved by using a more systematic approach, such as checking each line individually against the list of known patterns, or using a tool to analyze the code for common gas inefficiencies. This might allow for a more comprehensive and accurate review. After identifying the patterns, I described them using clear, concise language and provided detailed steps for resolving them. This process could be improved by providing more detailed examples of how to implement the suggested changes.