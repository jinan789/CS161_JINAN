I want you to help me find new gas-wasting patterns for Solidity. Gas is a unique pricing mechanism in Solidity, which measures the amount of computational resources put into the execution of Solidity codes. Gas is paid in money, so saving gas is saving money. The goal of gas optimization is to find an equivalent code instruction sequence that produces the same output while consuming less gas. This may misalign from how people typically write codes, since the gas pricing mechanism is less intuitive and code writers do not often keep it in mind. For example, storage variables in Solidity are expensive in terms of gas, while memory is not, so unnecessary storage operations should be avoided when possible, but programmers from other languages might not be aware of this. 

First, I will give you a list of known gas-wasting patterns as an example. The list is numbered, with each bullet point specifying one gas-wasting pattern and an explanation of why this pattern wastes gas. Please be creative and see if my provided codes contain any gas-wasting patterns beyond the provided ones. The list is as follows:

1. Repeated computation of the same expression: including repetitive reads of the same expensive storage variable (e.g. Overuse of expensive storage variables). This could be solved by introducing an intermediate variable to hold the value
2. Variable refactoring: by refactoring variable types and thus adjusting memory layout, we could save gas by saving the amount of storage space needed
3. Redundant operations with same effects: redundant operations that overwrite the effect of the previous operation, making the previous useless
4. Pre-computable operations on constants: performing comparisons (or other operations) to constants is useless and could be pre-computed
5. Simplifiable conditional operations: expressions that involve logical operations that could be simplified to reduce the amount of computational workload.
6. "Loop fusion." If two loops have the same starting and stopping conditions with the same increment steps, then we could consider combining them into one, if they have no dependencies. 
7. "Repeated computations in a loop." If there are expressions that produce the same outcome in each iteration of a loop, we could move it out of the loop and execute only once, which saves computation.
8. "Opaque predicate." If the outcome of a predicate could be inferred to be true/false without execution, then we could just replace it with the corresponding value to save the compuation during runtime.

Next, I will give you a chunk of Solidity codes from which you will find gas-inefficient patterns:
contract JBTiered721Delegate is JBOwnable, JB721Delegate, IJBTiered721Delegate {
    function adjustTiers(JB721TierParams[] calldata _tiersToAdd, uint256[] calldata _tierIdsToRemove)
        external
        override
        requirePermission(owner(), projectId, JB721Operations.ADJUST_TIERS)
    {
        // Get a reference to the number of tiers being added.
        uint256 _numberOfTiersToAdd = _tiersToAdd.length;

        // Get a reference to the number of tiers being removed.
        uint256 _numberOfTiersToRemove = _tierIdsToRemove.length;

        // Remove the tiers.
        if (_numberOfTiersToRemove != 0) {
            // Record the removed tiers.
            store.recordRemoveTierIds(_tierIdsToRemove);

            // Emit events for each removed tier.
            for (uint256 _i; _i < _numberOfTiersToRemove;) {
                emit RemoveTier(_tierIdsToRemove[_i], msg.sender);
                unchecked {
                    ++_i;
                }
            }
        }

        // Add the tiers.
        if (_numberOfTiersToAdd != 0) {
            // Record the added tiers in the store.
            uint256[] memory _tierIdsAdded = store.recordAddTiers(_tiersToAdd);

            // Emit events for each added tier.
            for (uint256 _i; _i < _numberOfTiersToAdd;) {
                emit AddTier(_tierIdsAdded[_i], _tiersToAdd[_i], msg.sender);
                unchecked {
                    ++_i;
                }
            }
        }
    }

    /// @notice Set a contract's URI metadata properties.
    /// @dev Only the contract's owner can set the URI metadata.
    /// @param _baseUri The new base URI.
    /// @param _contractUri The new contract URI.
    /// @param _tokenUriResolver The new URI resolver.
    /// @param _encodedIPFSUriTierId The ID of the tier to set the encoded IPFS URI of.
    /// @param _encodedIPFSUri The encoded IPFS URI to set.
    function firstOwnerOf(uint256 _tokenId) external view override returns (address) {
        // Get a reference to the first owner.
        address _storedFirstOwner = _firstOwnerOf[_tokenId];

        // If the stored first owner is set, return it.
        if (_storedFirstOwner != address(0)) return _storedFirstOwner;

        // Otherwise, the first owner must be the current owner.
        return _owners[_tokenId];
    }
    function pricingContext() external view override returns (uint256 currency, uint256 decimals, IJBPrices prices) {
        // Get a reference to the packed pricing context.
        uint256 _packed = _packedPricingContext;
        // currency in bits 0-47 (48 bits).
        currency = uint256(uint48(_packed));
        // pricing decimals in bits 48-95 (48 bits).
        decimals = uint256(uint48(_packed >> 48));
        // prices contract in bits 96-255 (160 bits).
        prices = IJBPrices(address(uint160(_packed >> 96)));
    }
    function tokenURI(uint256 _tokenId) public view virtual override returns (string memory) {
        // Get a reference to the tokenUriResolver.
        IJB721TokenUriResolver _resolver = store.tokenUriResolverOf(address(this));

        // If a tokenUriResolver is provided, use it to resolve the token URI.
        if (address(_resolver) != address(0)) return _resolver.tokenUriOf(address(this), _tokenId);

        // Otherwise, return the token URI corresponding with the token's tier.
        return JBIpfsDecoder.decode(baseURI, store.encodedTierIPFSUriOf(address(this), _tokenId));
    }
    function initialize(
        uint256 _projectId,
        string memory _name,
        string memory _symbol,
        IJBFundingCycleStore _fundingCycleStore,
        string memory _baseUri,
        IJB721TokenUriResolver _tokenUriResolver,
        string memory _contractUri,
        JB721PricingParams memory _pricing,
        IJBTiered721DelegateStore _store,
        JBTiered721Flags memory _flags
    ) public override {
        // Stop re-initialization.
        if (address(store) != address(0)) revert();

        // Initialize the superclass.
        JB721Delegate._initialize(_projectId, _name, _symbol);

        fundingCycleStore = _fundingCycleStore;
        store = _store;

        uint256 _packed;
        // currency in bits 0-47 (48 bits).
        _packed |= uint256(_pricing.currency);
        // pricing decimals in bits 48-95 (48 bits).
        _packed |= uint256(_pricing.decimals) << 48;
        // prices contract in bits 96-255 (160 bits).
        _packed |= uint256(uint160(address(_pricing.prices))) << 96;
        // Store the packed value.
        _packedPricingContext = _packed;

        // Store the base URI if provided.
        if (bytes(_baseUri).length != 0) baseURI = _baseUri;

        // Set the contract URI if provided.
        if (bytes(_contractUri).length != 0) contractURI = _contractUri;

        // Set the token URI resolver if provided.
        if (_tokenUriResolver != IJB721TokenUriResolver(address(0))) {
            _store.recordSetTokenUriResolver(_tokenUriResolver);
        }

        // Record adding the provided tiers.
        if (_pricing.tiers.length != 0) _store.recordAddTiers(_pricing.tiers);

        // Set the flags if needed.
        if (
            _flags.lockReservedTokenChanges || _flags.lockVotingUnitChanges || _flags.lockManualMintingChanges
                || _flags.preventOverspending
        ) _store.recordFlags(_flags);

        // Transfer ownership to the initializer.
        _transferOwnership(msg.sender);
    }

    //*********************************************************************//
    // ---------------------- external transactions ---------------------- //
    //*********************************************************************//

    /// @notice Manually mint NFTs from the provided tiers .
    /// @param _tierIds The IDs of the tiers to mint from.
    /// @param _beneficiary The address to mint to.
    /// @return tokenIds The IDs of the newly minted tokens.
    }
Now I want you to help me find new gas-wasting patterns from the above codes and the list of example patterns. Please be creative and think outside the box beyond the patterns listed above. Please put the new gas-wasting patterns in bullet points, using Latex syntax. Also please answer the following questions for each of the found patterns:

1. How did you find this pattern? Could you explain the reasoning process, step by step, behind the discovery?
2. What should I do, step by step, to fix the found gas-wasting patterns? Could you explain the reasoning process, step by step, behind the reason why such a fix works?
3. On a score of 0 to 5, please rate this new pattern in terms of how much it is sacrificing readability, security, and maintainability in exchange for gas optimization (5 is the least impacted. For example, "Readability: 5; Security: 4; Maintainability: 1" means no effect on security while maintainability is largely affected.)

Here are some additional requirements:
1. If you think my prompt to you has any issues (e.g. ambiguity or lack of information), please tell me how I should improve it the next time.
2. Please reflect on your reasoning process and tell me how you could do better next time in terms of completing the given task. If you found any issues, please also make corresponding improvements to your output this time and tell me what you did and why such improvement is necessary, in a step-by-step manner.